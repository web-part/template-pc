{
    "API": {
        "id": "API",
        "name": "API",
        "names": [
            "API"
        ],
        "file": "temp/node_modules/@definejs/api/modules/API.js",
        "ext": ".js",
        "package": {
            "alias": "api",
            "name": "@definejs/api",
            "version": "1.0.1"
        },
        "content": "/**\n* src: @definejs/api/modules/API.js\n* pkg: @definejs/api@1.0.1\n*/\ndefine('API', function (require, module, exports) { \n    const $Object = require('Object');\r\n    const Emitter = require('Emitter');\r\n    const Fn = require('Fn');\r\n    \r\n    const Ajax = module.require('Ajax');\r\n    \r\n    const mapper = new Map();\r\n    let idCounter = 0;\r\n    \r\n    class API {\r\n        /**\r\n        * API 构造器。\r\n        * 已重载 API(config);         此时 name 为空串。\r\n        * 已重载 API(name, config);     \r\n        * @param {string} name 后台接口的名称。 简短名称，且不包括后缀。\r\n        * @param {Object} [config] 配置对象。\r\n        *   config = {\r\n        *\r\n        *   };\r\n        */\r\n        constructor(name, config) {\r\n            //重载 API(config);\r\n            if (typeof name == 'object') {\r\n                config = name;\r\n                name = '';\r\n            }\r\n    \r\n            name = name || '';\r\n            config = $Object.deepAssign({}, exports.defaults, config);\r\n    \r\n            let id = `definejs-API-${idCounter++}`;\r\n            let emitter = new Emitter(this);\r\n            let successCode = config.successCode;\r\n            let proxy = config.proxy;\r\n    \r\n            //支持简写，代理的文件名跟 API 的名称一致。\r\n            switch (proxy) {\r\n                case true:\r\n                    proxy = name + '.js';   //如 `getUsers.js`。\r\n                    break;\r\n                case '.json':\r\n                case '.js':\r\n                    proxy = name + proxy;   //如 `getUsers.json`。\r\n                    break;\r\n            }\r\n    \r\n            //发起 ajax 请求所需要的配置对象。\r\n            let ajax = {\r\n                'name': name,\r\n                'data': config.data,\r\n                'query': config.query,\r\n                'url': config.url,\r\n                'prefix': config.prefix,\r\n                'ext': config.ext,\r\n                'random': config.random,\r\n    \r\n                'successCode': successCode,\r\n                'field': config.field,\r\n                'proxy': proxy,\r\n                'serialize': config.serialize,\r\n                'timeout': config.timeout,\r\n                'headers': config.headers,\r\n    \r\n                success(data, json, xhr) { //成功\r\n                    fireEvent('success', [data, json, xhr]);\r\n                },\r\n    \r\n                fail(code, msg, json, xhr) { //失败\r\n                    fireEvent('fail', [code, msg, json, xhr]);\r\n                },\r\n    \r\n                error(xhr) { //错误\r\n                    if (meta.aborted) { //避免因手动调用了 abort() 而导致触发 error 事件。\r\n                        meta.aborted = false; //归位\r\n                        return;\r\n                    }\r\n    \r\n                    fireEvent('error', [xhr]);\r\n                },\r\n    \r\n                ontimeout(xhr) { //超时，自定义的\r\n                    fireEvent('timeout', [xhr]);\r\n                },\r\n            };\r\n    \r\n            let meta = {\r\n                'id': id,\r\n                'ajax': ajax,\r\n                'status': '',\r\n                'args': [],\r\n                'emitter': emitter,\r\n                'xhr': null,            //缓存创建出来的 xhr 对象。\r\n                'aborted': false,       //指示是否已调用了 abort()。\r\n                'fireEvent': fireEvent, //\r\n    \r\n                /**\r\n                * 用于发起 ajax 请求的 get 方法。\r\n                * 如果想实现自己的 get 方法，可以提供此函数。\r\n                * 否则使用内部默认的 Ajax.get() 方法。\r\n                */\r\n                'get': config.get || Ajax.get,\r\n    \r\n                /**\r\n                * 用于发起 ajax 请求的 post 方法。\r\n                * 如果想实现自己的 post 方法，可以提供此函数。\r\n                * 否则使用内部默认的 Ajax.post() 方法。\r\n                */\r\n                'post': config.post || Ajax.post,\r\n            };\r\n    \r\n            mapper.set(this, meta);\r\n    \r\n    \r\n            Object.assign(this, {\r\n                'id': meta.id,\r\n            });\r\n    \r\n    \r\n            //内部共用函数。\r\n            function fireEvent(status, args, emitter) {\r\n                status = meta.status = status || meta.status;\r\n                args = meta.args = args || meta.args;\r\n                emitter = emitter || meta.emitter;\r\n                meta.xhr = null; //请求已完成，针对 abort() 方法。\r\n    \r\n                let len = args.length;\r\n                let xhr = args[len - 1];\r\n                let json = args[len - 2];\r\n                let isSuccess = status == 'success';\r\n                let isFail = status == 'fail';\r\n    \r\n    \r\n                Fn.delay(config.delay, function () {\r\n                    //最先触发\r\n                    let values = emitter.fire('response', [status, json, xhr]);\r\n    \r\n                    if (values.includes(false)) {\r\n                        return;\r\n                    }\r\n    \r\n    \r\n                    //进一步触发具体 code 对应的事件\r\n                    if (isSuccess || isFail) {\r\n                        let code = isSuccess ? successCode : args[0];\r\n                        values = emitter.fire('code', code, args);\r\n    \r\n                        if (values.includes(false)) {\r\n                            return;\r\n                        }\r\n                    }\r\n    \r\n    \r\n                    //在 Proxy 的响应中 xhr 为 null。\r\n                    if (xhr) {\r\n                        values = emitter.fire('status', xhr.status, args);\r\n    \r\n                        if (values.includes(false)) {\r\n                            return;\r\n                        }\r\n                    }\r\n    \r\n                    //触发命名的分类事件，如 success|fail|error|timeout\r\n                    values = emitter.fire(status, args);\r\n    \r\n                    if (values.includes(false)) {\r\n                        return;\r\n                    }\r\n    \r\n                    //触发总事件。\r\n                    emitter.fire('done', [status, json, xhr]);\r\n                });\r\n            }\r\n        }\r\n    \r\n        // /**\r\n        // * 当前实例的 id。\r\n        // * 也是最外层的 DOM 节点的 id。\r\n        // */\r\n        // id = '';\r\n    \r\n    \r\n        /**\r\n        * 发起网络 GET 请求。\r\n        * 请求完成后会最先触发相应的事件。\r\n        * @param {Object} [data] 请求的数据对象。\r\n        *   该数据会给序列化成查询字符串以拼接到 url 中。\r\n        * @example\r\n            var api = new API('test');\r\n            api.get({ name: 'micty' });\r\n        */\r\n        get(data) {\r\n            let meta = mapper.get(this);    //API 类给继承后，this 就是子类的实例。 比如 SSH 继承 API，则 this 为 SSH 的实例，不再是 API 的实例。\r\n            let emitter = meta.emitter;\r\n    \r\n            meta.aborted = false; //归位\r\n    \r\n            let obj = Object.assign({}, meta.ajax);\r\n            if (data) {\r\n                obj.data = data;\r\n            }\r\n    \r\n            data = obj.data;  //这里用 obj.data\r\n    \r\n            emitter.fire('request', 'get', [data]);\r\n            emitter.fire('request', ['get', data]);\r\n    \r\n            meta.xhr = meta.get(obj);\r\n    \r\n        }\r\n    \r\n        /**\r\n        * 发起网络 POST 请求。\r\n        * 请求完成后会最先触发相应的事件。\r\n        * @param {Object} [data] POST 请求的数据对象。\r\n        * @param {Object} [query] 查询字符串的数据对象。\r\n        *   该数据会给序列化成查询字符串，并且通过 form-data 发送出去。\r\n        * @return {API} 返回当前 API 的实例 this，因此进一步可用于链式调用。\r\n        */\r\n        post(data, query) {\r\n            let meta = mapper.get(this);\r\n            let emitter = meta.emitter;\r\n            let ajax = meta.ajax;\r\n    \r\n            meta.aborted = false; //归位\r\n    \r\n            let obj = Object.assign({}, ajax, {\r\n                'data': data || ajax.data,\r\n                'query': query || ajax.query,\r\n            });\r\n    \r\n            data = obj.data;    //这里用 obj.data\r\n            query = obj.query;  //这里用 obj.query\r\n    \r\n            emitter.fire('request', 'post', [data, query]);\r\n            emitter.fire('request', ['post', data, query]);\r\n    \r\n    \r\n            meta.xhr = meta.post(obj);\r\n    \r\n        }\r\n    \r\n        /**\r\n        * 取消当前已发起但未完成的请求。\r\n        * 只有已发起了请求但未完成，才会执行取消操作，并会触发 abort 事件。\r\n        */\r\n        abort() {\r\n            let meta = mapper.get(this);\r\n            let xhr = meta.xhr;\r\n    \r\n            if (!xhr) {\r\n                return;\r\n            }\r\n    \r\n            meta.aborted = true;        //先设置状态\r\n            xhr.abort();                //会触发 ajax.error 事件。\r\n            meta.emitter.fire('abort'); //\r\n        }\r\n    \r\n    \r\n        /**\r\n        * 绑定事件。\r\n        * 已重载 on({...}，因此支持批量绑定。\r\n        * @return {API} 返回当前 API 的实例 this，因此进一步可用于链式调用。\r\n        */\r\n        on(...args) {\r\n            let meta = mapper.get(this);\r\n            let emitter = meta.emitter;\r\n            let status = meta.status;\r\n    \r\n            emitter.on(...args);\r\n    \r\n            if (status) { //请求已完成，立即触发\r\n                let emt = new Emitter(this); //使用临时的事件触发器。\r\n                emt.on.apply(emt, args);\r\n                meta.fireEvent(status, meta.args, emt);\r\n                emt.destroy();\r\n            }\r\n    \r\n        }\r\n    \r\n    \r\n    \r\n        /**\r\n        * 销毁本实例对象。\r\n        */\r\n        destroy() {\r\n            let meta = mapper.get(this);\r\n            let emitter = meta.emitter;\r\n    \r\n            emitter.destroy();\r\n            mapper.delete(this);\r\n        }\r\n    }\r\n    \r\n    API.defaults = require('API.defaults');\r\n    module.exports = exports = API;\n});",
        "dest": "./output/definejs/src/@definejs/api/API.js"
    },
    "API.defaults": {
        "id": "API.defaults",
        "name": "API.defaults",
        "names": [
            "API.defaults"
        ],
        "file": "temp/node_modules/@definejs/api/modules/API.defaults.js",
        "ext": ".js",
        "package": {
            "alias": "api",
            "name": "@definejs/api",
            "version": "1.0.1"
        },
        "content": "/**\n* src: @definejs/api/modules/API.defaults.js\n* pkg: @definejs/api@1.0.1\n*/\ndefine('API.defaults', function (require, module, exports) { \n    /**\r\n    * API 模块的默认配置\r\n    */\r\n    module.exports = {\r\n        /** \r\n        * 响应的数据类型。\r\n        * 只有指定为 `json` 时才进行 JSON 解析，如果请求成功了但解析失败则调用 fail 函数。\r\n        */\r\n        type: 'json',\r\n        /**\r\n        * 成功的状态码。 \r\n        * 只有状态码为该值是才表示成功，其它的均表示失败。\r\n        */\r\n        successCode: 200,\r\n        /**\r\n        * 字段映射。\r\n        * 如果指定为 null，则不对响应进行 json 解析。 即只有指定具体的映射规则时，才把响应当成 json 进行解析。\r\n        */\r\n        field: {\r\n            /**\r\n            * 状态码。\r\n            */\r\n            code: 'code',\r\n            /**\r\n            * 消息。\r\n            */\r\n            msg: 'msg',\r\n            /**\r\n            * 主体数据。\r\n            */\r\n            data: 'data',\r\n        },\r\n        /**\r\n        * 代理配置。\r\n        */\r\n        proxy: null,\r\n        /**\r\n        * 随机延迟时间，更真实模拟实际网络环境。\r\n        * 可指定为 false，或如 { min: 500, max: 2000 } 的格式。\r\n        */\r\n        delay: false,\r\n        /**\r\n        * 在 url 中增加一个随机 key，以解决缓存问题。\r\n        * 当指定为 false 时，则禁用。\r\n        */\r\n        random: true,\r\n        /**\r\n        * API 接口 Url 的主体部分。\r\n        */\r\n        url: '',\r\n        /**\r\n        * API 接口 Url 的前缀部分。\r\n        */\r\n        prefix: '',\r\n        /**\r\n        * API 接口 Url 的后缀部分。\r\n        * 针对那些如 '.do'、'.aspx' 等有后缀名的接口比较实用。\r\n        */\r\n        ext: '',\r\n        /**\r\n        * 要发送的数据。 可选的。\r\n        * 当发送方式为 get 时，该数据将会给序列化成查询字符串并附加到 url 查询参数中。\r\n        * 当发送方式为 post 时，会用在表单中。\r\n        */\r\n        data: null,\r\n        /**\r\n        * 要发送的查询参数，仅当发送方式为 post 时有效 (可选的)。\r\n        * 当发送方式为 post 时，该数据将会给序列化成查询字符串并附加到 url 查询参数中。\r\n        */\r\n        query: null,\r\n        /**\r\n        * 要发送的请求头。\r\n        */\r\n        headers: null,\r\n        /**\r\n        * 请求超时的最大值(毫秒)。\r\n        * 0 表示由浏览器控制，代码层面不控制。\r\n        */\r\n        timeout: 0,\r\n        /**\r\n        * 把请求时的 data 中的第一级子对象进行序列化的方法。\r\n        * @param {string} key 要进行处理的子对象的键。\r\n        * @param {Object} value 要进行处理的子对象的值对象。\r\n        * @return {string} 返回该子对象序列化的字符串。\r\n        */\r\n        serialize: function (key, value) {\r\n            let json = JSON.stringify(value);\r\n            return encodeURIComponent(json);\r\n        },\r\n        /**\r\n        * 用于发起 ajax 请求的 get 方法。\r\n        * 如果想实现自己的 get 方法，可以提供此函数。\r\n        * 否则使用内部默认的 Ajax.get() 方法。\r\n        */\r\n        get: null,\r\n        /**\r\n        * 用于发起 ajax 请求的 post 方法。\r\n        * 如果想实现自己的 post 方法，可以提供此函数。\r\n        * 否则使用内部默认的 Ajax.post() 方法。\r\n        */\r\n        post: null,\r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/api/API.defaults.js"
    },
    "API/Ajax": {
        "id": "API/Ajax",
        "name": "Ajax",
        "names": [
            "API",
            "Ajax"
        ],
        "file": "temp/node_modules/@definejs/api/modules/API/Ajax.js",
        "ext": ".js",
        "package": {
            "alias": "api",
            "name": "@definejs/api",
            "version": "1.0.1"
        },
        "content": "/**\n* src: @definejs/api/modules/API/Ajax.js\n* pkg: @definejs/api@1.0.1\n*/\ndefine('API/Ajax', function (require, module, exports) { \n    \r\n    const $Object = require('Object');\r\n    const $String = require('String');\r\n    const $JSON = require('JSON');\r\n    const Proxy = require('Proxy');\r\n    const Query = require('Query');\r\n    \r\n    /**\r\n    * 发起 ajax 网络请求(核心方法)。\r\n    *   method: 'get' | 'post', //网络请求的方式：'get' 或 'post'。\r\n    *   config = {\r\n    *       url: '',            //可选，请求的 url 地址。\r\n    *       prefix: '',         //可选，url 的前缀。\r\n    *       name: '',           //必选，后台接口的名称，会用在 url 中。\r\n    *       ext: '',            //可选，要用在 url 中的后缀。\r\n    *       successCode: 200,   //指示请求成功时的代码。 数字或字符串。\r\n    *       random: true,       //是否给 url 加上随机数，以刷新缓存。\r\n    *       proxy: false,       //是否启用代理。 要启用，可以指定为 true，或一个具体的 json 或 js 文件名。\r\n    *       timeout: 0,         //超时时间。 如果指定为 0，则使用浏览器内置的超时管理，会调用 error 回调函数。\r\n    *\r\n    *       //该数据会给序列化成查询字符串，然后：\r\n    *       //当 method 为 'get' 时，数据拼接在 url 中。\r\n    *       //当 method 为 'post' 时，数据放在 form-data 表单中。\r\n    *       data: {},           //可选，要发送的数据。 \r\n    *       query: {},          //可选，要发送的查询字符串数据。 该字段仅在 method 为 'post' 时可用。\r\n    *       headers: {},        //可选，要发送的请求头数据。\r\n    *\r\n    *       field: {            //可选，响应中的映射字段。 如果不指定为 null，则不当成 json 进行解析。\r\n    *           code: 'code',   //状态码。\r\n    *           msg: 'msg',     //消息。\r\n    *           data: 'data',   //主体数据。\r\n    *       },\r\n    *\r\n    *       success: fn,        //请求成功时的回调函数。\r\n    *       fail: fn,           //请求失败时的回调函数。\r\n    *       error: fn,          //请求错误时的回调函数。\r\n    *       ontimeout: fn,      //请求超时时的回调函数。\r\n    *       serialize: fn,      //对 data 字段的子对象进行序列化的方法。\r\n    *   };\r\n    *\r\n    * 返回： \r\n    *   XMLHTTPRequest 实例对象 xhr。 \r\n    *   如果使用的是代理，则返回 null。\r\n    */\r\n    function request(method, config) {\r\n        let proxy = config.proxy;\r\n    \r\n        if (proxy) { //使用了代理\r\n            Proxy.request(proxy, config);\r\n            return null;\r\n        }\r\n    \r\n    \r\n        //完整的 url\r\n        let url = [\r\n            config.url,\r\n            config.prefix,\r\n            config.name,\r\n            config.ext,\r\n        ].join('');\r\n    \r\n    \r\n        let data = config.data || null; // null 可能会在 xhr.send(data) 里用到。\r\n    \r\n        if (data) {\r\n            let serialize = config.serialize; //对子对象进行序列化的方法。\r\n    \r\n            data = $Object.map(data, function (key, value) {\r\n                if (typeof value == 'object' && value) { //子对象编码成 JSON 字符串\r\n                    return serialize(key, value);\r\n                }\r\n    \r\n                //其他的\r\n                return value; //原样返回\r\n            });\r\n        }\r\n    \r\n    \r\n        if (method == 'post') {\r\n            let query = config.query;\r\n            if (query) {\r\n                url = Query.add(url, query);\r\n            }\r\n            if (data) {\r\n                data = Query.stringify(data);\r\n            }\r\n        }\r\n        else if (data) { // 'get'\r\n            url = Query.add(url, data);\r\n            data = null; //要发送的数据已附加到 url 参数上\r\n        }\r\n    \r\n    \r\n        //增加一个随机字段，以使缓存失效\r\n        let random = config.random;\r\n        if (random) {\r\n            random = $String.random(4);\r\n            url = Query.add(url, random);\r\n        }\r\n    \r\n    \r\n        //同时启动超时器和发起请求，让它们去竞争。\r\n    \r\n        let isTimeout = false; //指示是否已超时\r\n        let tid = null;\r\n        let timeout = config.timeout || 0;\r\n    \r\n        if (timeout > 0) {\r\n            tid = setTimeout(function () {\r\n                isTimeout = true;\r\n                xhr.abort(); //取消当前响应，关闭连接并且结束任何未决的网络活动。\r\n    \r\n                let fn = config.ontimeout;\r\n                fn && fn(xhr);\r\n    \r\n            }, timeout);\r\n        }\r\n    \r\n    \r\n        let xhr = new XMLHttpRequest();\r\n        xhr.open(method, url, true);\r\n    \r\n        xhr.onreadystatechange = function () {\r\n            if (isTimeout || xhr.readyState != 4) {\r\n                return;\r\n            }\r\n    \r\n    \r\n            clearTimeout(tid);\r\n    \r\n            let successCode = config.successCode;\r\n            let fnError = config.error;\r\n            let fnSuccess = config.success;\r\n            let fnFail = config.fail;\r\n            let field = config.field || null;\r\n    \r\n            if (xhr.status != 200) {\r\n                fnError && fnError(xhr);\r\n                return;\r\n            }\r\n    \r\n            //没有指定 field 字段映射规则，则直接当作是请求成功了。\r\n            if (!field) {\r\n                fnSuccess && fnSuccess(xhr);\r\n                return;\r\n            }\r\n    \r\n            //以下都是指定了 field 字段映射规则的，则尝试解析成 json。\r\n            let json = $JSON.parse(xhr.responseText);\r\n    \r\n            if (!json) {\r\n                fnError && fnError(xhr);\r\n                return;\r\n            }\r\n    \r\n            let code = json[field.code];\r\n    \r\n            if (code == successCode) {\r\n                let data = field.data in json ? json[field.data] : {};\r\n                fnSuccess && fnSuccess(data, json, xhr);\r\n            }\r\n            else {\r\n                let msg = json[field.msg];\r\n                fnFail && fnFail(code, msg, json, xhr);\r\n            }\r\n        };\r\n    \r\n        //设置请求头。\r\n        let headers = config.headers;\r\n    \r\n        if (headers) {\r\n            $Object.each(headers, function (key, value) {\r\n                xhr.setRequestHeader(key, value);\r\n            });\r\n        }\r\n    \r\n    \r\n        if (method == 'post') {\r\n            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\r\n        }\r\n    \r\n        xhr.send(data);\r\n    \r\n        return xhr;\r\n    }\r\n    \r\n    \r\n    module.exports = {\r\n    \r\n        get(config) {\r\n            return request('get', config);\r\n        },\r\n    \r\n        post(config) {\r\n            return request('post', config);\r\n        },\r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/api/API/Ajax.js"
    },
    "Alert": {
        "id": "Alert",
        "name": "Alert",
        "names": [
            "Alert"
        ],
        "file": "temp/node_modules/@definejs/alert/modules/Alert.js",
        "ext": ".js",
        "package": {
            "alias": "alert",
            "name": "@definejs/alert",
            "version": "1.0.2"
        },
        "content": "/**\n* src: @definejs/alert/modules/Alert.js\n* pkg: @definejs/alert@1.0.2\n*/\ndefine('Alert', function (require, module, exports) { \n    /**\r\n    * alert 对话框。\r\n    */\r\n    const $String = require('String');\r\n    const Dialog = module.require('Dialog');\r\n    const Sample = module.require('Sample');\r\n    \r\n    \r\n    module.exports = exports = {\r\n        /**\r\n        * 默认配置。\r\n        */\r\n        defaults: require('Alert.defaults'),\r\n        \r\n        /**\r\n        * 显示一个 alert 对话框。 \r\n        * 支持多次调用，会将多次调用加进队列，在显示完上一次后进行下一次的显示。\r\n        */\r\n        show(text, text1, textN, fn) {\r\n            //重载 show(obj); \r\n            //以方便程序员调试查看 json 对象。\r\n            if (typeof text == 'object') {\r\n                text = JSON.stringify(text, null, 4);\r\n                text = $String.format(Sample, { 'text': text, });\r\n            }\r\n    \r\n            let args = [...arguments];\r\n    \r\n            //在参数列表中找到的第一个函数当作是回调函数，并忽略后面的参数。\r\n            let index = args.findIndex(function (item, index) {\r\n                return typeof item == 'function';\r\n            });\r\n    \r\n            if (index > 0) { //找到回调函数\r\n                fn = args[index];\r\n                args = args.slice(0, index); //回调函数前面的都当作是要显示的文本\r\n            }\r\n            else {\r\n                fn = null;\r\n            }\r\n    \r\n            text = $String.format(...args);\r\n            \r\n            Dialog.init(exports.defaults);\r\n            Dialog.add(text, fn);\r\n        },\r\n    };\r\n    \r\n    \n});",
        "dest": "./output/definejs/src/@definejs/alert/Alert.js"
    },
    "Alert.defaults": {
        "id": "Alert.defaults",
        "name": "Alert.defaults",
        "names": [
            "Alert.defaults"
        ],
        "file": "temp/node_modules/@definejs/alert/modules/Alert.defaults.js",
        "ext": ".js",
        "package": {
            "alias": "alert",
            "name": "@definejs/alert",
            "version": "1.0.2"
        },
        "content": "/**\n* src: @definejs/alert/modules/Alert.defaults.js\n* pkg: @definejs/alert@1.0.2\n*/\ndefine('Alert.defaults', function (require, module, exports) { \n    \r\n    const Dialog = require('Dialog');\r\n    \r\n    \r\n    /**\r\n    * Alert 模块的默认配置\r\n    * @name Alert.defaults\r\n    */\r\n    module.exports = {\r\n        Dialog, //这里提供一个默认的，移动端的会传入一个移动版的 Dialog。\r\n    \r\n        volatile: false,\r\n        mask: true,\r\n        autoClose: true,\r\n        width: 450,\r\n    \r\n        'z-index': 99999,\r\n    \r\n        buttons: [\r\n            { text: '确定', cmd: 'ok', cssClass: 'OK', },\r\n        ],\r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/alert/Alert.defaults.js"
    },
    "Alert/Dialog": {
        "id": "Alert/Dialog",
        "name": "Dialog",
        "names": [
            "Alert",
            "Dialog"
        ],
        "file": "temp/node_modules/@definejs/alert/modules/Alert/Dialog.js",
        "ext": ".js",
        "package": {
            "alias": "alert",
            "name": "@definejs/alert",
            "version": "1.0.2"
        },
        "content": "/**\n* src: @definejs/alert/modules/Alert/Dialog.js\n* pkg: @definejs/alert@1.0.2\n*/\ndefine('Alert/Dialog', function (require, module, exports) { \n    const Height = module.require('Height');\r\n    \r\n    let dialog = null;\r\n    let visible = false;\r\n    let list = [];\r\n    let activeElement = null;   //上次获得焦点的元素。\r\n    let showFrom = 13;          //记录一下是否由于按下回车键导致的显示。\r\n    let defaults = null;        //使用的是父模拟的配置，由父模块传进来。\r\n    \r\n    //创建对话框。\r\n    function create() {\r\n        let config = Object.assign({}, defaults);\r\n        let Dialog = config.Dialog;\r\n    \r\n        let dialog = new Dialog({\r\n            'cssClass': 'definejs-Alert',\r\n            'volatile': config.volatile,\r\n            'mask': config.mask,\r\n            'autoClose': config.autoClose,\r\n            'width': config.width,\r\n            'z-index': config['z-index'],\r\n            'buttons': config.buttons,\r\n        });\r\n    \r\n    \r\n    \r\n        dialog.on('button', {\r\n            ok() {\r\n                let fn = dialog.data('fn');\r\n    \r\n                fn && fn();\r\n            },\r\n        });\r\n    \r\n    \r\n        dialog.on({\r\n            show() {\r\n                visible = true;\r\n    \r\n                showFrom = showFrom == 13 ? 'enter' : '';\r\n                activeElement = document.activeElement;\r\n                activeElement.blur();\r\n            },\r\n    \r\n            hide() {\r\n                visible = false;\r\n    \r\n                let item = list.shift();\r\n    \r\n                if (item) {\r\n                    render(item.text, item.fn);\r\n                }\r\n    \r\n                activeElement = null;\r\n                showFrom = '';\r\n            },\r\n        });\r\n    \r\n        //响应回车键。\r\n    \r\n        document.addEventListener('keydown', (event) => { \r\n            showFrom = event.keyCode;\r\n        });\r\n    \r\n        document.addEventListener('keyup', (event) => { \r\n            let invalid =\r\n                event.keyCode != 13 ||  //不是回车键。\r\n                !visible ||             //已是隐藏，避免再次触发。\r\n                showFrom == 'enter';    //由于之前按下回车键导致的显示。\r\n    \r\n            if (invalid) {\r\n                return;\r\n            }\r\n    \r\n            dialog.hide();\r\n    \r\n            let fn = dialog.data('fn');\r\n            fn && fn();\r\n        });\r\n    \r\n        return dialog;\r\n    }\r\n    \r\n    \r\n    function render(text, fn) {\r\n        let height = Height.get(text);\r\n    \r\n        dialog = dialog || create();\r\n    \r\n        dialog.data('fn', fn);\r\n    \r\n        dialog.set({\r\n            'content': text,\r\n            'height': height,\r\n        });\r\n    \r\n        dialog.show();\r\n    \r\n    }\r\n    \r\n    \r\n    module.exports = {\r\n        /**\r\n        * 由父模块把默认配置传进来以供本模块使用。\r\n        * @param {Object} defaultsData 父模块的默认配置。\r\n        */\r\n        init(defaultsData) {\r\n            defaults = defaultsData;\r\n        },\r\n    \r\n        /**\r\n        * 把要显示的文本和要执行的回调函数加到队列里，并在特定时机显示出来。\r\n        */\r\n        add(text, fn) {\r\n            //首次显示，或之前显示的已经给隐藏了，立即显示出来。\r\n            if (!visible) {\r\n                render(text, fn);\r\n                return;\r\n            }\r\n    \r\n            //已经是显示的，加到队列里进行排队。\r\n            list.push({ text, fn, });\r\n        },\r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/alert/Alert/Dialog.js"
    },
    "Alert/Dialog/Height": {
        "id": "Alert/Dialog/Height",
        "name": "Height",
        "names": [
            "Alert",
            "Dialog",
            "Height"
        ],
        "file": "temp/node_modules/@definejs/alert/modules/Alert/Dialog/Height.js",
        "ext": ".js",
        "package": {
            "alias": "alert",
            "name": "@definejs/alert",
            "version": "1.0.2"
        },
        "content": "/**\n* src: @definejs/alert/modules/Alert/Dialog/Height.js\n* pkg: @definejs/alert@1.0.2\n*/\ndefine('Alert/Dialog/Height', function (require, module, exports) { \n    const $String = require('String');\r\n    \r\n    //根据文本来计算高度，大概值，并不要求很准确。\r\n    function getHeightByLength(text) {\r\n        text = String(text);\r\n    \r\n        let len = $String.getByteLength(text);\r\n        let h = Math.max(len, 125);\r\n        let max = document.documentElement.clientHeight;\r\n    \r\n        if (h >= max * 0.8) {\r\n            h = '80%';\r\n        }\r\n    \r\n    \r\n        return h;\r\n    }\r\n    \r\n    //根据文本来计算高度，大概值，并不要求很准确。\r\n    function getHeightByLines(text) {\r\n        text = String(text);\r\n    \r\n        let lines = text.split('\\n');\r\n        let h = lines.length * 25 + 60;\r\n        let max = document.documentElement.clientHeight;\r\n    \r\n        if (h >= max * 0.8) {\r\n            h = '80%';\r\n        }\r\n    \r\n    \r\n        return h;\r\n    }\r\n    \r\n    \r\n    module.exports = {\r\n        /**\r\n        * 根据文本获取对话框的高度。\r\n        */\r\n        get(text) {\r\n            let h0 = getHeightByLength(text);\r\n            let h1 = getHeightByLines(text);\r\n    \r\n            let h = Math.max(h0, h1);\r\n    \r\n    \r\n            //保证取偶数。\r\n            //因为奇数的高度，如 `height: 125px;`，\r\n            //会导致 footer 的 `border-top` 变粗，暂未找到原因。\r\n            if (typeof h == 'number') {\r\n                h = h % 2 == 1 ? h + 1 : h;\r\n            }\r\n    \r\n            return h;\r\n    \r\n        },\r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/alert/Alert/Dialog/Height.js"
    },
    "Alert/Sample": {
        "id": "Alert/Sample",
        "name": "Sample",
        "names": [
            "Alert",
            "Sample"
        ],
        "file": "temp/node_modules/@definejs/alert/modules/Alert/Sample.js",
        "ext": ".js",
        "package": {
            "alias": "alert",
            "name": "@definejs/alert",
            "version": "1.0.2"
        },
        "content": "/**\n* src: @definejs/alert/modules/Alert/Sample.js\n* pkg: @definejs/alert@1.0.2\n*/\ndefine('Alert/Sample', function (require, module, exports) { \n    //这里不要在 <pre> 中换行，它是一个保持原格式的标签。\r\n    module.exports = `<pre class=\"JSON\">{text}</pre>`;\n});",
        "dest": "./output/definejs/src/@definejs/alert/Alert/Sample.js"
    },
    "App": {
        "id": "App",
        "name": "App",
        "names": [
            "App"
        ],
        "file": "temp/node_modules/@definejs/app/modules/App.js",
        "ext": ".js",
        "package": {
            "alias": "app",
            "name": "@definejs/app",
            "version": "1.0.1"
        },
        "content": "/**\n* src: @definejs/app/modules/App.js\n* pkg: @definejs/app@1.0.1\n*/\ndefine('App', function (require, module, exports) { \n    \r\n    /**\r\n    * App 启动类。 \r\n    * @name App\r\n    */\r\n    \r\n    const SessionStorage = require('SessionStorage');\r\n    const LocalStorage = require('LocalStorage');\r\n    const AppModule = require('AppModule');              //对外给页面提供的，即业务层的模块管理器。\r\n    \r\n    //子模块。\r\n    const Navigator = module.require('Navigator');\r\n    const Router = module.require('Router');\r\n    \r\n    \r\n    \r\n    module.exports = exports = {\r\n        /**\r\n        * 默认配置。\r\n        */\r\n        defaults: require('App.defaults'),\r\n    \r\n        /**\r\n        * 初始化执行环境，并启动应用程序。\r\n        * @param {function} factory 工厂函数，即启动函数。\r\n        */\r\n        launch(factory) {\r\n            const defaults = exports.defaults;\r\n            const { name, root, seperator, navigator, view, } = defaults;\r\n    \r\n            //app 应用的名称。\r\n            if (!name) {\r\n                throw new Error('必须首先给应用分配一个唯一的名称，用于在存储中与其它应用区分开。');\r\n            }\r\n    \r\n            //app 顶级模块的名称，一般为空字符串。\r\n            if (typeof root != 'string') {\r\n                throw new Error('应用的顶级模块名称必须为一个 string。');\r\n            }\r\n    \r\n            //父子模块的分隔符，一般为 `/`。\r\n            if (root.includes(seperator)) {\r\n                throw new Error('应用的顶级模块名称不能含有父子模块的分隔符: ' + seperator);\r\n            }\r\n    \r\n            //让 app 的名称同时用于以下模块。\r\n            SessionStorage.defaults.name = name;\r\n            LocalStorage.defaults.name = name;\r\n    \r\n            //扩展配置。\r\n            Object.assign(AppModule.defaults, {\r\n                seperator,\r\n            });\r\n    \r\n            //先定义一个顶级的模块。\r\n            AppModule.define(root, function ($require, $module, $exports) {\r\n                if (navigator) {\r\n                    //此时 $exports 即为 factory 工厂函数中的第三个参数 nav。\r\n                    $exports = Navigator.create({\r\n                        'ViewSlider': defaults.ViewSlider,\r\n                        'id': navigator,\r\n                        'module': $module,\r\n    \r\n                        'container': view.container,\r\n                        'preload': view.preload,\r\n                        'slide': view.slide,\r\n                        'animate': view.animate,\r\n                    });\r\n                }\r\n    \r\n    \r\n                Router.bind($require, $module, $exports);\r\n    \r\n                factory && factory($require, $module, $exports);\r\n            });\r\n    \r\n            //定义完后马上加载即可启动。\r\n            AppModule.require(root);\r\n    \r\n        },\r\n    \r\n        /**\r\n        * 设置视图的顶级事件路由。\r\n        */\r\n        route: Router.set,\r\n    \r\n        \r\n    \r\n    };\r\n    \r\n    \r\n    \r\n    \r\n    \n});",
        "dest": "./output/definejs/src/@definejs/app/App.js"
    },
    "App.defaults": {
        "id": "App.defaults",
        "name": "App.defaults",
        "names": [
            "App.defaults"
        ],
        "file": "temp/node_modules/@definejs/app/modules/App.defaults.js",
        "ext": ".js",
        "package": {
            "alias": "app",
            "name": "@definejs/app",
            "version": "1.0.1"
        },
        "content": "/**\n* src: @definejs/app/modules/App.defaults.js\n* pkg: @definejs/app@1.0.1\n*/\ndefine('App.defaults', function (require, module, exports) { \n    /**\r\n    * App 模块的默认配置。\r\n    * @name App.defaults\r\n    */\r\n    module.exports = {\r\n        //针对移动端的。\r\n        ViewSlider: null,   \r\n        /**\r\n        * 应用的根节点模块，一般建议保留为空字符串。\r\n        */\r\n        root: '',\r\n        /**\r\n        * 应用的唯一名称。\r\n        * 用于在存储中区分其它应用。\r\n        */\r\n        name: '',\r\n        seperator: '/',\r\n        navigator: 'app-default-navigator',\r\n        /**\r\n        * 针对视图的配置。\r\n        */\r\n        view: { },\r\n    };\r\n    \r\n    \n});",
        "dest": "./output/definejs/src/@definejs/app/App.defaults.js"
    },
    "App/Navigator": {
        "id": "App/Navigator",
        "name": "Navigator",
        "names": [
            "App",
            "Navigator"
        ],
        "file": "temp/node_modules/@definejs/app/modules/App/Navigator.js",
        "ext": ".js",
        "package": {
            "alias": "app",
            "name": "@definejs/app",
            "version": "1.0.1"
        },
        "content": "/**\n* src: @definejs/app/modules/App/Navigator.js\n* pkg: @definejs/app@1.0.1\n*/\ndefine('App/Navigator', function (require, module, exports) { \n    const Navigator = require('Navigator');\r\n    const Views = module.require('Views');\r\n    \r\n    module.exports = {\r\n        /**\r\n        * 创建一个带视图滑动效果和滑动返回手势支持的导航器。\r\n        *   options = {\r\n        *       ViewSlider: null,   //针对移动端的视图滑动器。\r\n        *       id: '',             //导航器的唯一名称。 因为一个应用里可以存在多个导航器，为区分存储中的数据，须提供一个名称。\r\n        *       module: Module,     //业务层顶级的 module 对象。 即 KISP.launch() 方法中回调函数的第二个参数 `module`，用于加载视图。\r\n        * \r\n        *       container: 'body',  //视图所要附加到的容器。\r\n        *       preload: true,      //是否按需提前加载视图的分包资源。\r\n        *       slide: true,        //是否启用滑动返回手势支持。\r\n        *       animate: true,      //是否启用视图间的前进/后退的过渡动画效果。\r\n        *   };\r\n        */\r\n        create(options) {\r\n            let ViewSlider = options.ViewSlider;\r\n            let animateEnabled = options.animate;\r\n            let slideEnabled = options.slide;\r\n    \r\n            if (animateEnabled && !ViewSlider) {\r\n                throw new Error('指定了参数 animate 为 true，必须提供 ViewSlider 以启用视图切换的动画效果（仅针对移动端）。');\r\n            }\r\n    \r\n            if (slideEnabled && !ViewSlider) {\r\n                throw new Error('指定了参数 slide 为 true，必须提供 ViewSlider 以启用滑动返回手势支持（仅针对移动端）。');\r\n            }\r\n    \r\n    \r\n            let $module = options.module;\r\n            let nav = new Navigator(options.id);\r\n    \r\n    \r\n            //针对滑动返回的。\r\n            //让浏览器的地址栏跟随着后退，但不触发 KISP 内部相应的事件。\r\n            let back = () => { \r\n                nav.back(false);\r\n            };\r\n    \r\n            /**\r\n            * 跳到指定视图时触发。\r\n            * 包括主动跳转、前进、后退、刷新。\r\n            * 实现根据目标视图的状态信息进行显示或渲染。\r\n            */\r\n            nav.on('view', function (target, args, info) {\r\n                //target 可能尚未加载回来。\r\n                Views.load(target, options, function (target) {\r\n                    if (info.cache && target.rendered()) {\r\n                        target.show();\r\n                    }\r\n                    else {\r\n                        target.render(...args);\r\n                    }\r\n                });\r\n            });\r\n    \r\n    \r\n            if (options.preload) {\r\n                /**\r\n                * 通过输入地址栏的地址，或刷新浏览器时触发。\r\n                * 根据缓存到的视图信息，按时间戳进行排序，重建滑动返回顺序的手势支持。\r\n                */\r\n                nav.on('immediate', function (hash, hash$info) {\r\n                    //视图信息列表。\r\n                    let infos = Object.keys(hash$info).map(function (hash) {\r\n                        return hash$info[hash];\r\n                    });\r\n    \r\n                    //按时间戳降序排序。\r\n                    infos = infos.sort(function (a, b) {\r\n                        return a.timestamp > b.timestamp ? -1 : 1;\r\n                    });\r\n    \r\n                    Views.load(infos, options, function () {\r\n                        if (!slideEnabled) {\r\n                            return;\r\n                        }\r\n    \r\n                        infos.slice(0, -1).forEach(function (current, index) {\r\n                            let target = infos[index + 1];\r\n                            let args = target.args;\r\n    \r\n                            current = $module.require(current.view);\r\n                            target = $module.require(target.view);\r\n    \r\n                            ViewSlider.slide(current, target, {\r\n                                'args': args,   //目标视图的渲染参数。\r\n                                'back': back,   //\r\n                            });\r\n                        });\r\n                    });\r\n    \r\n    \r\n                });\r\n            }\r\n    \r\n    \r\n            if (slideEnabled) {\r\n                /**\r\n                * 从当前视图主动跳转到目标视图时触发。\r\n                * 绑定目标视图到当前视图的手势滑动返回支持。\r\n                */\r\n                nav.on('to', function (current, target, info) {\r\n                    current = $module.require(current);\r\n    \r\n                    //target 可能尚未加载回来。\r\n                    Views.load(target, options, function (target) {\r\n    \r\n                        //这里 current 与 target 反过来。\r\n                        ViewSlider.slide(target, current, {\r\n                            'back': back,\r\n                        });\r\n                    });\r\n    \r\n                });\r\n            }\r\n    \r\n    \r\n            /**\r\n            * 通过浏览器的前进时触发。\r\n            * 实现从当前视图到目标视图的滑动过渡效果。\r\n            */\r\n            nav.on('forward', function (current, target) {\r\n                current = $module.require(current);\r\n    \r\n                //target 可能尚未加载回来。\r\n                Views.load(target, options, function (target) {\r\n                    if (animateEnabled) {\r\n                        ViewSlider.forward(current, target);\r\n                    }\r\n                    else {\r\n                        current.hide();\r\n                        target.show();\r\n                    }\r\n                });\r\n    \r\n            });\r\n    \r\n            /**\r\n            * 通过浏览器的后退时触发。\r\n            * 实现从目标视图到当前视图的滑动过渡效果。\r\n            */\r\n            nav.on('back', function (current, target) {\r\n                current = $module.require(current);\r\n    \r\n                Views.load(target, options, function (target) {\r\n                    if (animateEnabled) {\r\n                        ViewSlider.back(current, target);\r\n                    }\r\n                    else {\r\n                        current.hide();\r\n                        target.show();\r\n                    }\r\n                });\r\n    \r\n            });\r\n    \r\n            return nav;\r\n    \r\n        },\r\n    \r\n    };\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \n});",
        "dest": "./output/definejs/src/@definejs/app/App/Navigator.js"
    },
    "App/Navigator/Views": {
        "id": "App/Navigator/Views",
        "name": "Views",
        "names": [
            "App",
            "Navigator",
            "Views"
        ],
        "file": "temp/node_modules/@definejs/app/modules/App/Navigator/Views.js",
        "ext": ".js",
        "package": {
            "alias": "app",
            "name": "@definejs/app",
            "version": "1.0.1"
        },
        "content": "/**\n* src: @definejs/app/modules/App/Navigator/Views.js\n* pkg: @definejs/app@1.0.1\n*/\ndefine('App/Navigator/Views', function (require, module, exports) { \n    const $ = require('jquery');\r\n    const Tasker = require('Tasker');\r\n    const Package = require('Package');\r\n    \r\n    const name$appended = {}; //记录视图对应的 html 内容是否已附加到容器中。\r\n    \r\n    \r\n    function normalize(views) {\r\n        let list = Array.isArray(views) ? views : [views];\r\n        let all = [];\r\n    \r\n        list.forEach((item, index) => { \r\n            if (!item) {\r\n                return;\r\n            }\r\n    \r\n            if (typeof item == 'string') {\r\n                item = {\r\n                    'view': item,\r\n                    'args': [],\r\n                };\r\n            }\r\n    \r\n            all.push(item);\r\n    \r\n        });\r\n    \r\n        return all;\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    module.exports = {\r\n        /**\r\n        * 加载多个视图。\r\n        *   options = {\r\n        *       container: 'body',  //视图所要附加到的容器。\r\n        *       module: Module,     //业务层顶级的 module 对象。 即 KISP.launch() 方法中回调函数的第二个参数 `module`，用于加载视图。\r\n        *   };\r\n        */\r\n        load(views, options, done) {\r\n            let list = normalize(views);\r\n            let $module = options.module;\r\n            let container = options.container;\r\n    \r\n            let tasker = new Tasker(list);\r\n    \r\n    \r\n            //先异步加载完所有的视图模块。\r\n            //可能是异步，也可能是直接加载。\r\n            tasker.on('each', function (item, index, done) {\r\n                let name = item.view;\r\n                let M = $module.require(name);\r\n    \r\n                //已加载过了。\r\n                if (M) {\r\n                    done(M);\r\n                    return;\r\n                }\r\n    \r\n                Package.load(name, function (pack) {\r\n                    if (!pack) {\r\n                        throw new Error(`总包中不存在名为 ${name} 的配置节点。`);\r\n                    }\r\n    \r\n                    let item = pack['html'] || {};\r\n                    let html = item.content;\r\n                    let appended = name$appended[name];\r\n    \r\n                    //先处理 html 内容。\r\n                    if (!appended && container && html) {\r\n                        name$appended[name] = true;\r\n                        $(container).append(html);\r\n                    }\r\n    \r\n    \r\n                    //再加载 js 模块。\r\n                    //因为 js 模块可能会用到对应的 DOM 节点。\r\n                    let M = $module.require(name);\r\n    \r\n                    if (!M) {\r\n                        throw new Error(`不存在名为 ${name} 的视图模块`);\r\n                    }\r\n    \r\n                    done(M);\r\n                });\r\n    \r\n            });\r\n    \r\n    \r\n            tasker.on('all', function (views) {\r\n                done && done(...views);\r\n            });\r\n    \r\n    \r\n            tasker.parallel();\r\n        },\r\n    \r\n    };\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \n});",
        "dest": "./output/definejs/src/@definejs/app/App/Navigator/Views.js"
    },
    "App/Router": {
        "id": "App/Router",
        "name": "Router",
        "names": [
            "App",
            "Router"
        ],
        "file": "temp/node_modules/@definejs/app/modules/App/Router.js",
        "ext": ".js",
        "package": {
            "alias": "app",
            "name": "@definejs/app",
            "version": "1.0.1"
        },
        "content": "/**\n* src: @definejs/app/modules/App/Router.js\n* pkg: @definejs/app@1.0.1\n*/\ndefine('App/Router', function (require, module, exports) { \n    \r\n    const $Object = require('Object');\r\n    const name$factory = {};\r\n    \r\n    \r\n    //示例解释：\r\n    /*\r\n    definejs.route('User', function (require, module, exports, User) {\r\n        //以下两种写法是等价的。\r\n        //如果是写法一，则 definejs 内部也会转换成写法二。\r\n        //写法一简单明了，但写法二功能更自由、丰富。\r\n        //一般情况下用写法一，必要时可用写法二。\r\n    \r\n        //写法一。\r\n        return {\r\n            'login': function () { },\r\n            'logout': function () { },\r\n        };\r\n    \r\n        //写法二。\r\n        User.on({\r\n            'login': function () { },\r\n            'logout': function () { },\r\n        });\r\n    });\r\n    */\r\n    \r\n    /**\r\n    * 路由。\r\n    */\r\n    module.exports = {\r\n    \r\n        /**\r\n        * 设置路由。\r\n        * @param {string} name 路由的名称。\r\n        * @param {function} factory 路由处理函数。\r\n        *   也可以是一个导出对象。\r\n        */\r\n        set(name, factory) {\r\n            if (name$factory[name]) {\r\n                throw new Error(`重复定义的路由器: ${name}`);\r\n            }\r\n    \r\n            name$factory[name] = factory;\r\n        },\r\n    \r\n        /**\r\n        * 绑定全部路由。\r\n        */\r\n        bind($require, $module, $exports) {\r\n    \r\n            let all = $Object.map(name$factory, function (name, factory) {\r\n    \r\n                return function (M) {\r\n                    let event$fn = factory($require, $module, $exports, M);\r\n    \r\n                    if ($Object.isPlain(event$fn)) {\r\n                        M.on(event$fn);\r\n                    }\r\n                };\r\n            });\r\n    \r\n            $module.bind(all);\r\n    \r\n            return all;\r\n        },\r\n    };\r\n    \r\n    \r\n    \r\n    \r\n    \n});",
        "dest": "./output/definejs/src/@definejs/app/App/Router.js"
    },
    "AppModule": {
        "id": "AppModule",
        "name": "AppModule",
        "names": [
            "AppModule"
        ],
        "file": "temp/node_modules/@definejs/app-module/modules/AppModule.js",
        "ext": ".js",
        "package": {
            "alias": "app-module",
            "name": "@definejs/app-module",
            "version": "1.0.0"
        },
        "content": "/**\n* src: @definejs/app-module/modules/AppModule.js\n* pkg: @definejs/app-module@1.0.0\n*/\ndefine('AppModule', function (require, module, exports) { \n    const ModuleManager = require('ModuleManager');\r\n    const $Object = require('Object');\r\n    const $String = require('String');\r\n    \r\n    let id$factory = {};//针对模板模块。\r\n    let $mm = null;\r\n    \r\n    function mm() { \r\n        if (!$mm) {\r\n            $mm = new ModuleManager(exports.defaults);\r\n        }\r\n    \r\n        return $mm;\r\n    }\r\n    \r\n    \r\n    module.exports = exports = {\r\n        /**\r\n        * 默认配置。\r\n        */\r\n        defaults: require('AppModule.defaults'),\r\n    \r\n        /**\r\n        * 使用的模块管理器(函数)。\r\n        * 暴露出去，可以方便外界对 mm 进行各种扩展，如重写 require 方法等。\r\n        */\r\n        mm,\r\n        /**\r\n        * 定义一个指定名称的静态模块。\r\n        * 或者定义一个动态模块，模块的 id 是一个模板字符串。\r\n        * 该方法对外给业务层使用的。\r\n        * @function\r\n        * @param {string} id 模块的名称。 可以是一个模板。\r\n        * @param {Object|function} factory 模块的导出函数或对象。\r\n        */\r\n        define(id, factory) {\r\n            // id 为一个模板字符串，如 `{prefix}/Address`。\r\n            let isTPL = id.includes('{') && id.includes('}');\r\n    \r\n            if (isTPL) {\r\n                id$factory[id] = factory;   //定义一个模板模块，则先缓存起来。\r\n            }\r\n            else {\r\n                mm().define(id, factory);\r\n            }\r\n        },\r\n    \r\n        /**\r\n        * 加载指定的模块。\r\n        * （在 App 模块中用到，用于启动程序）。\r\n        *   \r\n        * @function\r\n        * @param {string} id 模块的名称。\r\n        * @return 返回指定的模块。 \r\n        */\r\n        require(...args) { \r\n            return mm().require(...args);\r\n        },\r\n    \r\n        /**\r\n        * 绑定事件。\r\n        */\r\n        on(...args) { \r\n            return mm().on(...args);\r\n        },\r\n    \r\n        /**\r\n        * 判断指定的模块是否已定义。\r\n        */\r\n        has(...args) {\r\n            return mm().has(...args);\r\n        },\r\n    \r\n        /**\r\n        * 设置业务层的指定模块的自定义数据。\r\n        * 已重载 data(id, data); //设置单个模块的自定义数据。\r\n        * 已重载 data(id$data);  //设置多个模块，每个模块有自己的自定义数据。\r\n        * 已重载 data(id$data);  //设置多个模块，它们共用同一个自定义数据。\r\n        */\r\n        data(id, data) { \r\n            //重载 data(ids, data);\r\n            //多个模块共用一个自定义数据。\r\n            if (Array.isArray(id)) {\r\n                let ids = id;\r\n                ids.forEach((id) => {\r\n                    mm().data(id, data);\r\n                });\r\n                return data;\r\n            }\r\n    \r\n            //重载 data(id$data);   \r\n            //每个模块有自己的自定义数据。\r\n            if ($Object.isPlain(id)) {\r\n                let id$data = id;\r\n                $Object.each(id$data, function (id, data) { \r\n                    mm().data(id, data);\r\n                });\r\n                return id$data;\r\n            }\r\n    \r\n            //重载 data(id, data);\r\n            //设置单个模块的自定义数据。\r\n            return mm().data(id, data);\r\n        },\r\n    \r\n        /**\r\n        * 使用模板模块动态定义一个模块。\r\n        * 即填充一个模板模块，以生成（定义）一个真正的模块。\r\n        *   sid: '',    //模板模块的 id，如 `{prefix}/Address`\r\n        *   data: {},   //要填充的数据，如 { prefix: 'Demo/User', }\r\n        */\r\n        fill(sid, data) {\r\n            //需要扫描所有模板，同时填充它的子模块。\r\n            $Object.each(id$factory, function (id, factory) {\r\n    \r\n                //所有以 sid 为开头的模板模块都要填充，\r\n                //如 sid 为 `{prefix}/Address`，id 为 `{prefix}/Address/API`\r\n                if (!id.startsWith(sid)) {\r\n                    return;\r\n                }\r\n    \r\n                //填充成完整的模块 id。\r\n                id = $String.format(id, data);\r\n    \r\n                console.log(`动态定义模块: ${id}`);\r\n    \r\n                mm().define(id, factory);\r\n    \r\n            });\r\n    \r\n        },\r\n    };\r\n    \r\n    //增加一个快捷方法，以便可以判断某个模块是否已定义。\r\n    exports.define.has = exports.has;\n});",
        "dest": "./output/definejs/src/@definejs/app-module/AppModule.js"
    },
    "AppModule.defaults": {
        "id": "AppModule.defaults",
        "name": "AppModule.defaults",
        "names": [
            "AppModule.defaults"
        ],
        "file": "temp/node_modules/@definejs/app-module/modules/AppModule.defaults.js",
        "ext": ".js",
        "package": {
            "alias": "app-module",
            "name": "@definejs/app-module",
            "version": "1.0.0"
        },
        "content": "/**\n* src: @definejs/app-module/modules/AppModule.defaults.js\n* pkg: @definejs/app-module@1.0.0\n*/\ndefine('AppModule.defaults', function (require, module, exports) { \n    \r\n    const Emitter = require('Emitter');\r\n    \r\n    \r\n    module.exports = {\r\n        Emitter,   //事件驱动器。\r\n    \r\n        seperator: '/',     //私有模块的分隔符。\r\n        repeated: false,    //不允许重复定义同名的模块。\r\n        cross: false,       //不允许跨级加载模块。\r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/app-module/AppModule.defaults.js"
    },
    "Array": {
        "id": "Array",
        "name": "Array",
        "names": [
            "Array"
        ],
        "file": "temp/node_modules/@definejs/array/modules/Array.js",
        "ext": ".js",
        "package": {
            "alias": "array",
            "name": "@definejs/array",
            "version": "1.1.0"
        },
        "content": "/**\n* src: @definejs/array/modules/Array.js\n* pkg: @definejs/array@1.1.0\n*/\ndefine('Array', function (require, module, exports) { \n    \r\n    /**\r\n    * 数组工具。\r\n    */\r\n    module.exports = exports = {\r\n        /**\r\n        * 把一个数组中的元素转换到另一个数组中，返回一个新的数组。\r\n        * 已重载 map(array, fn);\r\n        * 已重载 map(deep, array, fn);\r\n        * @param {boolean} [deep=false] 指定是否进行深层次迭代。\r\n        *   如果要进行深层次迭代，即对数组元素为数组继续迭代的，请指定 true；否则为浅迭代。\r\n        * @param {Array} array 要进行转换的数组。\r\n        * @param {function} fn 转换函数。\r\n        *   该转换函数会为每个数组元素调用，它会接收到两个参数：当前迭代的数组元素和该元素的索引。\r\n        *   转换函数可以返回转换后的值，有两个特殊值影响到迭代行为：\r\n        *   null：忽略当前数组元素，即该元素在新的数组中不存在对应的项（相当于 continue）；\r\n        *   undefined：忽略当前数组元素到最后一个元素（相当于break）；\r\n        * @return {Array} 返回一个转换后的新数组。\r\n        */\r\n        map(deep, array, fn) {\r\n            //重载 map(array, fn); 此时 deep 为 false。\r\n            if (typeof deep != 'boolean') {\r\n                fn = array;\r\n                array = deep;\r\n                deep = false;\r\n            }\r\n    \r\n            let map = exports.map; //引用自身，用于递归\r\n            let list = [];\r\n    \r\n            for (let i = 0, len = array.length; i < len; i++) {\r\n                let item = array[i];\r\n                let value;\r\n    \r\n                if (deep === true && Array.isArray(item)) {\r\n                    value = map(true, item, fn); // 此时的 value 是一个 []。\r\n                }\r\n                else {\r\n                    value = fn(item, i);\r\n    \r\n                    //忽略掉 null 值的项。\r\n                    if (value === null) {\r\n                        continue;\r\n                    }\r\n    \r\n                    //注意，当回调函数 fn 不返回值时，迭代会给停止掉。\r\n                    if (value === undefined) { \r\n                        break;\r\n                    }\r\n                }\r\n    \r\n                list.push(value);\r\n            }\r\n    \r\n            return list;\r\n        },\r\n    \r\n        /**\r\n        * 用滑动窗口的方式创建分组，即转成二维数组。\r\n        * @param {Array} array 要进行切割的原数组。\r\n        * @param {Number} windowSize 窗口大小。\r\n        * @param {Number} [stepSize=1] 步长。 默认为 1。\r\n        * @returns {Array} 返回一个二维数组。\r\n        * @example\r\n        *   $Array.slide(['a', 'b', 'c', 'd', 'e'], 3, 1); \r\n        *   返回结果（窗口大小为 3，移动步长为 1）：\r\n        *   [\r\n        *       ['a', 'b', 'c'],\r\n        *       ['b', 'c', 'd'],\r\n        *       ['c', 'd', 'e'],\r\n        *   ]\r\n        */\r\n        slide(array, windowSize, stepSize = 1) {\r\n            let len = array.length;\r\n    \r\n            //只够创建一组\r\n            if (len <= windowSize) {\r\n                return [array];\r\n            }\r\n    \r\n    \r\n            let groups = [];\r\n    \r\n            for (let i = 0; i < len; i = i + stepSize) {\r\n                let end = i + windowSize;\r\n                let a = array.slice(i, end);\r\n    \r\n                groups.push(a);\r\n    \r\n                if (end >= len) {\r\n                    break; //已达到最后一组\r\n                }\r\n            }\r\n    \r\n            return groups;\r\n        },\r\n    \r\n        /**\r\n        * 创建分组，即转成二维数组。\r\n        * @param {Array} array 要进行切割的原数组。\r\n        * @param {Number} size 分组大小。\r\n        * @param {boolean} isPadRight 是否向右对齐数据。\r\n        * @returns {Array} 返回一个二维数组。\r\n        * @example\r\n        *   $Array.group(['a', 'b', 'c', 'd', 'e'], 3);\r\n        *   返回结果（窗口大小为 3，移动步长为 3）：\r\n        *   [\r\n        *       ['a', 'b', 'c'],\r\n        *       ['d', 'e'],\r\n        *   ]\r\n        * \r\n        *   $Array.group(['a', 'b', 'c', 'd', 'e'], 3, true); \r\n        *   则返回：\r\n        *   [\r\n        *       ['a', 'b'],\r\n        *       ['c', 'd', 'e']\r\n        *   ]\r\n        *   \r\n        */\r\n        group(array, size, isPadRight) {\r\n            let groups = exports.slide(array, size, size);\r\n    \r\n            if (isPadRight === true) {\r\n                groups[groups.length - 1] = array.slice(-size); //右对齐最后一组\r\n            }\r\n    \r\n            return groups;\r\n        },\r\n    \r\n        /**\r\n        * 产生一个区间为 [start, end) 的半开区间的数组。\r\n        * 已重载 pad(start, end, step, fn);\r\n        * 已重载 pad(start, end, fn);\r\n        * 已重载 pad(start, end);\r\n        * @param {number} start 半开区间的开始值。\r\n        * @param {number} end 半开区间的结束值。\r\n        * @param {number} [step=1] 填充的步长，默认值为 1。可以指定为负数。\r\n        * @param {function} [fn] 转换函数。 会收到当前项和索引值作为参数。\r\n        * @return {Array} 返回一个递增（减）的数组。\r\n        *   当 start 与 end 相等时，返回一个空数组。\r\n        * @example\r\n            $Array.pad(2, 5); //产生一个从 2 到 5 的数组，步长为1，结果为[2, 3, 4]\r\n            $Array.pad(1, 9, 2); //产生一个从1到9的数组，步长为2，结果为[1, 3, 5, 7]\r\n            $Array.pad(5, 2, -1); //产生一个从5到2的数组，步长为-1，结果为[5, 4, 3]\r\n            //下面的例子得到 [10, 20]\r\n            $Array.pad(1, 3, function (item, index) {\r\n                return item * 10;\r\n            });\r\n        */\r\n        pad(start, end, step, fn) {\r\n            if (start == end) {\r\n                return [];\r\n            }\r\n    \r\n            // 重载 pad(start, end, fn)\r\n            if (typeof step == 'function') {\r\n                fn = step;\r\n                step = 1;\r\n            }\r\n            else {\r\n                step = Math.abs(step || 1);\r\n            }\r\n    \r\n    \r\n            let a = [];\r\n            let index = 0;\r\n    \r\n            if (start < end) { //升序\r\n                for (let i = start; i < end; i += step) {\r\n                    let item = fn ? fn(i, index) : i;\r\n                    a.push(item);\r\n                    index++;\r\n                }\r\n            }\r\n            else { //降序\r\n                for (let i = start; i > end; i -= step) {\r\n                    let item = fn ? fn(i, index) : i;\r\n                    a.push(item);\r\n                    index++;\r\n                }\r\n            }\r\n    \r\n            return a;\r\n    \r\n        },\r\n    \r\n        /**\r\n        * 添加元素到多级分组列表中。\r\n        * 已重载 add(key$list, keys, item);\r\n        * 已重载 add(key$list, key0, key1, ..., keyN, item);\r\n        * @param {Object}} key$list 多级结构的容器普通对象。\r\n        * @param {Array} keys 节点对应的键数组。\r\n        * @param {*} item 要添加的元素。\r\n        * @example\r\n        *   let city$area$town = {};\r\n        *   add(city$area$town, '深圳市', '宝安区', '沙井', 100);\r\n        *   add(city$area$town, '深圳市', '宝安区', '沙井', 200);\r\n        *   add(city$area$town, '深圳市', '宝安区', '西乡', 300);\r\n        *   add(city$area$town, '深圳市', '宝安区', '西乡', 400);\r\n        *   add(city$area$town, '深圳市', '南山区', '后海', 500);\r\n        *   add(city$area$town, '深圳市', '南山区', '后海', 600);\r\n        *   add(city$area$town, '深圳市', '南山区', '前海', 700);\r\n        * 则 \r\n        *   city$area$town = {\r\n        *       '深圳市': {\r\n        *           '宝安区': {\r\n        *               '沙井': [100, 200],\r\n        *               '西乡': [300, 400],\r\n        *           },\r\n        *           '南山区': {\r\n        *               '后海': [500, 600],\r\n        *               '前海': [700],\r\n        *           },\r\n        *       },\r\n        *   };\r\n        */\r\n        add(key$list, keys, item) {\r\n            //重载 add(key$list, key0, key1, ..., keyN, item); 的形式。\r\n            if (!Array.isArray(keys)) {\r\n                let args = [...arguments];\r\n                keys = args.slice(1, -1);\r\n                item = args.slice(-1)[0]; //最后一项。\r\n            }\r\n    \r\n    \r\n            let maxIndex = keys.length - 1; //判断是否为最后一个。\r\n            let obj = key$list;\r\n    \r\n            keys.forEach((key, index) => {\r\n                let list = obj[key];\r\n    \r\n                if (index < maxIndex) {\r\n                    if (!list) {\r\n                        obj[key] = {};\r\n                    }\r\n    \r\n                    obj = obj[key];\r\n                    return;\r\n                }\r\n    \r\n    \r\n                //最后一项。\r\n                if (!list) {\r\n                    list = obj[key] = [];\r\n                }\r\n                else if (!Array.isArray(list)) {\r\n                    //防止添加到中间节点上。\r\n                    throw new Error(`Can not add the item to a Non-Array node.`);\r\n                }\r\n    \r\n                list.push(item);\r\n            });\r\n    \r\n        },\r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/array/Array.js"
    },
    "Confirm": {
        "id": "Confirm",
        "name": "Confirm",
        "names": [
            "Confirm"
        ],
        "file": "temp/node_modules/@definejs/confirm/modules/Confirm.js",
        "ext": ".js",
        "package": {
            "alias": "confirm",
            "name": "@definejs/confirm",
            "version": "1.0.1"
        },
        "content": "/**\n* src: @definejs/confirm/modules/Confirm.js\n* pkg: @definejs/confirm@1.0.1\n*/\ndefine('Confirm', function (require, module, exports) { \n    /**\r\n    * 简单的 confirm 对话框。\r\n    */\r\n    let dialog = null;\r\n    let visible = false;\r\n    let list = [];\r\n    let activeElement = null;   //上次获得焦点的元素。\r\n    let showFrom = 13;          //记录一下是否由于按下回车键导致的显示。\r\n    \r\n    //创建对话框\r\n    function create() {\r\n        let defaults = exports.defaults;\r\n        let Dialog = defaults.Dialog;\r\n    \r\n        let dialog = new Dialog({\r\n            'cssClass': 'definejs-Confirm',\r\n            'volatile': defaults.volatile,\r\n            'mask': defaults.mask,\r\n            'autoClose': defaults.autoClose,\r\n            'height': defaults.height,\r\n            'z-index': defaults['z-index'],\r\n            'buttons': defaults.buttons,\r\n        });\r\n    \r\n        dialog.on('button', {\r\n            ok() {\r\n                let fn = dialog.data('ok');\r\n                fn && fn();\r\n            },\r\n            cancel() {\r\n                let fn = dialog.data('cancel');\r\n                fn && fn();\r\n            },\r\n        });\r\n    \r\n    \r\n    \r\n        dialog.on({\r\n            show() {\r\n                visible = true;\r\n    \r\n                showFrom = showFrom == 13 ? 'enter' : '';\r\n    \r\n                //先暂存之前的焦点元素。\r\n                activeElement = document.activeElement;\r\n                activeElement.blur();\r\n    \r\n                //让 `确定` 按钮获得焦点。\r\n                dialog.$.find('footer button').get(0).focus();\r\n            },\r\n    \r\n            hide() {\r\n                visible = false;\r\n    \r\n                let item = list.shift();\r\n    \r\n                if (item) {\r\n                    render(item);\r\n                }\r\n    \r\n                //恢复之前的焦点元素。\r\n                activeElement && activeElement.focus();\r\n                activeElement = null;\r\n                showFrom = '';\r\n            },\r\n        });\r\n    \r\n        //响应回车键\r\n        document.addEventListener('keydown', (event) => {\r\n            showFrom = event.keyCode;\r\n        });\r\n    \r\n        document.addEventListener('keyup', (event) => {\r\n            let invalid =\r\n                event.keyCode != 13 ||  //不是回车键。\r\n                !visible ||             //已是隐藏，避免再次触发。\r\n                showFrom == 'enter';    //由于之前按下回车键导致的显示。\r\n    \r\n            if (invalid) {\r\n                return;\r\n            }\r\n    \r\n            dialog.hide();\r\n    \r\n            let fn = dialog.data('ok');\r\n            fn && fn();\r\n        });\r\n    \r\n    \r\n    \r\n        return dialog;\r\n    \r\n    }\r\n    \r\n    \r\n    /**\r\n    *   item = {\r\n    *       text: '',\r\n    *       ok: fn,\r\n    *       cancel: fn,\r\n    *       buttons: ['确定', '取消'],\r\n    *   };\r\n    */\r\n    function render(item) {\r\n        dialog = dialog || create();\r\n    \r\n        dialog.data(item);\r\n    \r\n        dialog.set({\r\n            'content': item.text,\r\n        });\r\n    \r\n        dialog.show();\r\n    \r\n        //重新设置按钮的文本。\r\n        let buttons = item.buttons || [];\r\n        let defaults = exports.defaults;\r\n    \r\n        defaults.buttons.forEach(function (item, index) {\r\n            let $btn = dialog.$.find(`button[data-index=\"${index}\"]`);\r\n            let text = buttons[index] || item.text;\r\n    \r\n            $btn.html(text);\r\n        });\r\n    \r\n    }\r\n    \r\n    \r\n    module.exports = exports = {\r\n        /**\r\n        * 默认配置。\r\n        */\r\n        defaults: require('Confirm.defaults'),\r\n    \r\n        /**\r\n        * 显示一个 confirm 对话框。 \r\n        * 支持多次调用，会将多次调用加进队列，在显示完上一次后进行下一次的显示。\r\n        * 已重载 show(opt);   //传入一个配置对象。\r\n        * 已重载 show(text, ok);       //分开传入参数。\r\n        *   opt = {\r\n        *       text: '',        //要显示的消息内容。\r\n        *       ok: fn,         //可选，点击 `确定` 按钮后要执行的回调函数。\r\n        *       cancel: fn,     //可选，点击 `取消` 按钮后要执行的回调函数。\r\n        *       buttons: [],    //按钮数组。\r\n        *   };\r\n        */\r\n        show(text, ok) {\r\n            let item = typeof text == 'object' ? text : { text, ok, };\r\n    \r\n            //首次显示，或之前显示的已经给隐藏了，立即显示出来。\r\n            if (!visible) {\r\n                render(item);\r\n                return;\r\n            }\r\n    \r\n            //已经是显示的，加到队列里进行排队。\r\n            list.push(item);\r\n        },\r\n    };\r\n    \r\n    \r\n    \n});",
        "dest": "./output/definejs/src/@definejs/confirm/Confirm.js"
    },
    "Confirm.defaults": {
        "id": "Confirm.defaults",
        "name": "Confirm.defaults",
        "names": [
            "Confirm.defaults"
        ],
        "file": "temp/node_modules/@definejs/confirm/modules/Confirm.defaults.js",
        "ext": ".js",
        "package": {
            "alias": "confirm",
            "name": "@definejs/confirm",
            "version": "1.0.1"
        },
        "content": "/**\n* src: @definejs/confirm/modules/Confirm.defaults.js\n* pkg: @definejs/confirm@1.0.1\n*/\ndefine('Confirm.defaults', function (require, module, exports) { \n    \r\n    \r\n    const Dialog = require('Dialog');\r\n    \r\n    /**\r\n    * Confirm 模块的默认配置。\r\n    * @name Confirm.defaults\r\n    */\r\n    module.exports = {\r\n        Dialog, //移动端的会传入一个移动版的 Dialog。\r\n    \r\n        /**\r\n        * 组件高度。\r\n        * 可以指定为百分比的字符串，或指定具体的数值（单位为像素），\r\n        */\r\n        mask: true,\r\n        height: 140,\r\n        autoClose: true,\r\n        volatile: false,\r\n    \r\n        'z-index': 99999,\r\n    \r\n        buttons: [\r\n            { text: '确定', cmd: 'ok', cssClass: 'OK', },\r\n            { text: '取消', cmd: 'cancel', cssClass: 'Cancel' },\r\n        ],\r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/confirm/Confirm.defaults.js"
    },
    "Date": {
        "id": "Date",
        "name": "Date",
        "names": [
            "Date"
        ],
        "file": "temp/node_modules/@definejs/date/modules/Date.js",
        "ext": ".js",
        "package": {
            "alias": "date",
            "name": "@definejs/date",
            "version": "1.0.0"
        },
        "content": "/**\n* src: @definejs/date/modules/Date.js\n* pkg: @definejs/date@1.0.0\n*/\ndefine('Date', function (require, module, exports) { \n    const $String = require('String');\r\n    \r\n    let DELTA = 0; //用于存放参考时间(如服务器时间)和本地时间的差值。\r\n    \r\n    \r\n    function getDateItem(s) {\r\n        let separator =\r\n            s.indexOf('.') > 0 ? '.' :\r\n            s.indexOf('-') > 0 ? '-' :\r\n            s.indexOf('/') > 0 ? '/' :\r\n            s.indexOf('_') > 0 ? '_' : null;\r\n    \r\n        if (!separator) {\r\n            return null;\r\n        }\r\n    \r\n        let ps = s.split(separator);\r\n    \r\n        return {\r\n            'yyyy': ps[0],\r\n            'MM': ps[1] || 0,\r\n            'dd': ps[2] || 1,\r\n        };\r\n    }\r\n    \r\n    function getTimeItem(s) {\r\n        let separator = s.indexOf(':') > 0 ? ':' : null;\r\n        \r\n        if (!separator) {\r\n            return null;\r\n        }\r\n    \r\n        let ps = s.split(separator);\r\n    \r\n        return {\r\n            'HH': ps[0] || 0,\r\n            'mm': ps[1] || 0,\r\n            'ss': ps[2] || 0,\r\n        };\r\n    }\r\n    \r\n    /**\r\n    * 日期时间工具。\r\n    */\r\n    module.exports = exports = {\r\n        /**\r\n        * 把参数 value 解析成等价的日期时间实例。\r\n        * @param {Date|String} value 要进行解析的参数，可接受的类型为：\r\n        *   1.Date 实例\r\n        *   2.String 字符串，包括调用 Date 实例的 toString 方法得到的字符串；也包括以下格式: \r\n        *       yyyy-MM-dd\r\n        *       yyyy.MM.dd\r\n        *       yyyy/MM/dd\r\n        *       yyyy_MM_dd\r\n        *       HH:mm:ss\r\n        *       yyyy-MM-dd HH:mm:ss\r\n        *       yyyy.MM.dd HH:mm:ss\r\n        *       yyyy/MM/dd HH:mm:ss\r\n        *       yyyy_MM_dd HH:mm:ss\r\n        * @return 返回一个日期时间的实例。\r\n        *   如果解析失败，则返回 null。\r\n        * @example\r\n        *   $Date.parse('2013-04-29 09:31:20');\r\n        */\r\n        parse(value) {\r\n            //已经是一个 Date 实例，则判断它是否有值。\r\n            if (value instanceof Date) {\r\n                let tv = value.getTime();\r\n                return isNaN(tv) ? null : value;\r\n            }\r\n    \r\n            let isString = false;\r\n    \r\n            switch (typeof value) {\r\n                case 'number':\r\n                    let dt = new Date(value);\r\n                    let tv = dt.getTime();\r\n                    return isNaN(tv) ? null : dt;\r\n    \r\n                case 'string':\r\n                    isString = true;\r\n                    break;\r\n    \r\n            }\r\n    \r\n            if (!isString) {\r\n                return null;\r\n            }\r\n    \r\n    \r\n            //标准方式\r\n            let date = new Date(value);\r\n            if (!isNaN(date.getTime())) {\r\n                return date;\r\n            }\r\n    \r\n            /*\r\n             自定义方式：\r\n                yyyy-MM-dd\r\n                yyyy.MM.dd\r\n                yyyy/MM/dd\r\n                yyyy_MM_dd\r\n                HH:mm:ss\r\n                yyyy-MM-dd HH:mm:ss\r\n                yyyy.MM.dd HH:mm:ss\r\n                yyyy/MM/dd HH:mm:ss\r\n                yyyy_MM_dd HH:mm:ss\r\n                    \r\n            */\r\n    \r\n            let parts = value.split(' ');\r\n            let left = parts[0];\r\n    \r\n            if (!left) {\r\n                return null;\r\n            }\r\n    \r\n            //冒号只能用在时间的部分，而不能用在日期部分\r\n            date = left.indexOf(':') > 0 ? null : left;\r\n            let time = date ? (parts[1] || null) : date;\r\n    \r\n            //既没指定日期部分，也没指定时间部分\r\n            if (!date && !time) {\r\n                return null;\r\n            }\r\n    \r\n    \r\n            if (date && time) {\r\n                let d = getDateItem(date);\r\n                let t = getTimeItem(time);\r\n                return new Date(d.yyyy, d.MM - 1, d.dd, t.HH, t.mm, t.ss);\r\n            }\r\n    \r\n            if (date) {\r\n                let d = getDateItem(date);\r\n                return new Date(d.yyyy, d.MM - 1, d.dd);\r\n            }\r\n    \r\n            if (time) {\r\n                let now = new Date();\r\n                let t = getTimeItem(time);\r\n                return new Date(now.getFullYear(), now.getMonth(), now.getDate(), t.HH, t.mm, t.ss);\r\n            }\r\n    \r\n        },\r\n    \r\n        /**\r\n        * 把日期时间格式化指定格式的字符串。\r\n        * 已重载 format(formatter)。\r\n        * @param {Date} datetime 要进行格式化的日期时间。\r\n        *   如果不指定，则默认为当前时间，即 new Date()。\r\n        * @param {string} formater 格式化的字符串。 其中保留的占位符有：\r\n            'yyyy': 4位数年份\r\n            'yy': 2位数年份\r\n            'MM': 2位数的月份(01-12)\r\n            'M': 1位数的月份(1-12)\r\n            'dddd': '星期日|一|二|三|四|五|六'\r\n            'dd': 2位数的日份(01-31)\r\n            'd': 1位数的日份(1-31)\r\n            'HH': 24小时制的2位数小时数(00-23)\r\n            'H': 24小时制的1位数小时数(0-23)\r\n            'hh': 12小时制的2位数小时数(00-12)\r\n            'h': 12小时制的1位数小时数(0-12)\r\n            'mm': 2位数的分钟数(00-59)\r\n            'm': 1位数的分钟数(0-59)\r\n            'ss': 2位数的秒钟数(00-59)\r\n            's': 1位数的秒数(0-59)\r\n            'tt': 上午：'AM'；下午: 'PM'\r\n            't': 上午：'A'；下午: 'P'\r\n            'TT': 上午： '上午'； 下午: '下午'\r\n            'T': 上午： '上'； 下午: '下'\r\n        * @return {string} 返回一个格式化的字符串。\r\n        * @example\r\n            //返回当前时间的格式字符串，类似 '2013年4月29日 9:21:59 星期一'\r\n            $Date.format(new Date(), 'yyyy年M月d日 h:m:s dddd');\r\n            $Date.format('yyyy年M月d日 h:m:s dddd');\r\n        */\r\n        format(datetime, formater) {\r\n            //重载 format(formater);\r\n            if (arguments.length == 1) {\r\n                formater = datetime;\r\n                datetime = new Date();\r\n            }\r\n            else {\r\n                datetime = exports.parse(datetime);\r\n            }\r\n    \r\n            let year = datetime.getFullYear();\r\n            let month = datetime.getMonth() + 1;\r\n            let date = datetime.getDate();\r\n            let hour = datetime.getHours();\r\n            let minute = datetime.getMinutes();\r\n            let second = datetime.getSeconds();\r\n    \r\n            let padLeft = function (value, length) {\r\n                return $String.padLeft(value, length, '0');\r\n            };\r\n    \r\n    \r\n            let isAM = hour <= 12;\r\n    \r\n            //这里不要用 {} 来映射，因为 for in 的顺序不确定\r\n            let maps = [\r\n                ['yyyy', padLeft(year, 4)],\r\n                ['yy', String(year).slice(2)],\r\n                ['MM', padLeft(month, 2)],\r\n                ['M', month],\r\n                ['dddd', '星期' + ('日一二三四五六'.charAt(datetime.getDay()))],\r\n                ['dd', padLeft(date, 2)],\r\n                ['d', date],\r\n                ['HH', padLeft(hour, 2)],\r\n                ['H', hour],\r\n                ['hh', padLeft(isAM ? hour : hour - 12, 2)],\r\n                ['h', isAM ? hour : hour - 12],\r\n                ['mm', padLeft(minute, 2)],\r\n                ['m', minute],\r\n                ['ss', padLeft(second, 2)],\r\n                ['s', second],\r\n                ['tt', isAM ? 'AM' : 'PM'],\r\n                ['t', isAM ? 'A' : 'P'],\r\n                ['TT', isAM ? '上午' : '下午'],\r\n                ['T', isAM ? '上' : '下']\r\n            ];\r\n    \r\n    \r\n            let s = formater;\r\n    \r\n            maps.forEach(function (item, index) {\r\n                s = $String.replaceAll(s, item[0], item[1]);\r\n            });\r\n    \r\n            return s;\r\n        },\r\n    \r\n    \r\n        /**\r\n        * 将指定的毫秒数加到指定的 Date 上。\r\n        * 此方法不更改参数 datetime 的值，而是返回一个新的 Date，其值是此运算的结果。\r\n        * @param {Date} datetime 要进行操作的日期时间。\r\n        * @param {Number} value 要增加/减少的毫秒数。 \r\n            可以为正数，也可以为负数。\r\n        * @param {string} [formater] 可选的，对结果进行格式化的字符串。 \r\n        * @return {Date|string} 返回一个新的日期实例或字符串值。\r\n            如果指定了参数 formater，则进行格式化，返回格式化后的字符串值；\r\n            否则返回 Date 的实例对象。\r\n        * @example\r\n            $Date.addMilliseconds(new Date(), 2000); //给当前时间加上2000毫秒\r\n        */\r\n        add(datetime, value, formater) {\r\n            datetime = exports.parse(datetime);\r\n    \r\n            let ms = datetime.getMilliseconds();\r\n            let dt = new Date(datetime);//新建一个副本，避免修改参数\r\n    \r\n            dt.setMilliseconds(ms + value);\r\n    \r\n            if (formater) {\r\n                dt = exports.format(dt, formater);\r\n            }\r\n    \r\n            return dt;\r\n        },\r\n    \r\n        /**\r\n        * 将指定的秒数加到指定的 Date 实例上。\r\n        * @param {Date} datetime 要进行操作的日期时间实例。\r\n        * @param {Number} value 要增加/减少的秒数。可以为正数，也可以为负数。\r\n        * @param {string} [formater] 可选的，对结果进行格式化的字符串。 \r\n        * @return {Date} 返回一个新的日期实例。\r\n            此方法不更改参数 datetime 的值。而是返回一个新的 Date，其值是此运算的结果。\r\n        * @example\r\n            $Date.addSeconds(new Date(), 90); //给当前时间加上90秒\r\n        */\r\n        addSeconds(datetime, value, formater) {\r\n            return exports.add(datetime, value * 1000, formater);\r\n        },\r\n    \r\n        /**\r\n         * 将指定的分钟数加到指定的 Date 实例上。\r\n         * @param {Date} datetime 要进行操作的日期时间实例。\r\n         * @param {Number} value 要增加/减少的分钟数。可以为正数，也可以为负数。\r\n         * @param {string} [formater] 可选的，对结果进行格式化的字符串。 \r\n         * @return {Date} 返回一个新的日期实例。\r\n            此方法不更改参数 datetime 的值。而是返回一个新的 Date，其值是此运算的结果。\r\n         * @example\r\n            $Date.addMinutes(new Date(), 90); //给当前时间加上90分钟\r\n         */\r\n        addMinutes(datetime, value, formater) {\r\n            return exports.addSeconds(datetime, value * 60, formater);\r\n        },\r\n    \r\n        /**\r\n         * 将指定的小时数加到指定的 Date 实例上。\r\n         * @param {Date} datetime 要进行操作的日期时间实例。\r\n         * @param {Number} value 要增加/减少的小时数。可以为正数，也可以为负数。\r\n         * @return {Date} 返回一个新的日期实例。\r\n            此方法不更改参数 datetime 的值。而是返回一个新的 Date，其值是此运算的结果。\r\n         * @example\r\n            $Date.addHours(new Date(), 35); //给当前时间加上35小时\r\n         */\r\n        addHours(datetime, value, formater) {\r\n            return exports.addMinutes(datetime, value * 60, formater);\r\n        },\r\n    \r\n    \r\n        /**\r\n        * 将指定的天数加到指定的 Date 实例上。\r\n        * @param {Date} datetime 要进行操作的日期时间实例。\r\n        * @param {Number} value 要增加/减少的天数。可以为正数，也可以为负数。\r\n        * @return {Date} 返回一个新的日期实例。。\r\n            此方法不更改参数 datetime 的值。而是返回一个新的 Date，其值是此运算的结果。\r\n        * @example\r\n            $Date.addDays(new Date(), 35); //给当前时间加上35天\r\n        */\r\n        addDays(datetime, value, formater) {\r\n            return exports.addHours(datetime, value * 24, formater);\r\n        },\r\n    \r\n        /**\r\n        * 将指定的周数加到指定的 Date 实例上。\r\n        * @param {Date} datetime 要进行操作的日期时间实例。\r\n        * @param {Number} value 要增加/减少的周数。可以为正数，也可以为负数。\r\n        * @return {Date} 返回一个新的日期实例。\r\n            此方法不更改参数 datetime 的值。 而是返回一个新的 Date，其值是此运算的结果。\r\n        * @example\r\n            $Date.addWeeks(new Date(), 3); //给当前时间加上3周\r\n        */\r\n        addWeeks(datetime, value, formater) {\r\n            return exports.addDays(datetime, value * 7, formater);\r\n        },\r\n    \r\n        /**\r\n        * 将指定的月份数加到指定的 Date 实例上。\r\n        * @param {Date} datetime 要进行操作的日期时间实例。\r\n        * @param {Number} value 要增加/减少的月份数。可以为正数，也可以为负数。\r\n        * @return {Date} 返回一个新的日期实例。\r\n            此方法不更改参数 datetime 的值。而是返回一个新的 Date，其值是此运算的结果。\r\n        * @example\r\n            $Date.addMonths(new Date(), 15); //给当前时间加上15个月\r\n        */\r\n        addMonths(datetime, value, formater) {\r\n            datetime = exports.parse(datetime);\r\n    \r\n            let dt = new Date(datetime);//新建一个副本，避免修改参数\r\n            let old = datetime.getMonth();\r\n    \r\n            dt.setMonth(old + value);\r\n    \r\n            if (formater) {\r\n                dt = exports.format(dt, formater);\r\n            }\r\n    \r\n            return dt;\r\n        },\r\n    \r\n        /**\r\n        * 将指定的年份数加到指定的 Date 实例上。\r\n        * @param {Date} datetime 要进行操作的日期时间实例。\r\n        * @param {Number} value 要增加/减少的年份数。可以为正数，也可以为负数。\r\n        * @return {Date} 返回一个新的日期实例。\r\n            此方法不更改参数 datetime 的值。 而是返回一个新的 Date，其值是此运算的结果。\r\n        * @example\r\n            $Date.addYear(new Date(), 5); //假如当前时间是2013年，则返回的日期实例的年份为2018\r\n        */\r\n        addYears(datetime, value, formater) {\r\n            return exports.addMonths(datetime, value * 12, formater);\r\n        },\r\n    \r\n        /**\r\n        * 设置一个参考时间在本地的初始值，随着时间的流逝，参考时间也会同步增长。\r\n        * 如用来设置服务器时间在本地的初始值。\r\n        * \r\n        */\r\n        set(datetime) {\r\n            let dt = exports.parse(datetime);\r\n    \r\n            if (!dt) {\r\n                throw new Error('无法识别的日期时间格式: ' + datetime);\r\n            }\r\n    \r\n            DELTA = dt - Date.now();\r\n        },\r\n    \r\n        /**\r\n        * 获取之前设置的参考时间。\r\n        */\r\n        get(formater) {\r\n            let dt = new Date();\r\n    \r\n            if (DELTA != 0) {\r\n                dt = exports.add(dt, DELTA);\r\n            }\r\n    \r\n            if (formater) {\r\n                dt = exports.format(dt, formater);\r\n            }\r\n    \r\n            return dt;\r\n        },\r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/date/Date.js"
    },
    "Defaults": {
        "id": "Defaults",
        "name": "Defaults",
        "names": [
            "Defaults"
        ],
        "file": "temp/node_modules/@definejs/defaults/modules/Defaults.js",
        "ext": ".js",
        "package": {
            "alias": "defaults",
            "name": "@definejs/defaults",
            "version": "1.0.0"
        },
        "content": "/**\n* src: @definejs/defaults/modules/Defaults.js\n* pkg: @definejs/defaults@1.0.0\n*/\ndefine('Defaults', function (require, module, exports) { \n    //注意，此模块仅供自动化打包工具 `@definejs/packer` 使用的。\r\n    //不能单独使用，因为它依赖 `@definejs/packer` 中一个变量 `InnerMM`。\r\n    //由打包工具把其它模块和本模块打包成一个独立的库时，需要用到本模块。  \r\n    //本模块用于充当`@definejs/` 内部模块使用的默认配置管理器。   \r\n    \r\n    //const InnerMM; //内部模块管理器。\r\n    \r\n    const $Object = require('Object');\r\n    const id$defaults = {}; //记录模块 id 对应的默认配置。\r\n    const id$obj = {};\r\n    const hookKey = '__hooked_for_defaults__';\r\n    const suffix = '.defaults';\r\n    \r\n    \r\n    module.exports = exports = {\r\n        /**\r\n        * 设置内部模块的默认配置。\r\n        * 会跟原有的配置作深度合并。\r\n        * 已重载 set(id, data); //设置单个模块的配置。\r\n        * 已重载 set(id$data);  //设置多个模块的配置，每个模块有自己的配置。\r\n        * 已重载 set(ids, data);  //设置多个模块的配置，它们共用同一个配置。\r\n        * @param {string} id 要设置的模块 id。\r\n        * @param {Object} data 默认配置。\r\n        */\r\n        set(id, data) {\r\n            //重载 set(ids, data); 批量设置，多个模块共用一个配置数据。\r\n            if (Array.isArray(id)) {\r\n                let ids = id;\r\n                ids.forEach(function (id) {\r\n                    exports.set(id, data);\r\n                });\r\n                return;\r\n            }\r\n    \r\n            //重载 set(id$data); 批量设置，每个模块有自己的配置。\r\n            if ($Object.isPlain(id)) {\r\n                let id$data = id;\r\n                $Object.each(id$data, function (id, data) {\r\n                    exports.set(id, data);\r\n                });\r\n                return;\r\n            }\r\n    \r\n            //重载 set(id, data); 单个设置。\r\n    \r\n            //1，已加载过了，直接合并。\r\n            let defaults = id$defaults[id];\r\n            if (defaults) {\r\n                $Object.deepAssign(defaults, data);\r\n                return;\r\n            }\r\n    \r\n            //2，尚未加载过，先缓存起来。\r\n    \r\n            //2.1，之前已设置过一次，则与之前的合并，缓存起来。\r\n            let obj = id$obj[id];\r\n            if (obj) {\r\n                $Object.deepAssign(obj, data);\r\n                return;\r\n            }\r\n    \r\n            //2.2，首次设置。\r\n    \r\n            //先缓存起来。\r\n            id$obj[id] = $Object.deepAssign({}, data);\r\n    \r\n            let mm = InnerMM.create();\r\n    \r\n            if (!mm.require[hookKey]) {\r\n                let mm_require = mm.require.bind(mm);\r\n    \r\n                //使用钩子函数进行重写，以便对 mm.require() 进行拦载，执行附加的逻辑。\r\n                mm.require = function ($id) {\r\n                    let $exports = mm_require($id);\r\n    \r\n                    //如果是 `*.defaults` 的格式，则注入附加的逻辑。\r\n                    if ($id.endsWith(suffix)) {\r\n                        let id = $id.slice(0, -suffix.length); //去掉 `.defaults` 后缀，如 `API.defaults` 变为 `API`。\r\n                        let obj = id$obj[id];\r\n                        let defaults = $exports;\r\n    \r\n                        id$defaults[id] = $Object.deepAssign(defaults, obj);\r\n                    }\r\n                    \r\n                    //这个必须无条件返回出去，是原有的 require() 函数要求的。\r\n                    return $exports;\r\n                };\r\n    \r\n                mm.require[hookKey] = true;\r\n            }\r\n    \r\n    \r\n            // //绑定加载事件，在被加载时，再进行合并。\r\n            // mm.on('require', `${id}.defaults`, function ($module, $exports) {\r\n            //     let defaults = $exports;\r\n            //     let obj = id$obj[id];\r\n            //     id$defaults[id] = $Object.deepAssign(defaults, obj);\r\n            // });\r\n        },\r\n    \r\n        /**\r\n        * 获取指定模块的默认配置。\r\n        * @param {string} id 要获取默认配置的模块 id。\r\n        */\r\n        get(id) {\r\n            let defaults = id$defaults[id];\r\n    \r\n            if (!defaults) {\r\n                defaults = id$defaults[id] = require(`${id}.defaults`);\r\n            }\r\n    \r\n            return defaults;\r\n        },\r\n    \r\n        /**\r\n        * 获取或设置 definejs 内部模块的默认配置。\r\n        * 已重载 config(id); //获取指定 id 的模块的默认配置。\r\n        * 已重载 config(id, data); //单个设置指定 id 的模块的默认配置。\r\n        * 已重载 config(id$data); //批量设置模块的默认配置。\r\n        */\r\n        config(...args) {\r\n            //get(id)\r\n            if (args.length == 1 && typeof args[0] == 'string') {\r\n                return exports.get(...args);\r\n            }\r\n    \r\n            //set()\r\n            exports.set(...args);\r\n        },\r\n    \r\n    \r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/defaults/Defaults.js"
    },
    "Dialog": {
        "id": "Dialog",
        "name": "Dialog",
        "names": [
            "Dialog"
        ],
        "file": "temp/node_modules/@definejs/dialog/modules/Dialog.js",
        "ext": ".js",
        "package": {
            "alias": "dialog",
            "name": "@definejs/dialog",
            "version": "1.0.4"
        },
        "content": "/**\n* src: @definejs/dialog/modules/Dialog.js\n* pkg: @definejs/dialog@1.0.4\n*/\ndefine('Dialog', function (require, module, exports) { \n    const $ = require('jquery');\r\n    const $Object = require('Object');\r\n    const Emitter = require('Emitter');\r\n    const Style = module.require('Style');\r\n    const Meta = module.require('Meta');\r\n    const Masker = module.require('Masker');\r\n    const Events = module.require('Events');\r\n    const Template = module.require('Template');\r\n    \r\n    const mapper = new Map();\r\n    \r\n    \r\n    class Dialog {\r\n    \r\n        /**\r\n        * 构造器。\r\n        */\r\n        constructor(config) {\r\n            config = $Object.deepAssign({}, exports.defaults, config);\r\n    \r\n            let emitter = new Emitter(this);        //事件驱动器。\r\n            let style = Style.get(config);          //\r\n            let masker = Masker.create(config);     //\r\n    \r\n            let meta = Meta.create(config, {\r\n                'style': style,         //从配置中过滤出样式成员，并进行规范化处理，style 是一个 {}。\r\n                'emitter': emitter,     //事件驱动器。\r\n                'masker': masker,       //遮罩层实例。\r\n                'this': this,           //当前实例，方便内部使用。\r\n            });\r\n    \r\n    \r\n            mapper.set(this, meta);\r\n    \r\n            //对外暴露的属性。\r\n            Object.assign(this, {\r\n                'id': meta.id,\r\n                '$': null,\r\n            });\r\n    \r\n        }\r\n    \r\n        // /**\r\n        // * 当前实例的 id。\r\n        // * 也是最外层的 DOM 节点的 id。\r\n        // */\r\n        // id = '';\r\n    \r\n        // /**\r\n        // * 当前组件最外层的 DOM 节点对应的 jQuery 实例。\r\n        // * 必须在 render 之后才存在。\r\n        // */\r\n        // $ = null;\r\n    \r\n    \r\n        /**\r\n        * 渲染本组件，生成 html 到容器 DOM 节点中。\r\n        * 该方法只需要调用一次。\r\n        * 触发事件: `render`。\r\n        */\r\n        render() {\r\n            let meta = mapper.get(this);\r\n    \r\n            //已经渲染过了。\r\n            if (meta.$) {\r\n                return;\r\n            }\r\n    \r\n    \r\n            let html = Template.fill(meta);\r\n    \r\n            $(meta.container).append(html);\r\n    \r\n            meta.$ = this.$ = $(`#${meta.id}`);\r\n            meta.$header = $(`#${meta.headerId}`);\r\n            meta.$article = $(`#${meta.articleId}`);\r\n            meta.$content = $(`#${meta.contentId}`);\r\n            meta.$footer = $(`#${meta.footerId}`);\r\n    \r\n           \r\n            //指定了可滚动\r\n            if (meta.scrollable) {\r\n                let Scroller = meta.Scroller;\r\n                if (!Scroller) {\r\n                    throw new Error('你已指定了内容区域可滚动，请传入滚动器模块对应的构造函数 Scroller。');\r\n                }\r\n                meta.scroller = new Scroller(meta.$article, meta.scrollerConfig);\r\n                meta.scroller.render();\r\n            }\r\n           \r\n            Events.bind(meta);\r\n    \r\n            meta.emitter.fire('render');\r\n    \r\n        }\r\n    \r\n        /**\r\n        * 显示本组件。\r\n        */\r\n        show() {\r\n            let meta = mapper.get(this);\r\n    \r\n            //已是显示状态。\r\n            if (meta.visible) {\r\n                meta.scroller && meta.scroller.refresh(200);\r\n                return;\r\n            }\r\n    \r\n            if (!meta.$) {\r\n                this.render();\r\n            }\r\n    \r\n    \r\n            meta.$.show();\r\n            meta.visible = true;\r\n            meta.masker && meta.masker.show();\r\n            meta.scroller && meta.scroller.refresh(200);\r\n            meta.emitter.fire('show');\r\n        }\r\n    \r\n        /**\r\n        * 隐藏本组件。\r\n        */\r\n        hide() {\r\n            let meta = mapper.get(this);\r\n    \r\n            //未渲染或已隐藏。\r\n            if (!meta.$ || !meta.visible) {\r\n                return;\r\n            }\r\n    \r\n            meta.$.hide();\r\n            meta.visible = false;\r\n            meta.masker && meta.masker.hide();\r\n            meta.emitter.fire('hide');\r\n    \r\n        }\r\n    \r\n        /**\r\n        * 移除本组件对应的 DOM 节点。\r\n        */\r\n        remove() {\r\n            let meta = mapper.get(this);\r\n    \r\n            if (!meta.$) {\r\n                return;\r\n            }\r\n    \r\n    \r\n            meta.masker && meta.masker.remove();\r\n            meta.layer && meta.layer.remove();\r\n    \r\n            //reset\r\n            let div = meta.$.get(0);\r\n            div.parentNode.removeChild(div);\r\n    \r\n            meta.$.off();\r\n            meta.visible = false;\r\n            meta.masker = null;\r\n            meta.layer = null;\r\n            meta.$ = null;\r\n            meta.$header = null;\r\n            meta.$content = null;\r\n            meta.$footer = null;\r\n    \r\n            meta.emitter.fire('remove');\r\n    \r\n        }\r\n    \r\n        /**\r\n        * 绑定事件。\r\n        */\r\n        on(...args) {\r\n            let meta = mapper.get(this);\r\n            meta.emitter.on(...args);\r\n        }\r\n    \r\n        /**\r\n        * 销毁本组件。\r\n        */\r\n        destroy() {\r\n            let meta = mapper.get(this);\r\n            if (!meta) {\r\n                throw new Error('该实例已给销毁，无法再次调用 destroy 方法。');\r\n            }\r\n    \r\n    \r\n            this.remove();\r\n    \r\n            meta.emitter.destroy();\r\n            meta.scroller && meta.scroller.destroy(); //在 PC 端为 null\r\n    \r\n            mapper.delete(this);\r\n        }\r\n    \r\n        /**\r\n        * 设置指定的属性。\r\n        * 已重载 set({}); //批量设置多个字段。\r\n        * 已重载 set(key, value); //设置单个指定的字段。\r\n        * @param {string} key 要设置的属性的名称。 \r\n        *  目前支持的字段有：'title', 'content', 'height', 'width。\r\n        * @param value 要设置的属性的值，可以是任何类型。\r\n        */\r\n        set(key, value) {\r\n            this.render();\r\n    \r\n    \r\n            let meta = mapper.get(this);\r\n            let scroller = meta.scroller;\r\n            let obj = typeof key == 'object' ? key : { [key]: value, };\r\n    \r\n            $Object.each(obj, function (key, value) {\r\n                switch (key) {\r\n                    case 'title':\r\n                        meta.$header.html(value);\r\n                        break;\r\n    \r\n                    case 'content':\r\n                        meta.$content.html(value);\r\n                        scroller && scroller.refresh(200);\r\n                        break;\r\n    \r\n                    case 'height':\r\n                    case 'width':\r\n                        let obj = {};\r\n    \r\n                        obj[key] = meta[key] = value;\r\n                        obj = Style.get(obj);\r\n    \r\n                        Object.assign(meta.style, obj); //回写\r\n                        meta.$.css(obj);\r\n                        scroller && scroller.refresh(300);\r\n                        break;\r\n    \r\n                    default:\r\n                        throw new Error(`${module.id} 目前不支持设置属性: ${key}`);\r\n                }\r\n    \r\n            });\r\n    \r\n        }\r\n    \r\n        /**\r\n        * 获取或设置自定义数据。 \r\n        * 在跨函数中传递数据时会比较方便。\r\n        * 已重载 data();           //获取全部自定义数据。\r\n        * 已重载 data(key);        //获取指定键的自定义数据。\r\n        * 已重载 data(obj);        //批量设置多个字段的自定义数据。\r\n        * 已重载 data(key, value); //单个设置指定字段的自定义数据。\r\n        * @param {string|Object} key 要获取或设置的数据的名称(键)。\r\n            当指定为一个纯对象 {} 时，则表示批量设置。\r\n            当指定为字符串或可以转为字符串的类型时，则表示获取指定名称的数据。\r\n        * @param value 要设置的数据的值。 只有显式提供该参数，才表示设置。\r\n        * @return 返回获取到的或设置进来的值。\r\n        */\r\n        data(key, value) {\r\n            let meta = mapper.get(this);\r\n            let data = meta.data;\r\n    \r\n            let len = arguments.length;\r\n            if (len == 0) { //获取全部\r\n                return data;\r\n            }\r\n    \r\n            //重载 data(obj); 批量设置\r\n            if ($Object.isPlain(key)) {\r\n                Object.assign(data, key);\r\n                return key;\r\n            }\r\n    \r\n            //get(key)\r\n            if (len == 1) {\r\n                return data[key];\r\n            }\r\n    \r\n            //set(key, value)\r\n            data[key] = value;\r\n    \r\n            return value;\r\n    \r\n        }\r\n    }\r\n    \r\n    Dialog.defaults = require('Dialog.defaults');\r\n    module.exports = exports = Dialog;\n});",
        "dest": "./output/definejs/src/@definejs/dialog/Dialog.js"
    },
    "Dialog.defaults": {
        "id": "Dialog.defaults",
        "name": "Dialog.defaults",
        "names": [
            "Dialog.defaults"
        ],
        "file": "temp/node_modules/@definejs/dialog/modules/Dialog.defaults.js",
        "ext": ".js",
        "package": {
            "alias": "dialog",
            "name": "@definejs/dialog",
            "version": "1.0.4"
        },
        "content": "/**\n* src: @definejs/dialog/modules/Dialog.defaults.js\n* pkg: @definejs/dialog@1.0.4\n*/\ndefine('Dialog.defaults', function (require, module, exports) { \n    const Masker = require('Masker');\r\n    \r\n    /**\r\n    * Dialog 模块的默认配置\r\n    * @name Dialog.defaults\r\n    */\r\n    module.exports = {\r\n        /**\r\n        * 生成组件时的 id 前缀。\r\n        * 建议保留现状。\r\n        */\r\n        idPrefix: 'definejs-Dialog',\r\n        /**\r\n        * 遮罩层的构造函数。\r\n        * 移动端需要在外部加载 Masker 模块后传入。\r\n        */\r\n        Masker, //这里提供一个默认的，以用于 PC 端。 至于移动端的，则需要提供 `@definejs/masker-mobile` 的。\r\n        /**\r\n        * 滚动器的构造函数。\r\n        * 移动端需要在外部加载 Scroller 模块后传入。\r\n        */\r\n        Scroller: null, //这里由移动端提供。\r\n        /**\r\n        * 组件添加到的容器。\r\n        * 默认为 document.body。\r\n        */\r\n        container: 'body',\r\n        /**\r\n        * 是否启用 mask 层。\r\n        */\r\n        mask: true,\r\n        /**\r\n        * 点击按钮后是否自动关闭组件。\r\n        * 可取值为: true|false，默认为 true，即自动关闭。\r\n        */\r\n        autoClose: true,\r\n        /**\r\n        * 指定是否易消失，即点击 mask 层就是否隐藏/移除。\r\n        * 可取值为: true|false，默认为不易消失。\r\n        */\r\n        volatile: false,\r\n        /**\r\n        * 组件的标题文本。\r\n        */\r\n        title: '',\r\n        /**\r\n        * 组件的内容文本。\r\n        */\r\n        content: '',\r\n        /**\r\n        * 点击按钮时需要用到的事件名。\r\n        */\r\n        eventName: 'click',\r\n        /**\r\n        * 组件用到的 css 类名。\r\n        */\r\n        cssClass: '',\r\n        /**\r\n        * 组件的 css 样式 z-index 值。\r\n        */\r\n        'z-index': 1024,\r\n        /**\r\n        * \r\n        */\r\n        width: 600,\r\n        /**\r\n        * 组件高度。\r\n        * 可以指定为百分比的字符串，或指定具体的数值（单位为像素），\r\n        */\r\n        height: '50%',\r\n        /**\r\n        * 样式集合。\r\n        * 外层里面的同名字段优先级高于里面的。\r\n        */\r\n        style: {},\r\n        /**\r\n        * 按钮数组。\r\n        */\r\n        buttons: [],\r\n        /**\r\n        * 内容区是否可滚动。\r\n        * PC 端用不可滚动。\r\n        */\r\n        scrollable: false,\r\n        /**\r\n        * 针对滚动器 Scroller 的配置。\r\n        */\r\n        scroller: null,\r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/dialog/Dialog.defaults.js"
    },
    "Dialog/Events": {
        "id": "Dialog/Events",
        "name": "Events",
        "names": [
            "Dialog",
            "Events"
        ],
        "file": "temp/node_modules/@definejs/dialog/modules/Dialog/Events.js",
        "ext": ".js",
        "package": {
            "alias": "dialog",
            "name": "@definejs/dialog",
            "version": "1.0.4"
        },
        "content": "/**\n* src: @definejs/dialog/modules/Dialog/Events.js\n* pkg: @definejs/dialog@1.0.4\n*/\ndefine('Dialog/Events', function (require, module, exports) { \n    const $ = require('jquery');\r\n    \r\n    \r\n    module.exports = {\r\n    \r\n        bind(meta) {\r\n            //监控 masker 层的隐藏。\r\n            if (meta.masker && meta.volatile) {\r\n                meta.masker.on({\r\n                    'show'() {\r\n    \r\n                    },\r\n                    'hide'() {\r\n                        meta.this.hide();\r\n                    },\r\n                });\r\n            }\r\n    \r\n    \r\n            //底部按钮。\r\n            (function () {\r\n                if (!meta.buttons.length) {\r\n                    return;\r\n                }\r\n    \r\n                let $footer = meta.$footer;\r\n                let eventName = meta.eventName;\r\n                let selector = 'button[data-index]';\r\n                let pressed = meta.pressedClass;\r\n    \r\n                //移动端。\r\n                if (eventName == 'touch') {\r\n                    $footer.touch(selector, handler, pressed);\r\n                    return;\r\n                }\r\n    \r\n                //PC 端。\r\n                $footer.on(eventName, selector, handler); //如 on('click', selector);\r\n    \r\n                $footer.on('mousedown', selector, function (event) {\r\n                    $(this).addClass(pressed);\r\n                });\r\n    \r\n                $footer.on('mouseup mouseout', selector, function (event) {\r\n                    $(this).removeClass(pressed);\r\n                });\r\n    \r\n    \r\n                //内部共用的处理器。\r\n                function handler(event) {\r\n                    let button = this;\r\n                    let index = +button.getAttribute('data-index');\r\n                    let item = meta.buttons[index];\r\n                    let cmd = item.cmd || String(index);\r\n                    let fn = item.fn;\r\n    \r\n                    fn && fn(item, index);\r\n    \r\n                    meta.emitter.fire('button', cmd, [item, index]);\r\n                    meta.emitter.fire('button', [item, index]);\r\n    \r\n    \r\n                    // item.autoClose 优先级高于 meta.autoClose。\r\n                    let autoClose = item.autoClose;\r\n    \r\n                    if (autoClose === undefined) {\r\n                        autoClose = meta.autoClose;\r\n                    }\r\n    \r\n                    if (autoClose) {\r\n                        meta.this.hide();\r\n                    }\r\n                }\r\n    \r\n            })();\r\n    \r\n    \r\n    \r\n        },\r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/dialog/Dialog/Events.js"
    },
    "Dialog/Masker": {
        "id": "Dialog/Masker",
        "name": "Masker",
        "names": [
            "Dialog",
            "Masker"
        ],
        "file": "temp/node_modules/@definejs/dialog/modules/Dialog/Masker.js",
        "ext": ".js",
        "package": {
            "alias": "dialog",
            "name": "@definejs/dialog",
            "version": "1.0.4"
        },
        "content": "/**\n* src: @definejs/dialog/modules/Dialog/Masker.js\n* pkg: @definejs/dialog@1.0.4\n*/\ndefine('Dialog/Masker', function (require, module, exports) { \n    \r\n    \r\n    \r\n    module.exports = {\r\n    \r\n        create(config) {\r\n            let Masker = config.Masker;\r\n    \r\n            let defaults = {\r\n                'container': config.container,\r\n            };\r\n    \r\n            let options = Masker.normalize(defaults, config.mask); //返回一个 {} 或 null。\r\n    \r\n            if (!options) {\r\n                return null;\r\n            }\r\n    \r\n    \r\n            Object.assign(options, {\r\n                'volatile': config.volatile,\r\n                'z-index': config['z-index'] - 1,\r\n            });\r\n    \r\n    \r\n            let masker = new Masker(options);\r\n    \r\n            return masker;\r\n    \r\n        },\r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/dialog/Dialog/Masker.js"
    },
    "Dialog/Meta": {
        "id": "Dialog/Meta",
        "name": "Meta",
        "names": [
            "Dialog",
            "Meta"
        ],
        "file": "temp/node_modules/@definejs/dialog/modules/Dialog/Meta.js",
        "ext": ".js",
        "package": {
            "alias": "dialog",
            "name": "@definejs/dialog",
            "version": "1.0.4"
        },
        "content": "/**\n* src: @definejs/dialog/modules/Dialog/Meta.js\n* pkg: @definejs/dialog@1.0.4\n*/\ndefine('Dialog/Meta', function (require, module, exports) { \n    \r\n    const IDMaker = require('IDMaker');\r\n    \r\n    \r\n    \r\n    module.exports = {\r\n        create(config, others) {\r\n            let maker = new IDMaker(config.idPrefix);\r\n            let buttons = config.buttons || [];\r\n    \r\n    \r\n            buttons = buttons.map(function (item) {\r\n                return item == 'string' ? { 'text': item, } : item;\r\n            });\r\n    \r\n    \r\n            let meta = {\r\n                'id': maker.next(),\r\n                'headerId': maker.next('header'),\r\n                'articleId': maker.next('article'),\r\n                'contentId': maker.next('content'),\r\n                'footerId': maker.next('footer'),\r\n    \r\n                'Masker': config.Masker,            //遮罩层的构造函数。 由外面按需要传入，从而避免内部关联加载。 针对移动端，如果传入了则使用。\r\n                'Scroller': config.Scroller,        //滚动器的构造函数，由外面按需要传入，从而避免内部关联加载。 针对移动端，如果传入了则使用。\r\n                'scrollable': config.scrollable,    //是否需要滚动内容，如果指定为 true，则必须传入 Scroller 构造器。\r\n                'scrollerConfig': config.scroller,\r\n                'eventName': config.eventName,\r\n                'title': config.title,\r\n                'content': config.content,\r\n                'buttons': buttons,\r\n                'z-index': config['z-index'],       //生成透明层时要用到。\r\n                'width': config.width,              //宽度。\r\n                'height': config.height,            //高度。\r\n                'autoClose': config.autoClose,      //点击任何一个按钮后是否自动关闭组件\r\n                'volatile': config.volatile,        //是否易消失。 即点击对话框外的 masker 时自动关闭对话框。\r\n                'cssClass': config.cssClass || '',  //\r\n                'container': config.container,      //\r\n    \r\n                'pressedClass': 'Pressed',  //底部按钮按下去时的样式类名。\r\n                'visible': false,           //记录当前组件是否已显示\r\n                'style': {},                //样式对象。\r\n                'data': {},                 //供 this.data() 方法使用\r\n    \r\n                'scroller': null,           //针对移动端的滚动器。\r\n                'masker': null,             //Masker 的实例，重复使用。\r\n                'emitter': null,            //事件驱动器。\r\n                'this': null,               //当前实例，方便内部使用。\r\n                '$': null,                  //组件最外层的 DOM 节点的 jQuery 实例。\r\n                '$header': null,            //$(headerId)。\r\n                '$content': null,           //$(contentId)。\r\n                '$footer': null,            //$(footerId)。\r\n            };\r\n    \r\n    \r\n    \r\n            Object.assign(meta, others);\r\n    \r\n    \r\n            return meta;\r\n    \r\n    \r\n        },\r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/dialog/Dialog/Meta.js"
    },
    "Dialog/Style": {
        "id": "Dialog/Style",
        "name": "Style",
        "names": [
            "Dialog",
            "Style"
        ],
        "file": "temp/node_modules/@definejs/dialog/modules/Dialog/Style.js",
        "ext": ".js",
        "package": {
            "alias": "dialog",
            "name": "@definejs/dialog",
            "version": "1.0.4"
        },
        "content": "/**\n* src: @definejs/dialog/modules/Dialog/Style.js\n* pkg: @definejs/dialog@1.0.4\n*/\ndefine('Dialog/Style', function (require, module, exports) { \n    const $Object = require('Object');\r\n    const Style = require('Style');\r\n    \r\n    module.exports = {\r\n        /**\r\n        *\r\n        */\r\n        get(config) {\r\n            let obj = $Object.filter(config, ['height', 'width', 'z-index']);\r\n            let style = Style.objectify(config.style);\r\n    \r\n            style = Style.merge(style, obj);\r\n            style = Style.pixelize(style, ['height', 'width',]);\r\n    \r\n            return style;\r\n    \r\n        },\r\n    \r\n    \r\n    };\r\n    \r\n    \n});",
        "dest": "./output/definejs/src/@definejs/dialog/Dialog/Style.js"
    },
    "Dialog/Template": {
        "id": "Dialog/Template",
        "name": "Template",
        "names": [
            "Dialog",
            "Template"
        ],
        "file": "temp/node_modules/@definejs/dialog/modules/Dialog/Template.js",
        "ext": ".js",
        "package": {
            "alias": "dialog",
            "name": "@definejs/dialog",
            "version": "1.0.4"
        },
        "content": "/**\n* src: @definejs/dialog/modules/Dialog/Template.js\n* pkg: @definejs/dialog@1.0.4\n*/\ndefine('Dialog/Template', function (require, module, exports) { \n    const Template = require('Template');\r\n    const Style = require('Style');\r\n    \r\n    const Sample = module.require('Sample');\r\n    \r\n    const tpl = Template.create(Sample);\r\n    \r\n    \r\n    \r\n    tpl.process({\r\n        '': function (data) {\r\n            let header = this.fill('header', data);\r\n            let content = this.fill('content', data);\r\n            let footer = this.fill('footer', data);\r\n    \r\n            let style = Style.stringify(data.style);\r\n    \r\n            return {\r\n                'id': data.id,\r\n                'cssClass': data.cssClass || '',\r\n                'style': style,\r\n                'header': header,\r\n                'content': content,\r\n                'footer': footer,\r\n            };\r\n        },\r\n    \r\n        'header': function (data) {\r\n            let title = data.title;\r\n    \r\n            if (!title) {\r\n                return '';\r\n            }\r\n    \r\n    \r\n            return {\r\n                'headerId': data.headerId,\r\n                'title': title,\r\n            };\r\n        },\r\n    \r\n        'content': function (data) {\r\n    \r\n            return {\r\n                'articleId': data.articleId,\r\n                'contentId': data.contentId,\r\n                'content': data.content,\r\n                'noHeader': data.title ? '' : 'NoHeader',              //针对无标题时。\r\n                'noFooter': data.buttons.length > 0 ? '' : 'NoFooter', //针对无按钮时。\r\n            };\r\n        },\r\n    \r\n        'footer': {\r\n            '': function (data) {\r\n                let buttons = data.buttons;\r\n                let count = buttons.length;\r\n    \r\n                if (!count) {\r\n                    return '';\r\n                }\r\n    \r\n                buttons = this.fill('button', buttons);\r\n    \r\n                return {\r\n                    'footerId': data.footerId,\r\n                    'count': count,\r\n                    'buttons': buttons,\r\n                };\r\n    \r\n            },\r\n    \r\n            'button': function (item, index) {\r\n                let style = Style.stringify(item.style);\r\n    \r\n                return {\r\n                    'index': index,\r\n                    'text': item.text,\r\n                    'cssClass': item.cssClass || '',\r\n                    'style': style,\r\n    \r\n                };\r\n            },\r\n        },\r\n    \r\n    });\r\n    \r\n    \r\n    module.exports = tpl;\r\n    \n});",
        "dest": "./output/definejs/src/@definejs/dialog/Dialog/Template.js"
    },
    "Dialog/Template/Sample": {
        "id": "Dialog/Template/Sample",
        "name": "Sample",
        "names": [
            "Dialog",
            "Template",
            "Sample"
        ],
        "file": "temp/node_modules/@definejs/dialog/modules/Dialog/Template/Sample.js",
        "ext": ".js",
        "package": {
            "alias": "dialog",
            "name": "@definejs/dialog",
            "version": "1.0.4"
        },
        "content": "/**\n* src: @definejs/dialog/modules/Dialog/Template/Sample.js\n* pkg: @definejs/dialog@1.0.4\n*/\ndefine('Dialog/Template/Sample', function (require, module, exports) { \n    \r\n    module.exports = `\r\n    <div id=\"{id}\" class=\"definejs-Dialog {cssClass}\" style=\"{style} display: none;\">\r\n        <template name=\"header\" placeholder=\"header\">\r\n            <header id=\"{headerId}\">\r\n                {title}\r\n            </header>\r\n        </template>\r\n    \r\n        <template name=\"content\" placeholder=\"content\">\r\n            <article id=\"{articleId}\" class=\"{noHeader} {noFooter}\">\r\n                <div id=\"{contentId}\">{content}</div>\r\n            </article>\r\n        </template>\r\n    \r\n        <template name=\"footer\" placeholder=\"footer\">\r\n            <footer id=\"{footerId}\" class=\"Buttons-{count}\">\r\n                <template name=\"button\" placeholder=\"buttons\">\r\n                    <button data-index=\"{index}\" class=\"{cssClass}\" style=\"{style}\">{text}</button>\r\n                </template>\r\n            </footer>\r\n        </template>\r\n    </div>\r\n    `;\r\n    \n});",
        "dest": "./output/definejs/src/@definejs/dialog/Dialog/Template/Sample.js"
    },
    "Emitter": {
        "id": "Emitter",
        "name": "Emitter",
        "names": [
            "Emitter"
        ],
        "file": "temp/node_modules/@definejs/emitter/modules/Emitter.js",
        "ext": ".js",
        "package": {
            "alias": "emitter",
            "name": "@definejs/emitter",
            "version": "1.0.5"
        },
        "content": "/**\n* src: @definejs/emitter/modules/Emitter.js\n* pkg: @definejs/emitter@1.0.5\n*/\ndefine('Emitter', function (require, module, exports) { \n    \r\n    const $Object = require('Object');\r\n    const Tree = require('Tree');\r\n    \r\n    const mapper = new Map();\r\n    let idCounter = 0;\r\n    \r\n    class Emitter {\r\n        /**\r\n        * 构造器。\r\n        * @param {Object} [context=null] 事件处理函数中的 this 上下文对象。\r\n        *   如果不指定，则默认为 null。\r\n        */\r\n        constructor(context) {\r\n    \r\n            let id = `definejs-Emitter-${idCounter++}`;\r\n    \r\n            let meta = {\r\n                'id': id,\r\n                'context': context,\r\n                'tree': new Tree(),\r\n            };\r\n    \r\n            mapper.set(this, meta);\r\n    \r\n            Object.assign(this, {\r\n                'id': meta.id,\r\n            });\r\n        }\r\n    \r\n        // /**\r\n        // * 当前实例的 id。\r\n        // */\r\n        // id = ''\r\n    \r\n        /**\r\n        * 绑定指定名称的事件处理函数。\r\n        * 已重载 on({...});\r\n        * 已重载 on(name0, name1, ..., nameN, {...});\r\n        * 已重载 on(name0, name1, ..., nameN, fn);\r\n        * 已重载 on(args); 主要是为了方便调用方快速重绑定自己的 on() 方法。\r\n        * 已重载 on(names, fn); 把多个事件名称绑定到同一个回调函数。\r\n        * @param {string} name 要绑定的事件名称。\r\n        * @param {function} fn 事件处理函数。 \r\n            在处理函数内部， this 指向构造器参数 context 对象。\r\n        * @example\r\n            let emitter = new Emitter();\r\n            emitter.on('click', function () {});\r\n        */\r\n        on(name, fn) {\r\n            //重载 on([])。\r\n            if (Array.isArray(name)) {\r\n                if (fn) { //重载 on(names, fn); 把多个事件名称绑定到同一个回调函数。\r\n                    name.map(function (name) {\r\n                        this.on(name, fn);\r\n                    }, this);\r\n                }\r\n                else {  //重载 on(args); 主要是为了方便调用方快速重绑定自己的 on() 方法。\r\n                    this.on(...name);\r\n                }\r\n    \r\n                return;\r\n            }\r\n    \r\n    \r\n            let meta = mapper.get(this);\r\n            let tree = meta.tree;\r\n            let args = Array.from(arguments);\r\n    \r\n            //重载 on(name0, name1, ..., nameN, {...}) 的情况。\r\n            //先尝试找到 {} 所在的位置。\r\n            let index = args.findIndex(function (item, index) {\r\n                return typeof item == 'object';\r\n            });\r\n    \r\n            if (index >= 0) {\r\n                let obj = args[index];\r\n                let names = args.slice(0, index);   //前缀部分 [name0, name1, ..., nameN]。\r\n                let list = $Object.flat(obj);       //{} 部分扁平化。\r\n    \r\n                list.forEach(function (item, index) {\r\n                    let keys = names.concat(item.keys);\r\n    \r\n                    //过滤掉空串，这个很重要，在模板填充里用到。\r\n                    keys = keys.filter(function (key) {\r\n                        return !!key;\r\n                    });\r\n    \r\n                    let node = tree.get(keys) || {\r\n                        'list': [],         //本节点的回调列表。\r\n                        'count': 0,         //本节点触发的次数计数。\r\n                    };\r\n    \r\n                    node.list.push(item.value);\r\n                    tree.set(keys, node);\r\n                });\r\n    \r\n                return;\r\n            }\r\n    \r\n    \r\n            //重载 on(name0, name1, ..., nameN, fn) 的情况。\r\n            //尝试找到回调函数 fn 所在的位置。\r\n            index = args.findIndex(function (item, index) {\r\n                return typeof item == 'function';\r\n            });\r\n    \r\n            if (index < 0) {\r\n                throw new Error('参数中必须指定一个回调函数');\r\n            }\r\n    \r\n            fn = args[index]; //回调函数\r\n    \r\n            let names = args.slice(0, index); //前面的都当作是名称。\r\n    \r\n            //过滤掉空串，这个很重要，在模板填充里用到。\r\n            names = names.filter(function (key) {\r\n                return !!key;\r\n            });\r\n    \r\n            let node = tree.get(names) || {\r\n                'list': [],         //本节点的回调列表。\r\n                'count': 0,         //本节点触发的次数计数。\r\n                'enabled': true,    //当为 false 时，表示本节点的回调被禁用。\r\n                'spreaded': true,   //当为 false 时，表示子节点的回调被禁用。\r\n            };\r\n    \r\n            node.list.push(fn);\r\n            tree.set(names, node);\r\n        }\r\n    \r\n        /**\r\n        * 解除绑定指定名称的事件处理函数。\r\n        * 已重载 off() 的情况。\r\n        * 已重载 off(name0, name1, ..., nameN, {...}) 的情况。\r\n        * 已重载 off(name0, name1, ..., nameN, fn) 的情况。\r\n        * 已重载 off(name0, name1, ..., nameN) 的情况。\r\n        * @param {string} [name] 要解除绑定的事件名称。\r\n            如果不指定该参数，则移除所有的事件。\r\n            如果指定了该参数，其类型必须为 string，否则会抛出异常。\r\n        * @param {function} [fn] 要解除绑定事件处理函数。\r\n            如果不指定，则移除 name 所关联的所有事件。\r\n        */\r\n        off(name, fn) {\r\n            let meta = mapper.get(this);\r\n            let tree = meta.tree;\r\n            let args = Array.from(arguments);\r\n    \r\n            //未指定事件名，则移除所有的事件。\r\n            if (args.length == 0) {\r\n                tree.clear();\r\n                return;\r\n            }\r\n    \r\n            //多名称情况: off(name0, name1, ..., nameN, {});\r\n            //先尝试找到 {} 所在的位置。\r\n            let index = args.findIndex(function (item, index) {\r\n                return typeof item == 'object';\r\n            });\r\n    \r\n            if (index >= 0) {\r\n                let obj = args[index];              //{} 对象。\r\n                let names = args.slice(0, index);   //前缀部分 [name0, name1, ..., nameN]。\r\n                let list = $Object.flat(obj);       //{} 对象部分扁平化。\r\n    \r\n                list.forEach(function (item, index) {\r\n                    let keys = names.concat(item.keys); //完整路径。\r\n    \r\n                    //过滤掉空串，这个很重要，在模板填充里用到。\r\n                    keys = keys.filter(function (key) {\r\n                        return !!key;\r\n                    });\r\n                    \r\n                    let node = tree.get(keys);          //该路径对应的节点。\r\n    \r\n                    //不存在该路径对应的节点。\r\n                    if (!node) {\r\n                        return;\r\n                    }\r\n    \r\n                    //存在该路径对应的节点，但事件列表为空。\r\n                    let list = node.list;\r\n                    if (!list || !list.length) {\r\n                        return;\r\n                    }\r\n    \r\n                    let fn = item.value;\r\n                    node.list = list.filter(function (item) {\r\n                        return item !== fn;\r\n                    });\r\n                });\r\n                return;\r\n            }\r\n    \r\n    \r\n            //重载 off(name0, name1, ..., nameN, fn) 的情况。\r\n            //先尝试找到回调函数所在的位置。\r\n            index = args.findIndex(function (item, index) {\r\n                return typeof item == 'function';\r\n            });\r\n    \r\n            //未指定处理函数，则假定在边界之外。\r\n            if (index < 0) {\r\n                index = args.length;\r\n            }\r\n    \r\n            fn = args[index]; //回调函数。\r\n    \r\n            let names = args.slice(0, index); //前面的都当作是名称。\r\n    \r\n            //过滤掉空串，这个很重要，在模板填充里用到。\r\n            names = names.filter(function (key) {\r\n                return !!key;\r\n            });\r\n    \r\n            let node = tree.get(names);\r\n    \r\n            //不存在该路径对应的节点。\r\n            if (!node) {\r\n                return;\r\n            }\r\n    \r\n            //存在该路径对应的节点，但事件列表为空。\r\n            let list = node.list;\r\n            if (!list || !list.length) {\r\n                return;\r\n            }\r\n    \r\n            if (fn) {\r\n                node.list = list.filter(function (item, index) {\r\n                    return item !== fn;\r\n                });\r\n            }\r\n            else { //未指定处理函数，则清空列表\r\n                list.length = 0;\r\n            }\r\n    \r\n        }\r\n    \r\n        /**\r\n        * 已重载。\r\n        * 触发指定名称的事件，并可向事件处理函数传递一些参数。\r\n        * @return {Array} 返回所有事件处理函数的返回值所组成的一个数组。\r\n        * @example\r\n            let emitter = new Emitter();\r\n            emitter.on('click', 'name', function (a, b) {\r\n                console.log(a, b);\r\n            });\r\n            emitter.fire('click', 'name', [100, 200]);\r\n        */\r\n        fire(name, params) {\r\n            let meta = mapper.get(this);\r\n            if (!meta) {\r\n                console.log(arguments, this.id);\r\n            }\r\n    \r\n            let context = meta.context;\r\n            let args = [...arguments];\r\n    \r\n            let index = args.findIndex(function (item, index) {\r\n                return Array.isArray(item);\r\n            });\r\n    \r\n            if (index < 0) {\r\n                index = args.length;\r\n            }\r\n    \r\n            let names = args.slice(0, index);\r\n            let node = meta.tree.get(names);\r\n            let returns = [];\r\n    \r\n            if (!node) { //不存在该事件名对应的节点。\r\n                return returns;\r\n            }\r\n    \r\n            params = args[index] || [];\r\n            node.count++;\r\n    \r\n            node.list.forEach(function (fn, index) {\r\n                //让 fn 内的 this 指向 context，并收集返回值。\r\n                let value = fn.apply(context, params);\r\n                returns.push(value);\r\n            });\r\n    \r\n            return returns;\r\n    \r\n        }\r\n    \r\n        /**\r\n        * 判断是否已绑定了指定名称的事件。\r\n        */\r\n        has(...names) {\r\n            let meta = mapper.get(this);\r\n            let node = meta.tree.get([...names]);\r\n    \r\n            return node && node.list && node.list.length > 0;\r\n        }\r\n    \r\n        /**\r\n        * 设置指定的属性为指定的值。\r\n        * 如可以在触发事件前动态改变 context 值。\r\n        */\r\n        set(key, value) {\r\n            let meta = mapper.get(this);\r\n    \r\n            switch (key) {\r\n                case 'context':\r\n                    meta[key] = value;\r\n                    break;\r\n    \r\n                default:\r\n                    throw new Error('不支持设置属性: ' + key);\r\n            }\r\n    \r\n        }\r\n    \r\n        /**\r\n        * 销毁本实例对象。\r\n        */\r\n        destroy() {\r\n            let meta = mapper.get(this);\r\n            meta.tree.destroy();\r\n            mapper.delete(this);\r\n        }\r\n    }\r\n    \r\n    /**\r\n    * \r\n    */\r\n    \r\n    module.exports = Emitter;\n});",
        "dest": "./output/definejs/src/@definejs/emitter/Emitter.js"
    },
    "Escape": {
        "id": "Escape",
        "name": "Escape",
        "names": [
            "Escape"
        ],
        "file": "temp/node_modules/@definejs/escape/modules/Escape.js",
        "ext": ".js",
        "package": {
            "alias": "escape",
            "name": "@definejs/escape",
            "version": "1.0.0"
        },
        "content": "/**\n* src: @definejs/escape/modules/Escape.js\n* pkg: @definejs/escape@1.0.0\n*/\ndefine('Escape', function (require, module, exports) { \n    \r\n    /**\r\n    * HTML 转码工具。\r\n    */\r\n    module.exports = exports = {\r\n        /**\r\n        * 把用户产生的内容做转换，以便可以安全地放在 html 里展示。\r\n        * @return {String}\r\n        */\r\n        html(string) {\r\n            var s = String(string);\r\n            var reg = /[&'\"<>\\/\\\\\\-\\x00-\\x09\\x0b-\\x0c\\x1f\\x80-\\xff]/g;\r\n    \r\n            s = s.replace(reg, function (r) {\r\n                return \"&#\" + r.charCodeAt(0) + \";\"\r\n            });\r\n    \r\n            s = s.replace(/ /g, \"&nbsp;\");\r\n            s = s.replace(/\\r\\n/g, \"<br />\");\r\n            s = s.replace(/\\n/g, \"<br />\");\r\n            s = s.replace(/\\r/g, \"<br />\");\r\n    \r\n            return s;\r\n        },\r\n    \r\n        /**\r\n        * 把用户产生的内容做转换，以便可以安全地放在节点的属性里展示。\r\n        * @example 如 `<input value=\"XXX\">`，`XXX` 就是要转换的部分。\r\n        * @return {String}\r\n        */\r\n        attribute(string) {\r\n            var s = String(string);\r\n            var reg = /[&'\"<>\\/\\\\\\-\\x00-\\x1f\\x80-\\xff]/g;\r\n    \r\n            return s.replace(reg, function (r) {\r\n                return \"&#\" + r.charCodeAt(0) + \";\"\r\n            });\r\n        },\r\n    \r\n        /**\r\n        * 用做过滤直接放到 HTML 里 j s中的。\r\n        * @return {String}\r\n        */\r\n        script(string) {\r\n            var s = String(string);\r\n            var reg = /[\\\\\"']/g;\r\n    \r\n            s = s.replace(reg, function (r) {\r\n                return \"\\\\\" + r;\r\n            });\r\n    \r\n            s = s.replace(/%/g, \"\\\\x25\");\r\n            s = s.replace(/\\n/g, \"\\\\n\");\r\n            s = s.replace(/\\r/g, \"\\\\r\");\r\n            s = s.replace(/\\x01/g, \"\\\\x01\");\r\n    \r\n            return s;\r\n        },\r\n    \r\n        /**\r\n        * 对查询字符串中的值部分进行转换。\r\n        * 如 `http://www.test.com/?a=XXX`，其中 `XXX` 就是要过滤的部分。\r\n        * @return {String}\r\n        */\r\n        query(string) {\r\n            var s = String(string);\r\n            return escape(s).replace(/\\+/g, \"%2B\");\r\n        },\r\n    \r\n        /**\r\n        * 用做过滤直接放到<a href=\"javascript:alert('XXX')\">中的XXX\r\n        * @return {String}\r\n        */\r\n        hrefScript(string) {\r\n            var s = exports.escapeScript(string);\r\n    \r\n            s = s.replace(/%/g, \"%25\"); //escMiniUrl\r\n            s = exports.escapeElementAttribute(s);\r\n            return s;\r\n    \r\n        },\r\n    \r\n        /**\r\n        * 用做过滤直接放到正则表达式中的。\r\n        * @return {String}\r\n        */\r\n        regexp(string) {\r\n            var s = String(string);\r\n            var reg = /[\\\\\\^\\$\\*\\+\\?\\{\\}\\.\\(\\)\\[\\]]/g;\r\n    \r\n            return s.replace(reg, function (a, b) {\r\n                return \"\\\\\" + a;\r\n            });\r\n        },\r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/escape/Escape.js"
    },
    "Fn": {
        "id": "Fn",
        "name": "Fn",
        "names": [
            "Fn"
        ],
        "file": "temp/node_modules/@definejs/fn/modules/Fn.js",
        "ext": ".js",
        "package": {
            "alias": "fn",
            "name": "@definejs/fn",
            "version": "1.0.0"
        },
        "content": "/**\n* src: @definejs/fn/modules/Fn.js\n* pkg: @definejs/fn@1.0.0\n*/\ndefine('Fn', function (require, module, exports) { \n    const $Math = require('Math');\r\n    \r\n    \r\n    /**\r\n    * 函数工具。\r\n    */\r\n    module.exports = {\r\n        /**\r\n        * 空函数。\r\n        * 提供一个什么也不做、直接原样返回入参的空操作函数。\r\n        * 在很多场合可以用来提供给模块配置，以要求的回调函数不为空。\r\n        */\r\n        noop(...args) {\r\n            return args[0];\r\n        },\r\n    \r\n        /**\r\n        * 用一个的随机延迟时间去执行一个回调函数，并传递一些参数。\r\n        * @param {Object} delay 延迟配置对象。\r\n            如 { min: 500, max: 2000, }，当不需要延迟时，则应为 null。\r\n        * @param {function} fn 要延迟执行的函数。\r\n        * @param {Array} [args] 要传递的参数数组。\r\n        * @return {number} 返回 setTimeout 的结果。\r\n        *   如果没有启用延迟，则不返回值。\r\n        */\r\n        delay(delay, fn, args) {\r\n            if (!fn) {\r\n                return;\r\n            }\r\n    \r\n            if (delay === false || delay == null) { //不启用延迟\r\n                fn.apply(null, args);\r\n                return;\r\n            }\r\n    \r\n            let timeout =\r\n                typeof delay == 'number' ? delay :\r\n                $Math.randomInt(delay.min, delay.max);\r\n    \r\n            return setTimeout(function () {\r\n                fn.apply(null, args);\r\n    \r\n            }, timeout);\r\n        },\r\n    \r\n        /**\r\n         * 构造一个函数闭包来执行指定的代码字符串。\r\n         * @param {string} content 要执行的代码字符串。\r\n         * @returns {*} 返回代码字符串里所返回的值。\r\n         */\r\n        exec(content) {\r\n            let js = `\r\n                return (function () { \r\n                    ${content}\r\n                })();\r\n            `;\r\n    \r\n            let fn = new Function(js);\r\n    \r\n            return fn();\r\n        },\r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/fn/Fn.js"
    },
    "HTMLParser": {
        "id": "HTMLParser",
        "name": "HTMLParser",
        "names": [
            "HTMLParser"
        ],
        "file": "temp/node_modules/@definejs/html-parser/modules/HTMLParser.js",
        "ext": ".js",
        "package": {
            "alias": "html-parser",
            "name": "@definejs/html-parser",
            "version": "1.0.0"
        },
        "content": "/**\n* src: @definejs/html-parser/modules/HTMLParser.js\n* pkg: @definejs/html-parser@1.0.0\n*/\ndefine('HTMLParser', function (require, module, exports) { \n    \r\n    /**\r\n    * Parse a string of HTML into an HTML DOM.\r\n    *\r\n    * https://github.com/developit/htmlParser\r\n    */\r\n    module.exports = (function () { \r\n    \r\n        var exports = {},\r\n            util = {},\r\n            splitAttrsTokenizer = /([a-z0-9_\\:\\-]*)\\s*?=\\s*?(['\"]?)(.*?)\\2\\s+/gim,\r\n            domParserTokenizer = /(?:<(\\/?)([a-zA-Z][a-zA-Z0-9\\:]*)(?:\\s([^>]*?))?((?:\\s*\\/)?)>|(<\\!\\-\\-)([\\s\\S]*?)(\\-\\->)|(<\\!\\[CDATA\\[)([\\s\\S]*?)(\\]\\]>))/gm;\r\n    \r\n        util.extend = function (a, b) {\r\n            for (var x in b) {\r\n                if (b.hasOwnProperty(x)) {\r\n                    a[x] = b[x];\r\n                }\r\n            }\r\n            return a;\r\n        };\r\n    \r\n        util.inherit = function (a, b) {\r\n            var p = a.prototype;\r\n            function F() {\r\n    \r\n            }\r\n    \r\n            F.prototype = b.prototype;\r\n            a.prototype = new F();\r\n    \r\n            util.extend(a.prototype, p);\r\n            a.prototype.constructor = a;\r\n        };\r\n    \r\n        //by micty。\r\n        //已添加了更多的。\r\n        util.selfClosingTags = ['area', 'base', 'br', 'col', 'embed', 'frame', 'hr', 'img', 'input', 'keygen', 'link', 'meta', 'object', 'param', 'source'];\r\n    \r\n        util.getElementsByTagName = function (el, tag) {\r\n            var els = [], c = 0, i, n;\r\n            if (!tag) {\r\n                tag = '*';\r\n            }\r\n            tag = tag.toLowerCase();\r\n    \r\n            if (el.childNodes) {\r\n                for (i = 0; i < el.childNodes.length; i++) {\r\n                    n = el.childNodes[i];\r\n                    if (n.nodeType === 1 && (tag === '*' || n.nodeName === tag)) {\r\n                        els[c++] = n;\r\n                    }\r\n    \r\n                    Array.prototype.splice.apply(els, [els.length, 0].concat(util.getElementsByTagName(n, tag)));\r\n                    c = els.length;\r\n                }\r\n            }\r\n    \r\n            return els;\r\n        };\r\n    \r\n        util.splitAttrs = function (str) {\r\n            var obj = {}, token;\r\n    \r\n            if (str) {\r\n                splitAttrsTokenizer.lastIndex = 0;\r\n                str = ' ' + (str || '') + ' ';\r\n    \r\n                while ((token = splitAttrsTokenizer.exec(str))) {\r\n                    obj[token[1]] = token[3];\r\n                }\r\n            }\r\n    \r\n            return obj;\r\n        };\r\n    \r\n        util.ta = document.createElement('textarea');\r\n    \r\n        util.encodeEntities = function (str) {\r\n            util.ta.value = str || '';\r\n            return util.ta.innerHTML;\r\n        };\r\n    \r\n        util.decodeEntities = function (str) {\r\n            util.ta.innerHTML = str || '';\r\n            return util.ta.value;\r\n        };\r\n    \r\n        util.htmlToText = function (html) {\r\n            html = html.replace(/<\\/?[a-z].*?>/gim, '');\r\n            return util.decodeEntities(html);\r\n        };\r\n    \r\n        function HTMLElement() {\r\n            this.childNodes = [];\r\n        }\r\n    \r\n        util.extend(HTMLElement.prototype, {\r\n            nodeType: 1,\r\n            textContent: '',\r\n    \r\n            getElementsByTagName: function (tag) {\r\n                return util.getElementsByTagName(this, tag);\r\n            },\r\n    \r\n            getAttribute: function (a) {\r\n                if (this.attributes.hasOwnProperty(a)) {\r\n                    return this.attributes[a];\r\n                }\r\n            },\r\n    \r\n            setAttribute: function (name, value) {\r\n                var lcName = (name + '').toLowerCase();\r\n                this.attributes[name] = value + '';\r\n                if (lcName === 'id' || lcName === 'name') {\r\n                    this[lcName] = value;\r\n                }\r\n                if (lcName === 'class') {\r\n                    this.className = value;\r\n                }\r\n            },\r\n    \r\n            getElementById: function (id) {\r\n                var all = this.getElementsByTagName('*'),\r\n                    i;\r\n                for (i = all.length; i--;) {\r\n                    if (all[i].id === id) {\r\n                        return all[i];\r\n                    }\r\n                }\r\n            },\r\n    \r\n            appendChild: function (child) {\r\n                if (child.parentNode) {\r\n                    child.parentNode.removeChild(child);\r\n                }\r\n                this.childNodes.push(child);\r\n            },\r\n    \r\n            insertBefore: function (child, sibling) {\r\n                if (child.parentNode) {\r\n                    child.parentNode.removeChild(child);\r\n                }\r\n                for (var i = 0; i < this.childNodes.length; i++) {\r\n                    if (this.childNodes[i] === sibling) {\r\n                        break;\r\n                    }\r\n                }\r\n                this.childNodes.splice(i, 0, child);\r\n            },\r\n    \r\n            removeChild: function (child) {\r\n                for (var i = this.childNodes.length; i--;) {\r\n                    if (this.childNodes[i] === child) {\r\n                        this.childNodes.splice(i, 1);\r\n                        break;\r\n                    }\r\n                }\r\n            },\r\n        });\r\n    \r\n        exports.HTMLElement = HTMLElement;\r\n    \r\n    \r\n        function Node() {\r\n    \r\n        }\r\n    \r\n        util.extend(Node.prototype, {\r\n            toString: function () {\r\n                return this.textContent;\r\n            },\r\n        });\r\n    \r\n    \r\n        function Document() {\r\n            HTMLElement.call(this);\r\n        }\r\n    \r\n        util.inherit(Document, HTMLElement);\r\n    \r\n        util.extend(Document.prototype, {\r\n            nodeType: 9,\r\n            nodeName: '#document',\r\n        });\r\n    \r\n        exports.Document = Document;\r\n    \r\n        function TextNode() {\r\n    \r\n        }\r\n    \r\n        util.inherit(TextNode, Node);\r\n    \r\n        util.extend(TextNode.prototype, {\r\n            nodeType: 3,\r\n            nodeName: '#text'\r\n        });\r\n    \r\n    \r\n        exports.TextNode = TextNode;\r\n    \r\n        function CommentNode() {\r\n    \r\n        }\r\n    \r\n        util.inherit(CommentNode, Node);\r\n        util.extend(CommentNode.prototype, {\r\n            nodeType: 8,\r\n            nodeName: '#comment'\r\n        });\r\n    \r\n        exports.CommentNode = CommentNode;\r\n    \r\n    \r\n    \r\n        function CDATASectionNode() { }\r\n    \r\n        util.inherit(CDATASectionNode, Node);\r\n        util.extend(CDATASectionNode.prototype, {\r\n            nodeType: 4,\r\n            nodeName: '#cdata-section'\r\n        });\r\n        exports.CDATASectionNode = CDATASectionNode;\r\n    \r\n    \r\n        util.blockConstructors = {\r\n            '<!--': CommentNode,\r\n            '<![CDATA[': CDATASectionNode\r\n        };\r\n    \r\n    \r\n        /** Parse a string of HTML into an HTML DOM.\r\n         *  @param {String} str\t\tA string containing HTML\r\n         *  @returns {Document}\t\tA Node, the type corresponding to the type of the root HTML node.\r\n         */\r\n        exports.parse = function (str) {\r\n            var tags, doc, parent, prev, token, text, i,\r\n                bStart, bText, bEnd, BlockConstructor, commitTextNode, tag;\r\n            tags = [];\r\n            domParserTokenizer.lastIndex = 0;\r\n    \r\n            parent = doc = new Document();\r\n    \r\n            commitTextNode = function () {\r\n                // note: this is moved out of the loop but still uses its scope!!\r\n                if (parent && tags.length > 0) {\r\n                    prev = tags[tags.length - 1];\r\n                    i = (prev.documentPosition.closeTag || prev.documentPosition.openTag).end;\r\n                    if (prev.parentNode === parent && i && i < tag.documentPosition.openTag.start) {\r\n                        text = str.substring(i, tag.documentPosition.openTag.start);\r\n                        if (text) {\r\n                            text = util.decodeEntities(text);\r\n                            parent.childNodes.push(util.extend(new TextNode(), {\r\n                                textContent: text,\r\n                                nodeValue: text,\r\n                                parentNode: parent\r\n                            }));\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n    \r\n            while ((token = domParserTokenizer.exec(str))) {\r\n                bStart = token[5] || token[8];\r\n                bText = token[6] || token[9];\r\n                bEnd = token[7] || token[10];\r\n                if (bStart === '<!--' || bStart === '<![CDATA[') {\r\n                    i = domParserTokenizer.lastIndex - token[0].length;\r\n                    BlockConstructor = util.blockConstructors[bStart];\r\n                    if (BlockConstructor) {\r\n                        tag = util.extend(new BlockConstructor(), {\r\n                            textContent: bText,\r\n                            nodeValue: bText,\r\n                            parentNode: parent,\r\n                            documentPosition: {\r\n                                openTag: {\r\n                                    start: i,\r\n                                    end: i + bStart.length\r\n                                },\r\n                                closeTag: {\r\n                                    start: domParserTokenizer.lastIndex - bEnd.length,\r\n                                    end: domParserTokenizer.lastIndex\r\n                                }\r\n                            }\r\n                        });\r\n                        commitTextNode();\r\n                        tags.push(tag);\r\n                        tag.parentNode.childNodes.push(tag);\r\n                    }\r\n                }\r\n                else if (token[1] !== '/') {\r\n                    tag = util.extend(new HTMLElement(), {\r\n                        nodeName: (token[2] + '').toLowerCase(),\r\n                        attributes: util.splitAttrs(token[3]),\r\n                        parentNode: parent,\r\n                        documentPosition: {\r\n                            openTag: {\r\n                                start: domParserTokenizer.lastIndex - token[0].length,\r\n                                end: domParserTokenizer.lastIndex\r\n                            }\r\n                        }\r\n                    });\r\n                    tag.className = tag.attributes['class'];\r\n                    tag.id = tag.attributes.id;\r\n                    tag.name = tag.attributes.name;\r\n                    commitTextNode();\r\n                    tags.push(tag);\r\n                    tag.parentNode.childNodes.push(tag);\r\n    \r\n                    //by micty。\r\n                    if ((token[4] && token[4].indexOf('/') > -1) || util.selfClosingTags.includes(tag.nodeName)) {\r\n                        tag.documentPosition.closeTag = tag.documentPosition.openTag;\r\n                        tag.isSelfClosingTag = true;\r\n                        tag.innerHTML = '';\r\n                        tag.outerHTML = str.substring(tag.documentPosition.openTag.start, tag.documentPosition.closeTag.end);\r\n                    }\r\n                    else {\r\n                        parent = tag;\r\n                    }\r\n                }\r\n                else {\r\n                    // Close parent node if end-tag matches\r\n                    if ((token[2] + '').toLowerCase() === parent.nodeName) {\r\n                        tag = parent;\r\n                        parent = tag.parentNode;\r\n                        delete tag.isSelfClosingTag;\r\n                        tag.documentPosition.closeTag = {\r\n                            start: domParserTokenizer.lastIndex - token[0].length,\r\n                            end: domParserTokenizer.lastIndex\r\n                        };\r\n                        tag.innerHTML = str.substring(tag.documentPosition.openTag.end, tag.documentPosition.closeTag.start);\r\n                        tag.outerHTML = str.substring(tag.documentPosition.openTag.start, tag.documentPosition.closeTag.end);\r\n                        tag.textContent = util.htmlToText(tag.innerHTML);\r\n                    }\r\n                    // account for abuse of self-closing tags when an end-tag is also provided:\r\n                    else if ((token[2] + '').toLowerCase() === tags[tags.length - 1].nodeName && tags[tags.length - 1].isSelfClosingTag === true) {\r\n                        tag = tags[tags.length - 1];\r\n                        console.warn('HTML Error: discarding dangling <\\/' + token[2] + '> tag. Already closed via: ' + tag.outerHTML);\r\n                        delete tag.isSelfClosing;\r\n                        tag.documentPosition.closeTag = {\r\n                            start: domParserTokenizer.lastIndex - token[0].length,\r\n                            end: domParserTokenizer.lastIndex\r\n                        };\r\n                    }\r\n                    else {\r\n                        console.warn('tag mismatch: \"' + token[2] + '\" vs \"' + tag.nodeName + '\"', tag);\r\n                    }\r\n                }\r\n            }\r\n    \r\n            doc.documentElement = doc.getElementsByTagName('html')[0];\r\n            doc.body = doc.getElementsByTagName('body')[0];\r\n    \r\n            return doc;\r\n        };\r\n    \r\n        return exports;\r\n    \r\n    \r\n    })();\n});",
        "dest": "./output/definejs/src/@definejs/html-parser/HTMLParser.js"
    },
    "Hash": {
        "id": "Hash",
        "name": "Hash",
        "names": [
            "Hash"
        ],
        "file": "temp/node_modules/@definejs/hash/modules/Hash.js",
        "ext": ".js",
        "package": {
            "alias": "hash",
            "name": "@definejs/hash",
            "version": "1.0.0"
        },
        "content": "/**\n* src: @definejs/hash/modules/Hash.js\n* pkg: @definejs/hash@1.0.0\n*/\ndefine('Hash', function (require, module, exports) { \n    const $Object = require('Object');\r\n    const Query = require('Query');\r\n    \r\n    /**\r\n    * Url 中的哈希工具。\r\n    */\r\n    module.exports = exports = {\r\n        /**\r\n        * 获取指定 url 的 hash 中指定的键所对应的值。\r\n        * @param {string} url 要进行获取的 url 字符串。\r\n        * @param {string} [key] 要检索的键。\r\n        * @param {boolean} [ignoreCase=false] 是否忽略参数 key 的大小写。 默认区分大小写。\r\n            如果要忽略 key 的大小写，请指定为 true；否则不指定或指定为 false。\r\n            当指定为 true 时，将优先检索完全匹配的键所对应的项；若没找到然后再忽略大小写去检索。\r\n        * @retun {string|Object|undefined} 返回一个查询字符串值。\r\n            当不指定参数 key 时，则获取全部 hash 值，对其进行 unescape 解码，\r\n            然后返回一个等价的 Object 对象。\r\n            当指定参数 key 为一个空字符串，则获取全部 hash (不解码)，返回一个 string 类型值。\r\n        * @example\r\n            Hash.get('http://test.com?query#a%3D1%26b%3D2', 'a');  //返回 '1'\r\n            Hash.get('http://test.com?query#a%3D1%26b%3D2', 'c');  //返回 undefined\r\n            Hash.get('http://test.com?query#a%3D1%26A%3D2', 'A');  //返回 2\r\n            Hash.get('http://test.com?query#a%3D1%26b%3D2', 'A', true);//返回 1\r\n            Hash.get('http://test.com?query#a%3D1%26b%3D2', '');   //返回 'a%3D1%26b%3D2'\r\n            Hash.get('http://test.com?query#a%3D1%26b%3D2');       //返回 {a: '1', b: '2'}\r\n            Hash.get('http://test.com?query#a%3D%26b%3D');         //返回 {a: '', b: ''}\r\n            Hash.get('http://test.com??query#a%26b');              //返回 {a: '', b: ''}\r\n            Hash.get('http://test.com?query#a', 'a');              //返回 ''\r\n        */\r\n        get(url, key, ignoreCase) {\r\n            //重载 get(location, key, ignoreCase)\r\n            //重载 get(window, key, ignoreCase)\r\n            if (typeof url == 'object') {\r\n                let location = null;\r\n    \r\n                if ('href' in url) {            //url is `location`。\r\n                    location = url;\r\n                }\r\n                else if ('location' in url) {    //url is `window`。\r\n                    location = url.location;\r\n                }\r\n                else {\r\n                    throw new Error(`当参数 url 是一个 Object 类型时，只能是浏览器环境中的 location 或 window 对象。`);\r\n                }\r\n    \r\n                url = location.href;\r\n            }\r\n    \r\n            let beginIndex = url.indexOf('#');\r\n            if (beginIndex < 0) { //不存在查询字符串\r\n                return;\r\n            }\r\n    \r\n            let endIndex = url.length;\r\n            let hash = url.slice(beginIndex + 1, endIndex);\r\n            \r\n            hash = unescape(hash); //解码\r\n    \r\n            if (key === '') { //获取全部 hash 的 string 类型\r\n                return hash;\r\n            }\r\n    \r\n    \r\n            let obj = Query.parse(hash);\r\n    \r\n            if (key === undefined) { //未指定键，获取整个 Object 对象\r\n                return obj;\r\n            }\r\n    \r\n            if (!ignoreCase || key in obj) { //区分大小写或有完全匹配的键\r\n                return obj[key];\r\n            }\r\n    \r\n    \r\n            //以下是不区分大小写\r\n            key = key.toString().toLowerCase();\r\n    \r\n            for (let name in obj) {\r\n                if (name.toLowerCase() == key) {\r\n                    return obj[name];\r\n                }\r\n            }\r\n        },\r\n    \r\n        /**\r\n        * 把指定的 hash 设置到指定的 url 上。\r\n        * 该方法会对 hash 进行 escape 编码，再设置到 url 上，以避免 hash 破坏原有的 url。\r\n        * 同时原有的 hash 会移除掉而替换成新的。\r\n        * @param {string} url 要设置的 url 字符串。\r\n        * @param {string|number|boolean|Object} key 要设置的 hash 的键。\r\n            当传入一个 Object 对象时，会对键值对进行递归编码成查询字符串， 然后用 escape 编码来设置 hash 。\r\n            当传入的是一个 string|number|boolean 类型，并且不传入第三个参数， 则直接用 escape 编码来设置 hash 。\r\n        * @param {string} [value] 要添加的 hash 的值。\r\n        * @retun {string} 返回组装后的新的 url 字符串。\r\n        * @example\r\n            //返回 'http://test.com?#a%3D1'\r\n            Hash.set('http://test.com', 'a', 1);  \r\n            \r\n            //返回 'http://test.com?query#a%3D3%26d%3D4'\r\n            Hash.set('http://test.com?query#a%3D1%26b%3D2', {a: 3, d: 4});  \r\n     \r\n            //返回 'http://test.com?query#a%3D3%26d%3D4'\r\n            Hash.set('http://test.com?query#a%3D1%26b%3D2', 'a=3&b=4'); \r\n            \r\n        */\r\n        set(url, key, value) {\r\n            let location = null;\r\n    \r\n            if (typeof url == 'object') {\r\n                if ('href' in url) {            //url is `location`。\r\n                    location = url;         \r\n                }\r\n                else if ('location' in url) {    //url is `window`。\r\n                    location = url.location; \r\n                }\r\n                else {\r\n                    throw new Error(`当参数 url 是一个 Object 类型时，只能是浏览器环境中的 location 或 window 对象。`);\r\n                }\r\n    \r\n                url = location.href;\r\n            }\r\n    \r\n            let type = typeof key;\r\n            let isValueType = (/^(string|number|boolean)$/).test(type);\r\n            let hash = '';\r\n    \r\n            if (arguments.length == 2 && isValueType) {\r\n                hash = String(key);\r\n            }\r\n            else {\r\n                let obj = type == 'object' ? key : $Object.make(key, value);\r\n                hash = Query.stringify(obj);\r\n            }\r\n    \r\n    \r\n            hash = escape(hash); //要进行编码，避免破坏原有的 url\r\n    \r\n            let index = url.lastIndexOf('#');\r\n            if (index > -1) {\r\n                url = url.slice(0, index);\r\n            }\r\n    \r\n            url = url + '#' + hash;\r\n    \r\n            //在浏览器环境，立即应用。\r\n            if (location) {\r\n                location.hash = hash; //不要设置整个 location.href，否则会刷新\r\n            }\r\n    \r\n    \r\n            return url;\r\n    \r\n        },\r\n    \r\n        /**\r\n        * 判断指定的 url 是否包含特定名称的 hash。\r\n        * @param {string} url 要检查的 url。\r\n        * @param {string} [key] 要提取的查询字符串的键。\r\n        * @param {boolean} [ignoreCase=false] 是否忽略参数 key 的大小写，默认区分大小写。\r\n            如果要忽略 key 的大小写，请指定为 true；否则不指定或指定为 false。\r\n            当指定为 true 时，将优先检索完全匹配的键所对应的项；若没找到然后再忽略大小写去检索。\r\n        * @retun {boolean} 如果 url 中包含该名称的查询字符串，则返回 true；否则返回 false。\r\n        * @example\r\n            Hash.has('http://test.com?a=1&b=2#hash', 'a');  //返回 true\r\n            Hash.has('http://test.com?a=1&b=2#hash', 'b');  //返回 true\r\n            Hash.has('http://test.com?a=1&b=2#hash', 'c');  //返回 false\r\n            Hash.has('http://test.com?a=1&b=2#hash', 'A', true); //返回 true\r\n            Hash.has('http://test.com?a=1&b=2#hash');       //返回 true\r\n        */\r\n        has(url, key, ignoreCase) {\r\n            //重载 has(location, key, ignoreCase)\r\n            //重载 has(window, key, ignoreCase)\r\n            if (typeof url == 'object') {\r\n                let location = null;\r\n    \r\n                if ('href' in url) {            //url is `location`。\r\n                    location = url;\r\n                }\r\n                else if ('location' in url) {    //url is `window`。\r\n                    location = url.location;\r\n                }\r\n                else {\r\n                    throw new Error(`当参数 url 是一个 Object 类型时，只能是浏览器环境中的 location 或 window 对象。`);\r\n                }\r\n    \r\n                url = location.href;\r\n            }\r\n    \r\n            let obj = exports.get(url); //获取全部 hash 字符串的 Object 形式。\r\n    \r\n            if (!obj) {\r\n                return false;\r\n            }\r\n    \r\n    \r\n            if (!key) { //不指定名称，\r\n                return !$Object.isEmpty(obj); //只要有数据，就为 true\r\n            }\r\n    \r\n            if (key in obj) { //找到完全匹配的\r\n                return true;\r\n            }\r\n    \r\n    \r\n            if (ignoreCase) { //明确指定了忽略大小写\r\n                key = key.toString().toLowerCase();\r\n    \r\n                for (let name in obj) {\r\n                    if (name.toLowerCase() == key) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n    \r\n            //区分大小写，但没找到。\r\n            return false;\r\n    \r\n        },\r\n    \r\n        /**\r\n        * 监听指定窗口 url 的 hash 变化，并触发一个回调函数。\r\n        * 已重载　onchange(window, fn);\r\n        * 已重载　onchange(window, immediate, fn);\r\n        * @param {Window} window 要监听的 window 窗口。\r\n        * @param {boolean} [immediate=false] 指示初始时是否要立即执行回调函数。\r\n            初始时如果要立即执行回调函数，请指定该参数为 true；\r\n            否则不指定或指定为 false。\r\n        * @param {function} fn 当监听窗口的 hash 发生变化时，要触发的回调函数。\r\n        *   该回调函数会接收到两个参数：hash 和 old，当前的 hash 值和旧的 hash 值。\r\n        *   注意，hash 和 old 都去掉了 '#' 号而直接保留 hash 值。\r\n        *   如果 old 不存在，则为 null。\r\n        *   该回调函数内部的 this 指向监听的窗口。\r\n        * @example\r\n            Hash.onchange(top, function (hash, old) {\r\n                console.log('new hash: ' + hash);\r\n                console.log('old hash: ' + old);\r\n                console.log(this === top); //true\r\n            });\r\n        */\r\n        onchange(window, immediate, fn) {\r\n            //重载 onchange(window, fn);\r\n            if (typeof immediate == 'function') {\r\n                fn = immediate;\r\n                immediate = false;\r\n            }\r\n    \r\n    \r\n            let hash = exports.get(window, '');\r\n    \r\n            //指定了要立即触发，则立即触发。\r\n            if (immediate) {\r\n                fn.call(window, hash, null, immediate);\r\n            }\r\n    \r\n    \r\n            window.addEventListener('hashchange', function () {\r\n                let old = hash;\r\n    \r\n                hash = exports.get(window, '');\r\n                fn && fn(hash, old, false);\r\n            });\r\n    \r\n        },\r\n    \r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/hash/Hash.js"
    },
    "IDMaker": {
        "id": "IDMaker",
        "name": "IDMaker",
        "names": [
            "IDMaker"
        ],
        "file": "temp/node_modules/@definejs/id-maker/modules/IDMaker.js",
        "ext": ".js",
        "package": {
            "alias": "id-maker",
            "name": "@definejs/id-maker",
            "version": "1.0.1"
        },
        "content": "/**\n* src: @definejs/id-maker/modules/IDMaker.js\n* pkg: @definejs/id-maker@1.0.1\n*/\ndefine('IDMaker', function (require, module, exports) { \n    \r\n    const $Object = require('Object');\r\n    const $String = require('String');\r\n    \r\n    const mapper = new Map();\r\n    const name$maker = {};\r\n    \r\n    \r\n    \r\n    class IDMaker {\r\n        \r\n        /**\r\n        * id 生成器的构造器。\r\n        * @param {string} name 命名空间的名称，用于跟其它实例区分。 同一个名称共用同一个实例。\r\n        * @returns {IDMaker} 返回指定命名空间的实例。\r\n        */\r\n        constructor(name, config) {\r\n            if (!name) {\r\n                throw new Error(`必须指定参数 name 为一个非空字符串。`);\r\n            }\r\n    \r\n            let maker = name$maker[name];\r\n    \r\n            if (maker) {\r\n                return maker;\r\n            }\r\n    \r\n            config = $Object.deepAssign({}, exports.defaults, config);\r\n    \r\n            let meta = {\r\n                'name': name,\r\n                'random': config.random,\r\n                'sample': config.sample,\r\n                'group$ids': {},\r\n            };\r\n    \r\n            mapper.set(this, meta);\r\n    \r\n            maker = name$maker[name] = this;\r\n            \r\n        }\r\n    \r\n        /**\r\n        * 获取（生成）指定分组的下一个递增 id。\r\n        * @param {string} [group] 可选，分组名称。 默认为空串。 \r\n        * @returns {string} 指定分组的 id。\r\n        */\r\n        next(group = '') {\r\n            let meta = mapper.get(this);\r\n            let { name, group$ids, random, sample, } = meta;\r\n            let ids = group$ids[group] = group$ids[group] || [];\r\n    \r\n            random = $String.random(random);\r\n            sample = sample[group ? 'group' : ''];\r\n    \r\n            let id = $String.format(sample, {\r\n                'name': name,\r\n                'group': group,\r\n                'index': ids.length, //会自动递增。 从 0 开始。\r\n                'random': random,\r\n            });\r\n    \r\n            ids.push(id);\r\n    \r\n            return id;\r\n    \r\n        }\r\n    \r\n        /**\r\n        * 获取指定分组的 id 的计数。\r\n        * @param {string} [group] 可选，分组名称。 默认为空串。\r\n        * @returns {number} 指定分组的 id 的计数。\r\n        */\r\n        list(group = '') {\r\n            let meta = mapper.get(this);\r\n            let ids = meta.group$ids[group];\r\n    \r\n            //如果有，则复制一份。\r\n            return ids ? ids.slice(0) : null;\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n    IDMaker.defaults = require('IDMaker.defaults');\r\n    module.exports = exports = IDMaker;\n});",
        "dest": "./output/definejs/src/@definejs/id-maker/IDMaker.js"
    },
    "IDMaker.defaults": {
        "id": "IDMaker.defaults",
        "name": "IDMaker.defaults",
        "names": [
            "IDMaker.defaults"
        ],
        "file": "temp/node_modules/@definejs/id-maker/modules/IDMaker.defaults.js",
        "ext": ".js",
        "package": {
            "alias": "id-maker",
            "name": "@definejs/id-maker",
            "version": "1.0.1"
        },
        "content": "/**\n* src: @definejs/id-maker/modules/IDMaker.defaults.js\n* pkg: @definejs/id-maker@1.0.1\n*/\ndefine('IDMaker.defaults', function (require, module, exports) { \n    \r\n    \r\n    /**\r\n    * IDMaker 模块的默认配置\r\n    * @name IDMaker.defaults\r\n    */\r\n    module.exports = {\r\n        /**\r\n        * 生成随机串部分的长度。\r\n        */\r\n        random: 4,\r\n    \r\n        /**\r\n        * 生成 id 的模板。\r\n        */\r\n        sample: {\r\n            /**\r\n            * 没有指定分组时的生成 id 的模板。\r\n            */\r\n            '': '{name}-{index}-{random}',\r\n    \r\n            /**\r\n            * 有指定分组时的生成 id 的模板。\r\n            */\r\n            'group': '{name}-{group}-{index}-{random}'\r\n        },\r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/id-maker/IDMaker.defaults.js"
    },
    "JSON": {
        "id": "JSON",
        "name": "JSON",
        "names": [
            "JSON"
        ],
        "file": "temp/node_modules/@definejs/json/modules/JSON.js",
        "ext": ".js",
        "package": {
            "alias": "json",
            "name": "@definejs/json",
            "version": "1.0.0"
        },
        "content": "/**\n* src: @definejs/json/modules/JSON.js\n* pkg: @definejs/json@1.0.0\n*/\ndefine('JSON', function (require, module, exports) { \n    \r\n    module.exports = {\r\n        /**\r\n        * 把一个 JSON 字符串数据解析成对象。\r\n        * @param {String} content 要解析的内容。\r\n        */\r\n        parse(content) {\r\n            try {\r\n                let obj = JSON.parse(content);\r\n                return obj;\r\n            }\r\n            catch (ex) {\r\n                // console.warn('使用原生的 JSON.parse() 方法无法解析:', content);\r\n                console.warn('使用原生的 JSON.parse() 方法无法解析。');\r\n            }\r\n    \r\n    \r\n            try {\r\n                //这种方法是 jQuery 的实现，有问题。\r\n                //content = content.replace(/^(\\r\\n)+/g, ' ');\r\n                //return (new Function('return ' + content))();\r\n    \r\n                //下面这方法安全、可靠些。\r\n                //包装多一层匿名立即执行函数。\r\n                let js = [\r\n                    'return (function () { ',\r\n                    '   var obj = ' + content + ';', //因为 return 的换行问题，这里用一个 obj 变量再返回 obj 会安全很多。\r\n                    '   return obj;',\r\n                    '})();',\r\n    \r\n                ].join('\\r\\n');\r\n    \r\n                let fn = new Function(js);\r\n                let obj = fn();\r\n    \r\n                return obj;\r\n            }\r\n            catch (ex) {\r\n                console.warn('使用 new Function() 方法无法解析。');\r\n            }\r\n    \r\n            return null;\r\n    \r\n        },\r\n    \r\n        /**\r\n        * 把一个对象解析成 JSON 字符串。\r\n        */\r\n        stringify(...args) {\r\n            return JSON.stringify(...args);\r\n        },\r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/json/JSON.js"
    },
    "Loading": {
        "id": "Loading",
        "name": "Loading",
        "names": [
            "Loading"
        ],
        "file": "temp/node_modules/@definejs/loading/modules/Loading.js",
        "ext": ".js",
        "package": {
            "alias": "loading",
            "name": "@definejs/loading",
            "version": "1.0.2"
        },
        "content": "/**\n* src: @definejs/loading/modules/Loading.js\n* pkg: @definejs/loading@1.0.2\n*/\ndefine('Loading', function (require, module, exports) { \n    const $ = require('jquery');\r\n    const $Object = require('Object');\r\n    const $String = require('String');\r\n    const Emitter = require('Emitter');\r\n    \r\n    //子模块\r\n    const Sample = module.require('Sample');\r\n    const Style = module.require('Style');\r\n    const Meta = module.require('Meta');\r\n    const Masker = module.require('Masker');\r\n    const Presettings = module.require('Presettings');\r\n    \r\n    const mapper = new Map();\r\n    \r\n    \r\n    class Loading {\r\n        /**\r\n        * 构造器。\r\n        */\r\n        constructor(options = {}) {\r\n            let presetting = Presettings[options.presetting] || {};     //预设方案。\r\n            let config = $Object.deepAssign({}, exports.defaults, presetting, options);   //合并预设配置。\r\n    \r\n            let emitter = new Emitter(this);        //事件驱动器。\r\n            let sample = Sample.get(config.sample); //加载相应的 HTML 模板。\r\n            let style = Style.get(config);          //从配置中过滤出样式成员，并进行规范化处理，style 是一个 {}。\r\n            let masker = Masker.create(config);     //\r\n    \r\n            let meta = Meta.create(config, {\r\n                'sample': sample,       //相应的 html 模板。\r\n                'style': style,         //从配置中过滤出样式成员，并进行规范化处理，style 是一个 {}。\r\n                'emitter': emitter,     //事件驱动器。\r\n                'masker': masker,       //遮罩层实例。\r\n                'this': this,           //当前实例，方便内部使用。\r\n            });\r\n    \r\n    \r\n            mapper.set(this, meta);\r\n    \r\n            //对外暴露的属性。\r\n            Object.assign(this, {\r\n                'id': meta.id,\r\n                '$': null,\r\n            });\r\n    \r\n        }\r\n    \r\n    \r\n        // /**\r\n        // * 当前实例的 id。\r\n        // * 也是最外层的 DOM 节点的 id。\r\n        // */\r\n        // id = '';\r\n    \r\n        // /**\r\n        // * 当前组件最外层的 DOM 节点对应的 jQuery 实例。\r\n        // * 必须在 render 之后才存在。\r\n        // */\r\n        // $ = null;\r\n    \r\n        /**\r\n        * 渲染本组件，生成 html 到容器 DOM 节点中。\r\n        * 该方法只需要调用一次。\r\n        * 触发事件: `render`。\r\n        */\r\n        render() {\r\n            let meta = mapper.get(this);\r\n    \r\n            //已经渲染过了。\r\n            if (meta.$) {\r\n                return;\r\n            }\r\n    \r\n    \r\n            let html = $String.format(meta.sample, {\r\n                'id': meta.id,\r\n                'text': meta.text,\r\n                'textId': meta.textId,\r\n                'cssClass': meta.cssClass,\r\n            });\r\n    \r\n            $(meta.container).append(html);\r\n    \r\n            meta.$ = this.$ = $(`#${meta.id}`);\r\n            meta.$text = $(`#${meta.textId}`);\r\n            meta.$.css(meta.style);\r\n            meta.emitter.fire('render');\r\n    \r\n        }\r\n    \r\n        /**\r\n        * 显示本组件。\r\n        * 已重载 show(text);       //显示指定的文本。\r\n        * 已重载 show(done);       //显示组件，完成后执行回调函数。 要显示的文本以创建实例时指定的为准。\r\n        * 已重载 show(text, done); //显示指定的文本，完成后执行回调函数。\r\n        * 参数：\r\n        *   text: '',       //要显示的文本。\r\n        *   done: fn,       //完成后回调函数。 须在创建实例时指定 `duration` 字段为大于 0 的值才起作用。 \r\n        */\r\n        show(text, done) {\r\n            //重载 show(done); \r\n            //不传入要显示的文本，以创建实例时指定的 text 为准。\r\n            if (typeof text == 'function') {\r\n                done = text;\r\n                text = undefined;\r\n            }\r\n    \r\n            let meta = mapper.get(this);\r\n            let masker = meta.masker;\r\n            let duration = meta.duration;\r\n    \r\n    \r\n            //首次 render。\r\n            if (!meta.$) {\r\n                this.render();\r\n            }\r\n    \r\n            if (masker) {\r\n                masker.show();\r\n            }\r\n    \r\n            if (typeof text == 'string') {\r\n                meta.text = text;\r\n                meta.$text.html(text);\r\n            }\r\n    \r\n    \r\n            if (duration) {\r\n                setTimeout(function () {\r\n                    meta.this.hide();\r\n                    done && done();\r\n                }, duration);\r\n            }\r\n    \r\n            meta.$.toggleClass('NoText', !meta.text);\r\n            meta.$.show();\r\n            meta.emitter.fire('show');\r\n    \r\n        }\r\n    \r\n        /**\r\n        * 隐藏本组件。\r\n        * 触发事件: `hide`。\r\n        */\r\n        hide() {\r\n            let meta = mapper.get(this);\r\n            let masker = meta.masker;\r\n    \r\n            if (!meta.$) {\r\n                return;\r\n            }\r\n    \r\n            masker && masker.hide();\r\n            meta.$.hide();\r\n            meta.emitter.fire('hide');\r\n        }\r\n    \r\n        /**\r\n        * 移除本组件已生成的 DOM 节点。\r\n        * 触发事件: `remove`。\r\n        */\r\n        remove() {\r\n            let meta = mapper.get(this);\r\n    \r\n            if (!meta.$) {\r\n                return;\r\n            }\r\n    \r\n            let div = meta.$.get(0);\r\n            let masker = meta.masker;\r\n    \r\n            div.parentNode.removeChild(div);\r\n            masker && masker.remove();\r\n    \r\n    \r\n            meta.$.off();\r\n    \r\n            meta.$ = this.$ = null;\r\n            meta.$text = null;\r\n            meta.masker = null;\r\n    \r\n            meta.emitter.fire('remove');\r\n        }\r\n    \r\n        /**\r\n        * 绑定事件。\r\n        */\r\n        on(...args) {\r\n            let meta = mapper.get(this);\r\n            meta.emitter.on(...args);\r\n        }\r\n    \r\n        /**\r\n        * 销毁本组件。\r\n        */\r\n        destroy() {\r\n            let meta = mapper.get(this);\r\n    \r\n            this.remove();\r\n            meta.emitter.destroy();\r\n    \r\n            mapper.remove(this);\r\n        }\r\n    \r\n    }\r\n    \r\n    Loading.defaults = require('Loading.defaults');\r\n    module.exports = exports = Loading;\n});",
        "dest": "./output/definejs/src/@definejs/loading/Loading.js"
    },
    "Loading.defaults": {
        "id": "Loading.defaults",
        "name": "Loading.defaults",
        "names": [
            "Loading.defaults"
        ],
        "file": "temp/node_modules/@definejs/loading/modules/Loading.defaults.js",
        "ext": ".js",
        "package": {
            "alias": "loading",
            "name": "@definejs/loading",
            "version": "1.0.2"
        },
        "content": "/**\n* src: @definejs/loading/modules/Loading.defaults.js\n* pkg: @definejs/loading@1.0.2\n*/\ndefine('Loading.defaults', function (require, module, exports) { \n    /**\r\n    * Loading 模块的默认配置\r\n    * @name Loading.defaults\r\n    */\r\n    module.exports = {\r\n        /**\r\n        * 生成组件时的 id 前缀。\r\n        * 建议保留现状。\r\n        */\r\n        idPrefix: 'definejs-Loading',\r\n        /**\r\n        * 加载中时要显示的文本。\r\n        */\r\n        text: '处理中...',\r\n        /**\r\n        * 是否启用 masker 层。\r\n        */\r\n        mask: false,\r\n        /**\r\n        * 组件用到的 html 模板。\r\n        * 默认为 'IOS'。 业务层不需要关注该字段。\r\n        */\r\n        sample: 'IOS',\r\n        /**\r\n        * 组件添加到的容器。\r\n        */\r\n        container: 'body',\r\n        /**\r\n        * 显示的持续时间(毫秒)。\r\n        * 0 表示一直显示。\r\n        */\r\n        duration: 0,\r\n        /**\r\n        * 组件用到的 css 类名。\r\n        */\r\n        cssClass: '',\r\n        /**\r\n        * 组件的 css 样式 z-index 值。\r\n        * 为了给其它组件计算 `z-index`，此处需要显式提供一个值。\r\n        * 因为仅用 css 中的会比较麻烦。\r\n        */\r\n        'z-index': 1024,\r\n        /**\r\n        * 组件宽度。\r\n        * 可以指定为百分比的字符串，或指定具体的数值（单位为像素），\r\n        */\r\n        width: '',\r\n        /**\r\n        * 组件高度。\r\n        * 可以指定为百分比的字符串，或指定具体的数值（单位为像素），\r\n        */\r\n        height: '',\r\n        /**\r\n        * 样式集合。\r\n        * 外层的同名字段优先级高于里面的。\r\n        */\r\n        style: {},\r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/loading/Loading.defaults.js"
    },
    "Loading/Masker": {
        "id": "Loading/Masker",
        "name": "Masker",
        "names": [
            "Loading",
            "Masker"
        ],
        "file": "temp/node_modules/@definejs/loading/modules/Loading/Masker.js",
        "ext": ".js",
        "package": {
            "alias": "loading",
            "name": "@definejs/loading",
            "version": "1.0.2"
        },
        "content": "/**\n* src: @definejs/loading/modules/Loading/Masker.js\n* pkg: @definejs/loading@1.0.2\n*/\ndefine('Loading/Masker', function (require, module, exports) { \n    const Masker = require('Masker');\r\n    \r\n    module.exports = {\r\n    \r\n        create(config) {\r\n            let defaults = {\r\n                'container': config.container,\r\n            };\r\n    \r\n            let options = Masker.normalize(defaults, config.mask); //返回一个 {} 或 null。\r\n    \r\n            if (!options) {\r\n                return null;\r\n            }\r\n    \r\n            let masker = new Masker(options);\r\n            let zIndex = config['z-index'] - 1;\r\n    \r\n            masker.on('render', function () {\r\n                masker.$.css({\r\n                    'z-index': zIndex,\r\n                });\r\n            });\r\n    \r\n            return masker;\r\n    \r\n        },\r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/loading/Loading/Masker.js"
    },
    "Loading/Meta": {
        "id": "Loading/Meta",
        "name": "Meta",
        "names": [
            "Loading",
            "Meta"
        ],
        "file": "temp/node_modules/@definejs/loading/modules/Loading/Meta.js",
        "ext": ".js",
        "package": {
            "alias": "loading",
            "name": "@definejs/loading",
            "version": "1.0.2"
        },
        "content": "/**\n* src: @definejs/loading/modules/Loading/Meta.js\n* pkg: @definejs/loading@1.0.2\n*/\ndefine('Loading/Meta', function (require, module, exports) { \n    \r\n    \r\n    const IDMaker = require('IDMaker');\r\n    \r\n    \r\n    module.exports = {\r\n        /**\r\n        * \r\n        */\r\n        create(config, others) {\r\n            let maker = new IDMaker(config.idPrefix);\r\n    \r\n            let meta = {\r\n                'id': maker.next(),\r\n                'textId': maker.next('text'),\r\n                'text': config.text || '',\r\n                'cssClass': config.cssClass || '',\r\n                'container': config.container,\r\n                'duration': config.duration || 0,\r\n    \r\n                'sample': '',\r\n                'masker': null,             // Masker 的实例，重复使用。\r\n                'style': null,              //样式对象。\r\n                'emitter': null,            //事件驱动器。\r\n                'this': null,               //当前实例，方便内部使用。\r\n                '$': null,                  //组件最外层的 DOM 节点的 jQuery 实例。\r\n                '$text': null,              //$(textId)。\r\n    \r\n            };\r\n    \r\n    \r\n    \r\n    \r\n            Object.assign(meta, others);\r\n    \r\n    \r\n            return meta;\r\n    \r\n    \r\n        },\r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/loading/Loading/Meta.js"
    },
    "Loading/Presettings": {
        "id": "Loading/Presettings",
        "name": "Presettings",
        "names": [
            "Loading",
            "Presettings"
        ],
        "file": "temp/node_modules/@definejs/loading/modules/Loading/Presettings.js",
        "ext": ".js",
        "package": {
            "alias": "loading",
            "name": "@definejs/loading",
            "version": "1.0.2"
        },
        "content": "/**\n* src: @definejs/loading/modules/Loading/Presettings.js\n* pkg: @definejs/loading@1.0.2\n*/\ndefine('Loading/Presettings', function (require, module, exports) { \n    \r\n    /**\r\n    * Loading 的预设配置。\r\n    */\r\n    module.exports = {\r\n        fullscreen: {\r\n            cssClass: 'FullScreen',\r\n        },\r\n    \r\n        'scroller.pulldown': {\r\n            sample: 'IOS',\r\n            cssClass: 'SameLine Pulldown',\r\n            text: '加载中...',\r\n    \r\n        },\r\n    \r\n        'scroller.pullup': {\r\n            sample: 'IOS',\r\n            cssClass: 'SameLine Pullup',\r\n            text: '加载中...',\r\n        },\r\n    };\r\n    \r\n    \n});",
        "dest": "./output/definejs/src/@definejs/loading/Loading/Presettings.js"
    },
    "Loading/Sample": {
        "id": "Loading/Sample",
        "name": "Sample",
        "names": [
            "Loading",
            "Sample"
        ],
        "file": "temp/node_modules/@definejs/loading/modules/Loading/Sample.js",
        "ext": ".js",
        "package": {
            "alias": "loading",
            "name": "@definejs/loading",
            "version": "1.0.2"
        },
        "content": "/**\n* src: @definejs/loading/modules/Loading/Sample.js\n* pkg: @definejs/loading@1.0.2\n*/\ndefine('Loading/Sample', function (require, module, exports) { \n    \r\n    \r\n    const name$sample = {\r\n        'IOS': `\r\n            <div id=\"{id}\" class=\"definejs-Loading-ios {cssClass}\" >\r\n                <div class=\"Main\">\r\n                    <div class=\"Item-0\"></div>\r\n                    <div class=\"Item-1\"></div>\r\n                    <div class=\"Item-2\"></div>\r\n                    <div class=\"Item-3\"></div>\r\n                    <div class=\"Item-4\"></div>\r\n                    <div class=\"Item-5\"></div>\r\n                    <div class=\"Item-6\"></div>\r\n                    <div class=\"Item-7\"></div>\r\n                    <div class=\"Item-8\"></div>\r\n                    <div class=\"Item-9\"></div>\r\n                    <div class=\"Item-10\"></div>\r\n                    <div class=\"Item-11\"></div>\r\n                </div>\r\n                <span id=\"{textId}\" class=\"Text\">{text}</span>\r\n            </div>\r\n        `,\r\n    };\r\n    \r\n    \r\n    /**\r\n    *\r\n    */\r\n    module.exports = {\r\n        \r\n        get: function (name) {\r\n            return name$sample[name] || '';\r\n        },\r\n    };\r\n    \r\n    \r\n    \r\n    \n});",
        "dest": "./output/definejs/src/@definejs/loading/Loading/Sample.js"
    },
    "Loading/Style": {
        "id": "Loading/Style",
        "name": "Style",
        "names": [
            "Loading",
            "Style"
        ],
        "file": "temp/node_modules/@definejs/loading/modules/Loading/Style.js",
        "ext": ".js",
        "package": {
            "alias": "loading",
            "name": "@definejs/loading",
            "version": "1.0.2"
        },
        "content": "/**\n* src: @definejs/loading/modules/Loading/Style.js\n* pkg: @definejs/loading@1.0.2\n*/\ndefine('Loading/Style', function (require, module, exports) { \n    \r\n    \r\n    const $Object = require('Object');\r\n    const Style = require('Style');\r\n    \r\n    \r\n    \r\n    module.exports = {\r\n        /**\r\n        * 从配置对象中过滤出样式成员，并进行规范化处理。\r\n        * 返回一个样式对象 {}。\r\n        */\r\n        get(config) {\r\n            let obj = $Object.filter(config, ['height', 'width', 'z-index']);\r\n            let style = Style.objectify(config.style);\r\n    \r\n            style = Style.merge(style, obj);\r\n            style = Style.pixelize(style, ['height', 'width',]);\r\n    \r\n            return style;\r\n    \r\n        },\r\n    \r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/loading/Loading/Style.js"
    },
    "LocalStorage": {
        "id": "LocalStorage",
        "name": "LocalStorage",
        "names": [
            "LocalStorage"
        ],
        "file": "temp/node_modules/@definejs/local-storage/modules/LocalStorage.js",
        "ext": ".js",
        "package": {
            "alias": "local-storage",
            "name": "@definejs/local-storage",
            "version": "1.0.0"
        },
        "content": "/**\n* src: @definejs/local-storage/modules/LocalStorage.js\n* pkg: @definejs/local-storage@1.0.0\n*/\ndefine('LocalStorage', function (require, module, exports) { \n    \r\n    const $Object = require('Object');\r\n    const Storage = module.require('Storage');\r\n    const mapper = new Map();\r\n    \r\n    /**\r\n    * 本地存储工具类。。\r\n    *\r\n    * localStorage 属性允许你访问一个 session Storage 对象。\r\n    * 它与 localStorage 相似，不同之处在于 localStorage 里面存储的数据没有过期时间设置，\r\n    * 而存储在 localStorage 里面的数据在页面会话结束时会被清除。\r\n    * 页面会话在浏览器打开期间一直保持，并且重新加载或恢复页面仍会保持原来的页面会话。\r\n    * 在新标签或窗口打开一个页面会初始化一个新的会话，这点和 session cookies 的运行方式不同。\r\n    * 应该注意的是，无论是 localStorage 还是 localStorage 中保存的数据都仅限于该页面的协议。\r\n    *\r\n    * 此处的 LocalStorage 设计理念为：\r\n    *   LocalStorage 是针对多个应用的存储，每个应用都有自己独立的存储空间。\r\n    *   使用之前，一个应用请先配置应用的名称(通过配置 `LocalStorage` 模块的 `name` 字段)。\r\n    *   为防止跟别的应用名称冲突，可以加一些随机数，如当前应用名称为 `kis-cloud`，则可以配置为 `kis-cloud-9DCA`。\r\n    *   通过应用的名称来区分每个应用的独立的存储空间。\r\n    *   在每个应用中，又可以创建多个 id 不同的 LocalStorage 的实例，每个 LocalStorage 实例都有自己的存储空间。\r\n    *   每个 LocalStorage 实例中可以储存不同的 key 和 value。\r\n    *   因此，从层级上来说，结构为：web 应用 -> LocalStorage 实例 -> 键值。\r\n    *\r\n    * @class\r\n    * @name LocalStorage\r\n    */\r\n    class LocalStorage {\r\n        /**\r\n        * 构造器。\r\n        *   id: '',         //当前 storage 实例的 id，拥有自己的存储空间。\r\n        *   config = {\r\n        *       name: '',   //必选，应用的名称。\r\n        *   };\r\n        */\r\n        constructor(id, config) {\r\n            config = $Object.deepAssign({}, exports.defaults, config);\r\n    \r\n            let name = config.name;\r\n    \r\n            if (!name) {\r\n                throw new Error(\r\n                    `@definejs/local-storage 是针对多个应用的存储，每个应用都有自己独立的存储空间。\r\n                    请先指定所在应用的名称(通过配置 @definejs/local-storage.defaults 模块的 name 字段) 。`\r\n                );\r\n            }\r\n    \r\n            let meta = {\r\n                'name': name,       //应用名称。\r\n                'id': id,           //\r\n            };\r\n    \r\n            mapper.set(this, meta);\r\n    \r\n        }\r\n    \r\n        /**\r\n        * 设置一对键值。\r\n        * 已重载 set(obj); 批量设置。\r\n        * 已重载 set(key, value); 单个设置。\r\n        * @param {string} key 要进行设置的键名称。\r\n        * @param value 要进行设置的值，可以是任何类型。\r\n        */\r\n        set(key, value) {\r\n            let meta = mapper.get(this);\r\n            let app = Storage.get(meta.name) || {}; //每次都实时从存储中获取。\r\n            let data = app[meta.id] || {};\r\n    \r\n            //重载 set({...}); 批量设置的情况。\r\n            if (typeof key == 'object') {\r\n                Object.assign(data, key);\r\n            }\r\n            else { //单个设置\r\n                data[key] = value;\r\n            }\r\n    \r\n            app[meta.id] = data;\r\n            Storage.set(meta.name, app);\r\n        }\r\n    \r\n        /**\r\n        * 根据给定的键获取关联的值。\r\n        * 已重载 get() 获取全部的情况。\r\n        * @param {string} [key] 要进行获取的键名称。\r\n        * @return 返回该键所关联的值。\r\n        */\r\n        get(key) {\r\n            let meta = mapper.get(this);\r\n            let app = Storage.get(meta.name) || {};   //每次都实时从存储中获取。\r\n            let data = app[meta.id];\r\n    \r\n            if (!data) {\r\n                return;\r\n            }\r\n    \r\n            //重载 get(); 获取全部的情况\r\n            if (arguments.length == 0) {\r\n                return data;\r\n            }\r\n    \r\n            //重载 get(key); 获取指定键的值。\r\n            return data[key];\r\n        }\r\n    \r\n        /**\r\n        * 移除给定的键所关联的项。\r\n        * @param {string} key 要进行移除的键名称。\r\n        */\r\n        remove(key) {\r\n            let meta = mapper.get(this);\r\n            let app = Storage.get(meta.name) || {}; //每次都实时从存储中获取。\r\n            let data = app[meta.id];\r\n    \r\n            if (!data) {\r\n                return;\r\n            }\r\n    \r\n            delete data[key];\r\n    \r\n            Storage.set(meta.name, app);\r\n        }\r\n    \r\n        /**\r\n        * 清空所有项。\r\n        */\r\n        clear() {\r\n            let meta = mapper.get(this);\r\n            let app = Storage.get(meta.name); //每次都实时从存储中获取。\r\n    \r\n            if (!app) {\r\n                return;\r\n            }\r\n    \r\n            delete app[meta.id];\r\n            Storage.set(meta.name, app);\r\n        }\r\n    }\r\n    \r\n    \r\n    LocalStorage.defaults = require('LocalStorage.defaults');\r\n    module.exports = exports = LocalStorage;\n});",
        "dest": "./output/definejs/src/@definejs/local-storage/LocalStorage.js"
    },
    "LocalStorage.defaults": {
        "id": "LocalStorage.defaults",
        "name": "LocalStorage.defaults",
        "names": [
            "LocalStorage.defaults"
        ],
        "file": "temp/node_modules/@definejs/local-storage/modules/LocalStorage.defaults.js",
        "ext": ".js",
        "package": {
            "alias": "local-storage",
            "name": "@definejs/local-storage",
            "version": "1.0.0"
        },
        "content": "/**\n* src: @definejs/local-storage/modules/LocalStorage.defaults.js\n* pkg: @definejs/local-storage@1.0.0\n*/\ndefine('LocalStorage.defaults', function (require, module, exports) { \n    \r\n    /**\r\n    * LocalStorage 模块的默认配置\r\n    * @name LocalStorage.defaults\r\n    */\r\n    module.exports = {\r\n        /**\r\n        * 应用的名称。\r\n        * 设定后即可创建与获取在该名称下的本地存储，从而避免跟其它应用的冲突。\r\n        */\r\n        name: '',\r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/local-storage/LocalStorage.defaults.js"
    },
    "LocalStorage/Storage": {
        "id": "LocalStorage/Storage",
        "name": "Storage",
        "names": [
            "LocalStorage",
            "Storage"
        ],
        "file": "temp/node_modules/@definejs/local-storage/modules/LocalStorage/Storage.js",
        "ext": ".js",
        "package": {
            "alias": "local-storage",
            "name": "@definejs/local-storage",
            "version": "1.0.0"
        },
        "content": "/**\n* src: @definejs/local-storage/modules/LocalStorage/Storage.js\n* pkg: @definejs/local-storage@1.0.0\n*/\ndefine('LocalStorage/Storage', function (require, module, exports) { \n    const CircularJSON = require('circular-json');\r\n    const storage = window.localStorage;\r\n    const key = `@definejs/local-storage`;\r\n    let json = storage.getItem(key) || '{}';    //全部数据的字符串形式。\r\n    let all = CircularJSON.parse(json) || {};        //全部数据的对象形式。  \r\n    \r\n    \r\n    //保存到浏览器层面的存储。\r\n    function save() {\r\n        json = CircularJSON.stringify(all);\r\n        storage.setItem(key, json);\r\n    }\r\n    \r\n    \r\n    module.exports = {\r\n        /**\r\n        * 设置一对键值。\r\n        * @param {string} key 要进行设置的键名称。\r\n        * @param value 要进行设置的值，可以是任何类型。\r\n        */\r\n        set(key, value) {\r\n            all[key] = value;\r\n            save();\r\n        },\r\n    \r\n        /**\r\n        * 根据给定的键获取关联的值。\r\n        * @param {string} key 要进行获取的键名称。\r\n        * @return 返回该键所关联的值。\r\n        */\r\n        get(key) {\r\n            return all[key];\r\n        },\r\n    \r\n        /**\r\n        * 移除给定的键所关联的项。\r\n        * @param {string} key 要进行移除的键名称。\r\n        */\r\n        remove(key) {\r\n            delete all[key];\r\n            save();\r\n        },\r\n    \r\n        /**\r\n        * 清空所有项。\r\n        */\r\n        clear() {\r\n            all = {};\r\n            save();\r\n        },\r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/local-storage/LocalStorage/Storage.js"
    },
    "Masker": {
        "id": "Masker",
        "name": "Masker",
        "names": [
            "Masker"
        ],
        "file": "temp/node_modules/@definejs/masker/modules/Masker.js",
        "ext": ".js",
        "package": {
            "alias": "masker",
            "name": "@definejs/masker",
            "version": "1.0.1"
        },
        "content": "/**\n* src: @definejs/masker/modules/Masker.js\n* pkg: @definejs/masker@1.0.1\n*/\ndefine('Masker', function (require, module, exports) { \n    \r\n    const $ = require('jquery');\r\n    const Emitter = require('Emitter');\r\n    const $Object = require('Object');\r\n    const $String = require('String');\r\n    const $Style = require('Style');\r\n    \r\n    const Sample = module.require('Sample');\r\n    const Style = module.require('Style');\r\n    const Meta = module.require('Meta');\r\n    \r\n    \r\n    const mapper = new Map();\r\n    \r\n    \r\n    class Masker {\r\n        /**\r\n        * 构造器。\r\n        */\r\n        constructor(config) {\r\n            config = $Object.deepAssign({}, exports.defaults, config);\r\n    \r\n            let emitter = new Emitter(this);\r\n            let style = Style.get(config);\r\n    \r\n            let meta = Meta.create(config, {\r\n                'sample': Sample,       //相应的 html 模板。\r\n                'style': style,         //从配置中过滤出样式成员，并进行规范化处理，style 是一个 {}。\r\n                'emitter': emitter,     //事件驱动器。\r\n                'this': this,           //当前实例，方便内部使用。\r\n            });\r\n    \r\n    \r\n            mapper.set(this, meta);\r\n    \r\n            //对外暴露的属性。\r\n            Object.assign(this, {\r\n                'id': meta.id,\r\n                '$': null,\r\n            });\r\n    \r\n        }\r\n    \r\n    \r\n        // /**\r\n        // * 当前实例的 id。\r\n        // * 也是最外层的 DOM 节点的 id。\r\n        // */\r\n        // id = '';\r\n    \r\n        // /**\r\n        // * 当前组件最外层的 DOM 节点对应的 jQuery 实例。\r\n        // * 必须在 render 之后才存在。\r\n        // */\r\n        // $ = null;\r\n    \r\n        /**\r\n        * 渲染本组件。\r\n        * 该方法会创建 DOM 节点，并且绑定事件，但没有调用 show()。\r\n        * 该方法只需要调用一次。\r\n        * 触发事件: `render`。\r\n        */\r\n        render() {\r\n            let meta = mapper.get(this);\r\n    \r\n            //已经渲染过了。\r\n            if (meta.$) {\r\n                return;\r\n            }\r\n    \r\n    \r\n            //首次渲染\r\n    \r\n            let style = $Style.stringify(meta.style);\r\n    \r\n            let html = $String.format(meta.sample, {\r\n                'id': meta.id,\r\n                'style': style,\r\n            });\r\n    \r\n    \r\n            $(meta.container).append(html);\r\n    \r\n            this.$ = meta.$ = $(`#${meta.id}`);\r\n    \r\n    \r\n            //根据是否指定了易消失来绑定事件，即点击 mask 层就隐藏。\r\n            meta.bindVolatile(function () {\r\n                let ok = meta.this.hide();\r\n    \r\n                //在 hide() 中明确返回 false 的，则取消关闭。\r\n                if (ok === false) {\r\n                    return;\r\n                }\r\n    \r\n                //先备份原来的 opacity\r\n                let opacity = meta.$.css('opacity');\r\n    \r\n                //显示一个完全透明的层 200ms，防止点透。\r\n                //并且禁用事件，避免触发 show 事件。\r\n                meta.$.css('opacity', 0);\r\n                meta.this.show({ quiet: true, });\r\n    \r\n                setTimeout(function () {\r\n                    meta.$.css('opacity', opacity);\r\n                    meta.$.hide();\r\n                }, 200);\r\n            });\r\n    \r\n            meta.emitter.fire('render');\r\n        }\r\n    \r\n        /**\r\n        * 显示遮罩层。\r\n        * 触发事件: `show`。\r\n        *   config = {\r\n        *       quiet: false,   //是否触发 `show` 事件。 该选项仅开放给组件内部使用。\r\n        *       duration: 0,    //要持续显示的时间，单位是毫秒。 如果不指定，则使用创建实例时的配置。\r\n        *       fadeIn: 200,    //可选。 需要淡入的动画时间，如果不指定或为指定为 0，则禁用淡入动画。\r\n        *   };\r\n        */\r\n        show(config = {}) {\r\n            let meta = mapper.get(this);\r\n            let duration = 'duration' in config ? config.duration : meta.duration;\r\n            let fadeIn = 'fadeIn' in config ? config.fadeIn : meta.fadeIn;\r\n    \r\n    \r\n            //尚未渲染。\r\n            //首次渲染。\r\n            if (!meta.$) {\r\n                this.render();\r\n            }\r\n    \r\n    \r\n            if (duration) {\r\n                setTimeout(function () {\r\n                    meta.this.hide();\r\n                }, duration);\r\n            }\r\n    \r\n    \r\n            if (fadeIn) {\r\n                meta.$.css('opacity', 0);\r\n            }\r\n    \r\n            meta.$.show();\r\n    \r\n            if (fadeIn) {\r\n                meta.$.animate({\r\n                    'opacity': meta.opacity,\r\n                }, fadeIn);\r\n            }\r\n    \r\n            //没有明确指定要使用安静模式，则触发事件。\r\n            if (!config.quiet) {\r\n                meta.emitter.fire('show');\r\n            }\r\n    \r\n        }\r\n    \r\n        /**\r\n        * 隐藏遮罩层。\r\n        * 触发事件: `hide`。\r\n        * 如果在 hide 事件中明确返回 false，则取消隐藏。\r\n        *   config = {\r\n        *       fadeOut: 200,    //可选。 需要淡出的动画时间，如果不指定或为指定为 0，则禁用淡出动画。\r\n        *   };\r\n        */\r\n        hide(config = {}) {\r\n            let meta = mapper.get(this);\r\n            let fadeOut = 'fadeOut' in config ? config.fadeOut : meta.fadeOut;\r\n    \r\n            //尚未渲染。\r\n            if (!meta.$) {\r\n                return;\r\n            }\r\n    \r\n            let values = meta.emitter.fire('hide');\r\n    \r\n            //明确返回 false 的，则取消关闭。\r\n            if (values.includes(false)) {\r\n                return false;\r\n            }\r\n    \r\n            if (fadeOut) {\r\n                meta.$.animate({\r\n                    'opacity': 0,\r\n                }, fadeOut, function () {\r\n                    meta.$.css('opacity', meta.opacity);\r\n                    meta.$.hide();\r\n                });\r\n            }\r\n            else {\r\n                meta.$.hide();\r\n            }\r\n        }\r\n    \r\n        /**\r\n        * 移除本组件已生成的 DOM 节点。\r\n        * 触发事件: `remove`。\r\n        */\r\n        remove() {\r\n            let meta = mapper.get(this);\r\n    \r\n            //尚未渲染。\r\n            if (!meta.$) {\r\n                return;\r\n            }\r\n    \r\n            let div = meta.$.get(0);\r\n            div.parentNode.removeChild(div);\r\n    \r\n            meta.$.off();\r\n    \r\n            this.$ = meta.$ = null;\r\n            meta.emitter.fire('remove');\r\n        }\r\n    \r\n        /**\r\n        * 绑定事件。\r\n        */\r\n        on(...args) {\r\n            let meta = mapper.get(this);\r\n            meta.emitter.on(...args);\r\n        }\r\n    \r\n        /**\r\n        * 销毁本组件\r\n        */\r\n        destroy() {\r\n            let meta = mapper.get(this);\r\n    \r\n            this.remove();\r\n            meta.emitter.destroy();\r\n    \r\n            mapper.delete(this);\r\n        }\r\n    \r\n    \r\n        /**\r\n        * 把配置参数规格化。\r\n        * 已重载 normalize(0, 0);              //任意一个为数字，则当成透明度。 如果都为数字，则使用后者的。   \r\n        * 已重载 normalize(defaults, false);   //第二个参数显式指定了要禁用 mask，返回 null。\r\n        * 已重载 normalize({}, {});\r\n        */\r\n        static normalize(defaults, config) {\r\n    \r\n            //第二个参数显式指定了要禁用 mask。\r\n            if (config === false) {\r\n                return null;\r\n            }\r\n    \r\n    \r\n            //输入的是数字，则当成是透明度。\r\n            if (typeof defaults == 'number') { //透明度\r\n                defaults = { 'opacity': defaults };\r\n            }\r\n    \r\n            if (typeof config == 'number') { //透明度\r\n                config = { 'opacity': config };\r\n            }\r\n    \r\n    \r\n            let type0 = typeof defaults;\r\n            let type1 = typeof config;\r\n    \r\n            if (type0 == 'object' && type1 == 'object') {\r\n                return Object.assign({}, defaults, config);\r\n            }\r\n    \r\n    \r\n            //显式指定使用 mask。\r\n            //如果 defaults 没有，则显式分配一个。\r\n            if (config === true) {\r\n                return !defaults || type0 != 'object' ? {} : defaults;\r\n            }\r\n    \r\n    \r\n            //未指定，则使用默认配置指定的，有或没有\r\n            if (config === undefined) {\r\n                return type0 == 'object' ? defaults :\r\n                    defaults ? {} : null;\r\n            }\r\n    \r\n            return type1 == 'object' ? config :\r\n                config ? {} : null;\r\n        }\r\n    }\r\n    \r\n    Masker.defaults = require('Masker.defaults');\r\n    module.exports = exports = Masker;\n});",
        "dest": "./output/definejs/src/@definejs/masker/Masker.js"
    },
    "Masker.defaults": {
        "id": "Masker.defaults",
        "name": "Masker.defaults",
        "names": [
            "Masker.defaults"
        ],
        "file": "temp/node_modules/@definejs/masker/modules/Masker.defaults.js",
        "ext": ".js",
        "package": {
            "alias": "masker",
            "name": "@definejs/masker",
            "version": "1.0.1"
        },
        "content": "/**\n* src: @definejs/masker/modules/Masker.defaults.js\n* pkg: @definejs/masker@1.0.1\n*/\ndefine('Masker.defaults', function (require, module, exports) { \n    \r\n    /**\r\n    * Masker 模块的默认配置\r\n    * @name Masker.defaults\r\n    */\r\n    module.exports = {\r\n        /**\r\n        * 生成组件时的 id 前缀。\r\n        * 建议保留现状。\r\n        */\r\n        idPrefix: 'definejs-Masker',\r\n        /**\r\n        * 指定是否易消失，即点击 mask 层就是否隐藏/移除。\r\n        * 可取值为: true|false|\"hide\"|\"remove\"，默认为 false，即不易消失。\r\n        */\r\n        volatile: false,\r\n        /**\r\n        * 组件添加到的容器。\r\n        */\r\n        container: 'body',\r\n        /**\r\n        * 点击时需要用到的事件名。\r\n        */\r\n        eventName: 'click',\r\n        /**\r\n        * 需要持续显示的毫秒数。\r\n        * 指定为 0 或不指定则表示一直显示。\r\n        */\r\n        duration: 0,\r\n        /**\r\n        * 显示时要使用淡入动画的时间。 \r\n        * 如果不指定或指定为 0，则禁用淡入动画。\r\n        */\r\n        fadeIn: 0,\r\n        /**\r\n        * 隐藏时要使用淡出动画的时间。 \r\n        * 如果不指定或指定为 0，则禁用淡出动画。\r\n        */\r\n        fadeOut: 0,\r\n        /**\r\n        * 组件用到的 css 类名。\r\n        */\r\n        cssClass: '',\r\n        /**\r\n        * 不透明度。\r\n        */\r\n        opacity: 0.5,\r\n        /**\r\n        * 组件的 css 样式 z-index 值。\r\n        */\r\n        'z-index': 1024,\r\n        /**\r\n        * 样式集合。\r\n        * 外层的同名字段优先级高于里面的。\r\n        */\r\n        style: {},\r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/masker/Masker.defaults.js"
    },
    "Masker/Meta": {
        "id": "Masker/Meta",
        "name": "Meta",
        "names": [
            "Masker",
            "Meta"
        ],
        "file": "temp/node_modules/@definejs/masker/modules/Masker/Meta.js",
        "ext": ".js",
        "package": {
            "alias": "masker",
            "name": "@definejs/masker",
            "version": "1.0.1"
        },
        "content": "/**\n* src: @definejs/masker/modules/Masker/Meta.js\n* pkg: @definejs/masker@1.0.1\n*/\ndefine('Masker/Meta', function (require, module, exports) { \n    const IDMaker = require('IDMaker');\r\n    \r\n    \r\n    \r\n    module.exports = {\r\n    \r\n        create(config, others) {\r\n            let maker = new IDMaker(config.idPrefix);\r\n            let eventName = config.eventName;\r\n            let volatile = config.volatile;\r\n    \r\n            let meta = {\r\n                'id': maker.next(),\r\n                'sample': '',\r\n                'eventName': eventName,         //兼容 PC 端和移动端。 PC 端的为 `click`，移动端的为 `touch`。\r\n                'volatile': volatile,           //是否易消失的。 即点击后自动隐藏。\r\n                'container': config.container,  //组件要装入的容器 DOM 节点。\r\n                'duration': config.duration,    //要持续显示的时间，单位是毫秒。\r\n                'fadeIn': config.fadeIn,        //显示时要使用淡入动画的时间。 如果不指定或指定为 0，则禁用淡入动画。\r\n                'fadeOut': config.fadeOut,      //隐藏时要使用淡出动画的时间。 如果不指定或指定为 0，则禁用淡出动画。\r\n                'opacity': config.opacity,      //不透明度。 在淡入淡出时要到进行计算。\r\n    \r\n                'emitter': null,    //事件驱动器。\r\n                'style': null,      //样式对象。\r\n                'this': null,       //当前实例，方便内部使用。\r\n                '$': null,          //组件最外层的 DOM 节点的 jQuery 实例。\r\n    \r\n                bindVolatile(fn) {\r\n                    if (!volatile) {\r\n                        return;\r\n                    }\r\n    \r\n                    if (eventName == 'touch') {\r\n                        meta.$.touch(fn);\r\n                    }\r\n                    else {\r\n                        meta.$.on(eventName, fn);\r\n                    }\r\n                },\r\n            };\r\n    \r\n    \r\n    \r\n            Object.assign(meta, others);\r\n    \r\n            return meta;\r\n    \r\n    \r\n        },\r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/masker/Masker/Meta.js"
    },
    "Masker/Sample": {
        "id": "Masker/Sample",
        "name": "Sample",
        "names": [
            "Masker",
            "Sample"
        ],
        "file": "temp/node_modules/@definejs/masker/modules/Masker/Sample.js",
        "ext": ".js",
        "package": {
            "alias": "masker",
            "name": "@definejs/masker",
            "version": "1.0.1"
        },
        "content": "/**\n* src: @definejs/masker/modules/Masker/Sample.js\n* pkg: @definejs/masker@1.0.1\n*/\ndefine('Masker/Sample', function (require, module, exports) { \n    \r\n    module.exports = `<div id=\"{id}\" class=\"definejs-Masker\" style=\"{style} display: none;\"></div>`;\n});",
        "dest": "./output/definejs/src/@definejs/masker/Masker/Sample.js"
    },
    "Masker/Style": {
        "id": "Masker/Style",
        "name": "Style",
        "names": [
            "Masker",
            "Style"
        ],
        "file": "temp/node_modules/@definejs/masker/modules/Masker/Style.js",
        "ext": ".js",
        "package": {
            "alias": "masker",
            "name": "@definejs/masker",
            "version": "1.0.1"
        },
        "content": "/**\n* src: @definejs/masker/modules/Masker/Style.js\n* pkg: @definejs/masker@1.0.1\n*/\ndefine('Masker/Style', function (require, module, exports) { \n    const $Object = require('Object');\r\n    const Style = require('Style');\r\n    \r\n    /**\r\n    *\r\n    */\r\n    module.exports = {\r\n        /**\r\n        * 从配置对象中过滤出样式成员，并进行规范化处理。\r\n        * 返回一个样式对象 {}。\r\n        */\r\n        get(config) {\r\n            let obj = $Object.filter(config, ['opacity', 'z-index']);\r\n            let style = Style.objectify(config.style);\r\n    \r\n            style = Style.merge(style, obj);\r\n    \r\n            return style;\r\n    \r\n        },\r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/masker/Masker/Style.js"
    },
    "Math": {
        "id": "Math",
        "name": "Math",
        "names": [
            "Math"
        ],
        "file": "temp/node_modules/@definejs/math/modules/Math.js",
        "ext": ".js",
        "package": {
            "alias": "math",
            "name": "@definejs/math",
            "version": "1.0.0"
        },
        "content": "/**\n* src: @definejs/math/modules/Math.js\n* pkg: @definejs/math@1.0.0\n*/\ndefine('Math', function (require, module, exports) { \n    \r\n    module.exports = exports = {\r\n        /**\r\n        * 产生指定闭区间的随机整数。\r\n        * @param {Number} [minValue=0] 闭区间的左端值。\r\n        *   当只指定一个参数时，minValue 默认为 0；\r\n        * @param {Number} [maxValue] 闭区间的右端值。\r\n        * @return 返回一个整数。\r\n        *   当不指定任何参数时，则用 Math.random() 产生一个已移除了小数点的随机整数。\r\n        * @example\r\n        *   $Math.randomInt(100, 200); //产生一个区间为 [100, 200] 的随机整数。\r\n        *   $Math.randomInt(100); //产生一个区间为 [0, 200] 的随机整数。\r\n        *   $Math.randomInt(); //产生一个随机整数。\r\n        */\r\n        randomInt(minValue, maxValue) {\r\n            let len = arguments.length;\r\n    \r\n            //重载 Math.randomInt()\r\n            if (len == 0) { \r\n                //先称除小数点，再去掉所有前导的 0，最后转为 number\r\n                return Number(String(Math.random()).replace('.', '').replace(/^0*/g, ''));\r\n            }\r\n    \r\n            //重载 Math.randomInt(maxValue)\r\n            if (len == 1) { \r\n                maxValue = minValue;\r\n                minValue = 0;\r\n            }\r\n    \r\n            let count = maxValue - minValue + 1;\r\n            return Math.floor(Math.random() * count + minValue);\r\n        },\r\n    \r\n        /**\r\n        * 圆形求模方法。\r\n        * 即用圆形链表的方式滑动一个数，返回一个新的数。\r\n        * 即可正可负的双方向求模。\r\n        * 可指定圆形链表的长度(size) 和滑动的步长(step)，滑动步长的正负号指示了滑动方向\r\n        */\r\n        slide(index, size, step) {\r\n            step = step || 1; //步长默认为1\r\n    \r\n            index += step;\r\n    \r\n            if (index >= 0) {\r\n                return index % size;\r\n            }\r\n    \r\n            return (size - (Math.abs(index) % size)) % size;\r\n        },\r\n    \r\n        /**\r\n        * 下一个求模数。\r\n        */\r\n        next(index, size) {\r\n            return exports.slide(index, size, 1);\r\n        },\r\n    \r\n        /**\r\n        * 上一个求模数。\r\n        */\r\n        previous(index, size) {\r\n            return exports.slide(index, size, -1);\r\n        },\r\n    \r\n    \r\n        /**\r\n        * 把一个含有百分号S的字符串解析成等值的小数。\r\n        * @param {String} v 要解析的参数。\r\n        *   期望得到 String 类型，实际可传任何类型。\r\n        * @return {Number} 返回一个小数。\r\n        *   只有参数是字符串，并且去掉前后空格后以百分号结尾才会进行转换；否则直接返回参数。\r\n        *   如果解析失败，则返回 NaN。\r\n        */\r\n        parsePercent(v) {\r\n            if (typeof v != 'string') {\r\n                return v;\r\n            }\r\n    \r\n            let s = v.trim();\r\n    \r\n            if (s.slide(-1) != '%') {\r\n                return v;\r\n            }\r\n    \r\n            return parseFloat(s) / 100;\r\n    \r\n        },\r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/math/Math.js"
    },
    "ModuleManager": {
        "id": "ModuleManager",
        "name": "ModuleManager",
        "names": [
            "ModuleManager"
        ],
        "file": "temp/node_modules/@definejs/module-manager/modules/ModuleManager.js",
        "ext": ".js",
        "package": {
            "alias": "module-manager",
            "name": "@definejs/module-manager",
            "version": "1.0.2"
        },
        "content": "/**\n* file: @definejs/module-manager/modules/ModuleManager.js\n* package: @definejs/module-manager@1.0.2\n*/\n$define('ModuleManager', function (require, module, exports) { \n    \r\n    const Module = module.require('Module');\r\n    \r\n    const mapper = new Map();\r\n    \r\n    let idCounter = 0;\r\n    \r\n    \r\n    class ModuleManager {\r\n        /**\r\n        * 构造器。\r\n        *   options = {\r\n        *       seperator: '/',     //模块 id 内的名称分隔符，如 `Users/List/API` 中的 `/`。\r\n        *       cross: false,       //是否允许跨级加载模块。\r\n        *       repeated: false,    //是否允许重复定义同一个 id 的模块。\r\n        *       Emitter: null,      //事件驱动器类。\r\n        *   };\r\n        */\r\n        constructor(options) {\r\n            let config = Object.assign({}, exports.defaults, options);\r\n            let Emitter = config.Emitter;\r\n            let emitter = Emitter ? new Emitter(this) : null;\r\n    \r\n            let id = `definejs-ModuleManager-${idCounter++}`;\r\n    \r\n            let meta = {\r\n                'id': id,                       //实例的 id，方便调试。\r\n                'id$module': {},                //\r\n                'id$data': {},                  //模块关联的自定义数据，仅供模块的工厂函数中内部使用。\r\n                'seperator': config.seperator,  //父子模块命名中的分隔符，如 `User/List/API`。\r\n                'cross': config.cross,          //是否允许跨级加载模块。\r\n                'repeated': config.repeated,    //是否允许重复定义模块。\r\n                'emitter': emitter,             //当前 `模块管理器` 的全局事件管理器。\r\n                'Emitter': Emitter,             //事件管理器构造器。 用于 define() 中，以便针对每个模块创建它私有的 emitter。\r\n                'this': this,                   //方便内部访问 this 对象。\r\n    \r\n                /**\r\n                * 用于给工厂函数加载公共模块。\r\n                * 同时限制为仅允许加载公共模块。\r\n                * 即 factory(require, module, exports){ } 中的第一个参数 `require`。\r\n                */\r\n                require(id) {\r\n                    return meta.this.require(id);\r\n                },\r\n    \r\n                /**\r\n                * 内部使用的，触发全局事件。\r\n                */\r\n                fire(...args) {\r\n                    emitter && emitter.fire(...args);\r\n                },\r\n    \r\n                /**\r\n                * 内部使用的，获取指定 id 对应的父模块对象。\r\n                * 如 `User/List/API` 的父模块 id 为 ``User/List`。\r\n                */\r\n                getParent(id) {\r\n                    let seperator = meta.seperator;\r\n                    let names = id.split(seperator);\r\n    \r\n                    //顶级模块。\r\n                    if (names.length == 1) {\r\n                        return null;\r\n                    }\r\n    \r\n                    //如 `Users/List`\r\n                    let pid = names.slice(0, -1).join(seperator);\r\n    \r\n                    return meta.id$module[pid] || null;\r\n                },\r\n    \r\n            };\r\n    \r\n            mapper.set(this, meta);\r\n    \r\n            Object.assign(this, {\r\n                'id': meta.id,\r\n            });\r\n    \r\n    \r\n            //全局地监听每个模块的首次加载事件。\r\n            this.on('require', function (id, module, exports) {\r\n                //触发被加载模块的首次加载事件。\r\n                module.fire('require', [exports]);\r\n    \r\n                //触发本级模块的事件。\r\n                //取它的父模块的事件管理器。\r\n                let parent = module.parent;\r\n    \r\n                if (parent) {\r\n                    parent.fire('require', module.name, [exports]);\r\n                }\r\n    \r\n            });\r\n    \r\n        }\r\n    \r\n        // /**\r\n        // * 实例的 id。\r\n        // */    \r\n        // id = ''\r\n    \r\n    \r\n        /**\r\n        * 设置指定模块关联的自定义数据。\r\n        * 模块关联的自定义数据仅供模块的工厂函数中内部使用。\r\n        * 即在 define(id, function(require, module, exports) {\r\n        *   var data = module.data;\r\n        * });\r\n        * @param {string} id 模块 id。\r\n        * @param {*} data 模块对应的自定义数据。\r\n        * @returns {*} 返回入参 data。\r\n        */\r\n        data(id, data) {\r\n            if (typeof id != 'string') {\r\n                throw new Error(`参数 id 为要设置的模块的 id，必须为 string 类型。`);\r\n            }\r\n    \r\n            let meta = mapper.get(this);\r\n            meta.id$data[id] = data;\r\n            return data;\r\n        }\r\n    \r\n        /**\r\n        * 定义一个模块。\r\n        * @param {string} id 模块的名称。\r\n        * @param {function|Object|Array} factory 模块的工厂函数或导出对象。\r\n        *   工厂函数原型为 factory(require, module, exports) { }\r\n        */\r\n        define(id, factory) {\r\n            if (typeof id != 'string') {\r\n                throw new Error(`参数 id 的类型必须为 string，当前为: ${typeof id}`);\r\n            }\r\n    \r\n            let meta = mapper.get(this);\r\n            let id$module = meta.id$module;\r\n    \r\n            if (!meta.repeated && id$module[id]) {\r\n                throw new Error(`配置设定了不允许定义重复的模块: 已存在名为 ${id} 的模块`);\r\n            }\r\n    \r\n            let Emitter = meta.Emitter;\r\n            let emitter = Emitter ? new Emitter() : null;\r\n            let name = id.split(meta.seperator).slice(-1)[0];      //取最项一项作为短名称，如 `API`。\r\n    \r\n            id$module[id] = {\r\n                'id': id,           //全名称，如 `Users/List/API`。\r\n                'name': name,       //短名称，如 `API`。 如果 name == id，则说明是顶级模块，即不含有 `/`。\r\n                'factory': factory, //原始的工厂函数或导出对象。\r\n                'emitter': emitter, //用于工厂函数第二个参数 `module` 的事件驱动器。\r\n    \r\n                //以下的在 require() 后肯定会给改写。\r\n                'parent': null,     //父级对象。 如果为空，则说明是顶级模块。\r\n                'required': false,  //指示是否已经 require 过。\r\n                'count': 0,         //require 的次数统计。\r\n    \r\n                //以下的在 require() 后可能会给改写。\r\n                'exports': null,    //最终的导出对象。 要么是 factory 本身，要么是 factory 运行后的结果。\r\n                'mod': null,        //工厂函数第二个参数 `module`。 如果工厂函数是一个直接导出对象，则它为空。\r\n    \r\n                //触发当前模块级别的事件。\r\n                fire() {\r\n                    emitter && emitter.fire(...arguments);\r\n                },\r\n    \r\n            };\r\n        }\r\n    \r\n        /**\r\n        * 加载指定的模块。\r\n        * @param {string} id 模块的名称。\r\n        * @param {boolean} cross 是否允许跨级加载模块。\r\n        *   如果不指定，则根据创建实例时指定的 cross 来决定。\r\n        * @return 返回指定的模块的导出对象。\r\n        */\r\n        require(id, cross) {\r\n            if (typeof id != 'string') {\r\n                throw new Error(`参数 id 的类型必须为 string，当前为: ${typeof id}`);\r\n            }\r\n    \r\n            let meta = mapper.get(this);\r\n            let seperator = meta.seperator;\r\n    \r\n    \r\n            //未指定，则使用创建实例时的配置。\r\n            if (cross === undefined) {\r\n                cross = meta.cross;\r\n            }\r\n    \r\n    \r\n            if (!cross && id.includes(seperator)) {\r\n                throw new Error(`参数指定了或配置设定了不允许跨级加载模块: ${id}`);\r\n            }\r\n    \r\n            //不存在该模块。\r\n            if (!this.has(id)) {\r\n                return;\r\n            }\r\n    \r\n            let id$module = meta.id$module;\r\n            let module = id$module[id];\r\n    \r\n            //加载次数累计。\r\n            module.count++;\r\n    \r\n    \r\n            //已经加载过了。\r\n            if (module.required) {\r\n                return module.exports;\r\n            }\r\n    \r\n            //==============================================================================\r\n            //首次加载。\r\n            module.required = true; //更改标志，指示已经 require 过一次。\r\n    \r\n            let factory = module.factory;\r\n            let parent = module.parent = meta.getParent(id);\r\n    \r\n            //非工厂函数，则直接导出。\r\n            if (typeof factory != 'function') {\r\n                module.exports = factory;\r\n                meta.fire('require', id, [module, factory]);\r\n                meta.fire('require', [id, module, factory]);\r\n                return factory;\r\n            }\r\n    \r\n            //--------------------------------------------------------------------------------\r\n            //factory 是个工厂函数。\r\n    \r\n            //同时也要赋值给 module.exports，针对两个模块间的循环 require 时用到。\r\n            //因为此时在 factory 中会提前用到 exports。\r\n            let exports = module.exports = {};\r\n    \r\n            //mod 就是工厂函数 factory(require, module, exports) 中的第二个参数啦。\r\n            let mod = module.mod = new Module(id, {\r\n                'seperator': seperator,\r\n                'mm': this,\r\n                'emitter': module.emitter,\r\n    \r\n                //会扩展到 mod 的属性。\r\n                'data': meta.id$data[id],\r\n                'exports': exports,                     //模块的导出对象。\r\n                'parent': parent ? parent.mod : null,   //父模块实例。\r\n            });\r\n    \r\n            //调用工厂函数获得导出对象。\r\n            exports = factory(meta.require, mod, exports);\r\n    \r\n            //没有通过 return 来返回值，则要导出的值只能在 mod.exports 里。\r\n            if (exports === undefined) {\r\n                exports = mod.exports;\r\n            }\r\n    \r\n            //这条是必须的。 因为 factory() 可能返回了一个新的导出对象。\r\n            module.exports = exports;\r\n    \r\n            //这条，给提供业务层提供方便。\r\n            //即使业务层是通过 return 来返回导出对象，\r\n            //导出对象各成员函数之间依然可以通过 `module.exports.xx` 来引用其它的成员。\r\n            mod.exports = exports;\r\n    \r\n            meta.fire('require', id, [module, exports]);\r\n            meta.fire('require', [id, module, exports]);\r\n    \r\n            return exports;\r\n        }\r\n    \r\n        /**\r\n        * 绑定事件。\r\n        */\r\n        on(...args) {\r\n            let meta = mapper.get(this);\r\n            let emitter = meta.emitter;\r\n    \r\n            emitter && emitter.on(...args);\r\n        }\r\n    \r\n        /**\r\n        * 判断指定的模块是否已定义。\r\n        */\r\n        has(id) {\r\n            let meta = mapper.get(this);\r\n            let id$module = meta.id$module;\r\n    \r\n            return id$module.hasOwnProperty(id);\r\n        }\r\n    \r\n        /**\r\n        * 销毁本实例。\r\n        */\r\n        destroy() {\r\n            let meta = mapper.get(this);\r\n            let emitter = meta.emitter;\r\n    \r\n            emitter && emitter.destroy();\r\n            mapper.delete(this);\r\n        }\r\n    \r\n    \r\n    }\r\n    \r\n    ModuleManager.defaults = require('ModuleManager.defaults');\r\n    module.exports = exports = ModuleManager;\n});\n",
        "dest": "./output/definejs/src/@definejs/module-manager/ModuleManager.js"
    },
    "ModuleManager.defaults": {
        "id": "ModuleManager.defaults",
        "name": "ModuleManager.defaults",
        "names": [
            "ModuleManager.defaults"
        ],
        "file": "temp/node_modules/@definejs/module-manager/modules/ModuleManager.defaults.js",
        "ext": ".js",
        "package": {
            "alias": "module-manager",
            "name": "@definejs/module-manager",
            "version": "1.0.2"
        },
        "content": "/**\n* file: @definejs/module-manager/modules/ModuleManager.defaults.js\n* package: @definejs/module-manager@1.0.2\n*/\n$define('ModuleManager.defaults', function (require, module, exports) { \n    /**\r\n    * ModuleManager 的默认配置。\r\n    * @name ModuleManager.defaults\r\n    */\r\n    module.exports = {\r\n        Emitter: null,      //事件驱动器类。\r\n        seperator: '/',     //模块 id 内的名称分隔符，如 `Users/List/API`。\r\n        cross: false,       //是否允许跨级加载模块。\r\n        repeated: false,    //是否允许重复定义同一个 id 的模块。\r\n    };\r\n    \r\n    \n});\n",
        "dest": "./output/definejs/src/@definejs/module-manager/ModuleManager.defaults.js"
    },
    "ModuleManager/Module": {
        "id": "ModuleManager/Module",
        "name": "Module",
        "names": [
            "ModuleManager",
            "Module"
        ],
        "file": "temp/node_modules/@definejs/module-manager/modules/ModuleManager/Module.js",
        "ext": ".js",
        "package": {
            "alias": "module-manager",
            "name": "@definejs/module-manager",
            "version": "1.0.2"
        },
        "content": "/**\n* file: @definejs/module-manager/modules/ModuleManager/Module.js\n* package: @definejs/module-manager@1.0.2\n*/\n$define('ModuleManager/Module', function (require, module, exports) { \n    \r\n    const mapper = new Map();\r\n    \r\n    class Module {\r\n        /**\r\n        * 构造器。\r\n        *   id: '',     //模块 id，`Users/List/API`。\r\n        *   config = {\r\n        *       seperator: '',  //分隔符，如 `/`。\r\n        *       mm: null,       //模块管理器 ModuleManager 的实例。\r\n        *       emitter: null,  //事件驱动器实例。\r\n        *\r\n        *       //会扩展到 this 的成员。\r\n        *       exports: {},    //导出对象。\r\n        *       parent: null,   //父模块。 也是 Module 实例。\r\n        *   };\r\n        *\r\n        */\r\n        constructor(id, config) {\r\n            let seperator = config.seperator;\r\n            let names = id.split(seperator);    //全部名称的数组。\r\n            let name = names.slice(-1)[0];      //短名称，如 `API`。\r\n            let parent = config.parent;\r\n    \r\n            if (parent) {\r\n                //在一个模块的工厂函数里：\r\n                //防止通过 module.parent.require(...) 来加载它的兄弟模块。\r\n                //仅允许通过 module.require(...) 来加载自己的直接子模块。\r\n                //如当前模块为 `Users/List/API`，它的父模块则为 `Users/List`，\r\n                //假如它还有个兄弟(同级)模块 `Users/List/Loading`，\r\n                //则不允许 `API` 模块通过它的父模块来加载同级模块 `Loading`。\r\n                //parent.require = function (name) {\r\n                //    throw new Error(`禁止通过父模块来加载同级模块：模块 ${id} 尝试加载同级模块 ${name}。`);\r\n                //};\r\n    \r\n                parent = Object.create(parent, {\r\n                    require: {\r\n                        value: function (name) {\r\n                            throw new Error(`禁止通过父模块来加载同级模块：模块 ${id} 尝试加载同级模块 ${name}。`);\r\n                        },\r\n                    },\r\n                });\r\n            }\r\n    \r\n    \r\n            //内部方法使用的字段。\r\n            //安全起见，不使用暴露给外面的的那份，防止调用方恶意去改。\r\n            let meta = {\r\n                'id': id,                   //模块 id，`Users/List/API`。\r\n                'seperator': seperator,     //上下级模块名称的分隔符，如 `/`。\r\n                'emitter': config.emitter,  //事件驱动器。 可以为空。\r\n                'mm': config.mm,            //所属的模块管理器。\r\n                'this': this,               //方便访问自己。\r\n            };\r\n    \r\n            mapper.set(this, meta);\r\n    \r\n    \r\n            //暴露给外部使用的属性。\r\n            Object.assign(this, {\r\n                'id': id,\r\n                'name': name,\r\n                'names': names,\r\n                'seperator': seperator,\r\n    \r\n                //扩展到 this 的成员。\r\n                'data': config.data,        //关联的自定义数据。\r\n                'exports': config.exports,  //模块的导出对象。\r\n                'parent': parent,           //父模块。\r\n            });\r\n        }\r\n    \r\n        // id = '';            //模块的 id，如 `Users/List/API`。\r\n        // name = '';          //模块的(短)名称，如 `API`。\r\n        // seperator = '';     //模块 id 中的分隔符，如 `/`。 \r\n        // exports = null;     //模块的导出对象。\r\n        // parent = null;      //父模块。\r\n        // data = null;        //关联的自定义数据。\r\n    \r\n        \r\n    \r\n        /**\r\n        * 在当前模块上绑定事件。\r\n        */\r\n        on(...args) {\r\n            let meta = mapper.get(this);\r\n            let emitter = meta.emitter;\r\n    \r\n            emitter && emitter.on(...args);\r\n        }\r\n    \r\n        /**\r\n        * 加载直接子模块。\r\n        * 即工厂函数 factory(require, module, exports) {} 中的第二个参数要用到的方法如：\r\n        *   var Helper = module.require('Helper');\r\n        * @param {string} name 直接下级模块的短名称。\r\n        *   注意：短名称中不允许包含分隔符，如 `/`。\r\n        */\r\n        require(name) {\r\n            let meta = mapper.get(this);\r\n            let seperator = meta.seperator;\r\n            let id = meta.id + seperator + name;    //完整名称，如 `Users/List/API/Helper`。\r\n    \r\n            if (name.includes(seperator)) {\r\n                throw new Error(`模块 ${meta.id} 不允许跨级加载模块: ${id}`);\r\n            }\r\n    \r\n    \r\n            //允许模块管理器跨级加载模块。\r\n            let exports = meta.mm.require(id, true);\r\n    \r\n            return exports;\r\n        }\r\n    \r\n        /**\r\n        * 在首次 require 子模块时，绑定该子模块上的事件。\r\n        * 已重载 bind(name$events);    //批量绑定多个子模块对应的多个事件。\r\n        * 已重载 bind(name, events);   //单个绑定指定子模块对应的多个事件。\r\n        * @param {string} name (直接)子模块的短名称。\r\n        * @param {object} events 由事件名称作为键，处理函数作为值组成的键值对对象。\r\n        */\r\n        bind(name, events) {\r\n            //把单个绑定和批量绑定统一形式。\r\n            let name$events = typeof name == 'object' ? name : { [name]: events, };\r\n            let meta = mapper.get(this);\r\n    \r\n            Object.keys(name$events).forEach(function (name) {\r\n                let events = name$events[name];\r\n    \r\n                let fn = (typeof events == 'function') ? events : function (M) {\r\n                    M.on(events);\r\n                };\r\n    \r\n                //当前模块加载子模块时触发。\r\n                //如当前模块为 `Users/List/API`，子模块为 `Helper`，\r\n                //在加载该子模块时，绑定 `Helper` 的抛出来的事件。\r\n                meta.this.on('require', name, fn);\r\n            });\r\n    \r\n        }\r\n    \r\n    \r\n    \r\n        /**\r\n        * 加载指定的子模块并调用 render() 方法，可向其传递一些参数。\r\n        * @param {string} name 要加载的子模块名称。\r\n        * @return {Object} 返回加载到的子模块实例。\r\n        */\r\n        render(name, ...args) {\r\n            let M = this.require(name);\r\n    \r\n            if (!M) {\r\n                throw new Error(`模块 ${meta.id} 不存在名为 ${name} 的直接子模块`);\r\n            }\r\n    \r\n            M.render(...args);\r\n            return M;\r\n        }\r\n    \r\n    \r\n    }\r\n    \r\n    module.exports = Module;\n});\n",
        "dest": "./output/definejs/src/@definejs/module-manager/ModuleManager/Module.js"
    },
    "Navigator": {
        "id": "Navigator",
        "name": "Navigator",
        "names": [
            "Navigator"
        ],
        "file": "temp/node_modules/@definejs/navigator/modules/Navigator.js",
        "ext": ".js",
        "package": {
            "alias": "navigator",
            "name": "@definejs/navigator",
            "version": "1.0.0"
        },
        "content": "/**\n* src: @definejs/navigator/modules/Navigator.js\n* pkg: @definejs/navigator@1.0.0\n*/\ndefine('Navigator', function (require, module, exports) { \n    \r\n    /**\r\n    * 基于浏览器地址栏 hash 的状态导航器。\r\n    * @class\r\n    * @name Navigator\r\n    */\r\n    \r\n    const $String = require('String');\r\n    const Emitter = require('Emitter');\r\n    \r\n    //子模块。\r\n    const Back = module.require('Back');\r\n    const Meta = module.require('Meta');\r\n    const Hash = module.require('Hash');\r\n    const Infos = module.require('Infos');\r\n    const Router = module.require('Router');\r\n    const Storage = module.require('Storage');\r\n    \r\n    \r\n    const mapper = new Map();\r\n    \r\n    \r\n    /**\r\n    * 构造器。\r\n    * 已重载 Navigator(config);\r\n    * 已重载 Navigator(id, config);\r\n    */\r\n    function Navigator(id, config) {\r\n        if (typeof id == 'object') {\r\n            config = id;\r\n        }\r\n        else {\r\n            config = Object.assign({ 'id': id, }, config);\r\n        }\r\n    \r\n    \r\n        config = Object.assign({}, exports.defaults, config);\r\n    \r\n        let emitter = new Emitter(this);\r\n        let router = Router.create();\r\n        let storage = Storage.create(config);\r\n    \r\n    \r\n        let meta = Meta.create(config, {\r\n            'emitter': emitter,\r\n            'router': router,\r\n            'storage': storage,\r\n            'this': this,\r\n        });\r\n    \r\n        mapper.set(this, meta);\r\n    \r\n    \r\n        Object.assign(this, {\r\n            'id': meta.id,\r\n            // '_meta': meta,   //暂时暴露。\r\n        });\r\n    \r\n        //是否启用模拟传统多页面的路由转换器。\r\n        if (config.simulate) {\r\n            this.route(Navigator.simulate);\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n    Navigator.prototype = {\r\n        constructor: Navigator,\r\n    \r\n        /**\r\n        * 当前实例 id。\r\n        */\r\n        id: '',\r\n    \r\n        /**\r\n        * 渲染。\r\n        * 启用并开始 hash 监听。\r\n        */\r\n        render() {\r\n            var meta = mapper.get(this);\r\n    \r\n            //自动启用。\r\n            this.enable(true);\r\n    \r\n            if (!meta.rendered) {\r\n                Hash.init(meta);\r\n            }\r\n        },\r\n    \r\n        /**\r\n        * 设置 hash 与 view 的路由关系。\r\n        * 即 hash 与 view 之间的映射转换关系。\r\n        *   options = {\r\n        *       静态如果明确指定为 null，则清空之前的。\r\n        *       否则，合并覆盖。\r\n        *       view$hash: {},\r\n        *       hash$view: {},\r\n        *\r\n        *       //视图到 hash 的转换函数。 \r\n        *       //在调用 to() 方法时会先调用此函数。 \r\n        *       //如 `UserList` -> `/user-list.html`。\r\n        *       //该函数会接收到参数: view，传入的视图名，如 `UserList`。 \r\n        *       //该函数应该返回要生成的 hash 值，如 `/user-list.html`。\r\n        *       toHash(view) { },\r\n        *\r\n        *       //hash 到视图的转换函数。 \r\n        *       //在触发某个事件时，会把相应的 hash 作转换，以还原回原来的视图名。 \r\n        *       //如 `/user-list.html` -> `UserList`\r\n        *       //该函数会接收到参数: hash，地址栏中的 hash 值，如 `/user-list.html`。 \r\n        *       //该函数应该返回要还原的视图名，如 `UserList`。\r\n        *       toView(hash) { },\r\n        *   };\r\n        */\r\n        route(options) {\r\n            let meta = mapper.get(this);\r\n            let router = meta.router;\r\n            let view$hash = options.view$hash;\r\n            let hash$view = options.hash$view;\r\n            let toHash = options.toHash;\r\n            let toView = options.toView;\r\n    \r\n            //如果明确指定为 null，则清空之前的。\r\n            //否则，合并覆盖。\r\n            if (hash$view === null) {\r\n                router.hash$view = {};\r\n            }\r\n            else {\r\n                Object.assign(router.hash$view, hash$view);\r\n            }\r\n    \r\n            if (view$hash === null) {\r\n                router.view$hash = {};\r\n            }\r\n            else {\r\n                Object.assign(router.view$hash, view$hash);\r\n            }\r\n    \r\n    \r\n            if (typeof toHash == 'function') {\r\n                router.view2hash = toHash;\r\n            }\r\n    \r\n            if (typeof toView == 'function') {\r\n                router.hash2view = toView;\r\n            }\r\n    \r\n        },\r\n    \r\n        /**\r\n        * 跳转到新视图，并传递一些参数。\r\n        * @return {Object} 返回目标视图信息。\r\n        */\r\n        to(view, ...args) {\r\n            if (typeof view != 'string') {\r\n                throw new Error('参数 name 必须为 string 类型。');\r\n            }\r\n    \r\n    \r\n            let meta = mapper.get(this);\r\n            let emitter = meta.emitter;\r\n            let current = meta.hash$info[meta.hash];    //跳转之前，原来的 hash 对应的视图信息。\r\n            let target = Infos.set(meta, view, args);   //\r\n    \r\n    \r\n            //已禁用。\r\n            if (!meta.enabled) {\r\n                return target;\r\n            }\r\n    \r\n    \r\n            if (target.hash != meta.hash) {\r\n                meta.fireEvent = false;\r\n                Hash.set(target.hash);\r\n            }\r\n    \r\n            let cache = false;\r\n    \r\n            //优先用指定的。\r\n            if ('cache' in target) {\r\n                cache = target.cache;\r\n                delete target.cache;    //一次性的，用完即删。\r\n            }\r\n    \r\n    \r\n            if (current) {\r\n                emitter.fire('to', [current.view, view, {\r\n                    'cache': cache,\r\n                    'current': current,\r\n                    'target': target,\r\n                }]);\r\n            }\r\n    \r\n            //此处的 target 必不为空。\r\n            emitter.fire('view', [view, args, {\r\n                'cache': cache,\r\n                'current': current,\r\n                'target': target,\r\n            }]);\r\n    \r\n            if (current) {\r\n                emitter.fire('forward', [current.view, view]);\r\n            }\r\n    \r\n            return target;\r\n    \r\n        },\r\n    \r\n        /**\r\n        * 后退。\r\n        * 已重载 back();           //只回退一步，且触发事件。\r\n        * 已重载 back(fireEvent);  //只回退一步，且指定是否触发事件。\r\n        * 已重载 back(step);       //回退到指定的步数，且触发事件。\r\n        * 已重载 back(target);     //回退指定的视图，且触发事件。\r\n        * 已重载 back(options);    //更多配置。\r\n        *   options = {\r\n        *       fireEvent: true,    //是否触发事件。\r\n        *       target: 1,          //后退的步数，只能是正数。\r\n        *       target: '',         //后退的目标视图名。\r\n        *\r\n        *       //后退到目标视图，是否要禁用缓存。 \r\n        *       //如果指定为 false，则目标视图会强制刷新。 \r\n        *       //该字段是一次性的，只针对本次后退有效。\r\n        *       cache: false,\r\n        *   };\r\n        */\r\n        back(options) {\r\n            switch (typeof options) {\r\n                case 'boolean':\r\n                    options = { 'fireEvent': options, };\r\n                    break;\r\n    \r\n                case 'number':\r\n                case 'string':\r\n                    options = { 'target': options, };\r\n                    break;\r\n    \r\n                default:\r\n                    options = options || {};\r\n            }\r\n    \r\n            let meta = mapper.get(this);\r\n            let offset = Back.getOffset(meta, options.target);  //为负数。\r\n            let fireEvent = options.fireEvent;\r\n            let cache = options.cache;\r\n            let target = this.get(offset);\r\n    \r\n    \r\n            meta.fireEvent = fireEvent === undefined ? true : !!fireEvent;  //如果未指定，则为 true。\r\n    \r\n            if (target && typeof cache == 'boolean') {\r\n                target.cache = cache;\r\n            }\r\n    \r\n            history.go(offset);\r\n    \r\n            return target;\r\n        },\r\n    \r\n        /**\r\n        * 获取指定的目标视图信息。\r\n        * 已重载 get();        //获取全部视图信息，返回一个数组，按时间升序排序。\r\n        * 已重载 get(offset);  //获取指定偏移位置的目标视图信息，返回一个对象。\r\n        * 已重载 get(view);    //获取指定视图名称的目标视图信息，返回一个对象。\r\n        * 参数：\r\n        *   view: '',   //目标视图名称。\r\n        *   offset: 0,  //当前视图的偏移量为 0，比当前视图时间更早的，则为负数；否则为正数。\r\n        */\r\n        get(view) {\r\n            let meta = mapper.get(this);\r\n            return Infos.get(meta, view);\r\n        },\r\n    \r\n    \r\n        /**\r\n        * 清空缓存和地址栏中的 hash。\r\n        */\r\n        clear() {\r\n            let meta = mapper.get(this);\r\n    \r\n            if (meta.storage) {\r\n                meta.storage.clear();\r\n            }\r\n    \r\n            meta.fireEvent = false;\r\n            meta.hash$info = {};\r\n            Hash.set('');\r\n            meta.fireEvent = true;\r\n    \r\n        },\r\n    \r\n        /**\r\n        * 除了指定的视图信息，其它的全清除。\r\n        */\r\n        reserve(view) {\r\n            let meta = mapper.get(this);\r\n            let hash = meta.router.toHash(view);\r\n            let info = meta.hash$info[hash];\r\n    \r\n            meta.hash$info = {\r\n                [hash]: info,\r\n            };\r\n    \r\n            if (meta.storage) {\r\n                meta.storage.set('hash$info', meta.hash$info);\r\n            }\r\n        },\r\n    \r\n        /**\r\n        * 设置启用或禁用。\r\n        */\r\n        enable(enabled) {\r\n            let meta = mapper.get(this);\r\n            meta.enabled = !!enabled;\r\n        },\r\n    \r\n        /**\r\n        * 绑定事件。\r\n        */\r\n        on(...args) {\r\n            let meta = mapper.get(this);\r\n            meta.emitter.on(...args);\r\n        },\r\n    \r\n    };\r\n    \r\n    \r\n    //静态成员。\r\n    \r\n    Object.assign(Navigator, {\r\n        /**\r\n        * 默认配置。\r\n        */\r\n        defaults: require('Navigator.defaults'),\r\n    \r\n        /**\r\n        * 提供一种常用的模拟传统多页面的路由转换器。\r\n        * 设置 hash 与 view 的双向映射转换关系。\r\n        * 如 `AccountUsers` <-> `/account-users.html`。\r\n        */\r\n        simulate: {\r\n            //把 view 转成 hash。\r\n            toHash(view) {\r\n                if (!view) {\r\n                    return view;\r\n                }\r\n    \r\n                view = $String.toHyphenate(view);   // `AccountUsers` -> `-account-users`。\r\n                view = view.slice(1);               //`-account-users` -> `account-users`。\r\n                view = `/${view}.html`;             //`account-users` -> `/account-users.html`。\r\n    \r\n                return view;\r\n            },\r\n    \r\n            //把 hash 转成 view。\r\n            toView(hash) {\r\n                //确保如 `/xx.html` 的格式。\r\n                if (!(/^\\/.+\\.html$/).test(hash)) {\r\n                    return hash;\r\n                }\r\n    \r\n                hash = hash.slice(1, -5);\r\n                hash = $String.toCamelCase(hash);\r\n                hash = hash[0].toUpperCase() + hash.slice(1);\r\n    \r\n                return hash;\r\n            },\r\n        },\r\n    \r\n    });\r\n    \r\n    module.exports = exports = Navigator;\r\n    \r\n    \r\n    \r\n    \r\n    \n});",
        "dest": "./output/definejs/src/@definejs/navigator/Navigator.js"
    },
    "Navigator.defaults": {
        "id": "Navigator.defaults",
        "name": "Navigator.defaults",
        "names": [
            "Navigator.defaults"
        ],
        "file": "temp/node_modules/@definejs/navigator/modules/Navigator.defaults.js",
        "ext": ".js",
        "package": {
            "alias": "navigator",
            "name": "@definejs/navigator",
            "version": "1.0.0"
        },
        "content": "/**\n* src: @definejs/navigator/modules/Navigator.defaults.js\n* pkg: @definejs/navigator@1.0.0\n*/\ndefine('Navigator.defaults', function (require, module, exports) { \n    \r\n    const SessionStorage = require('SessionStorage');\r\n    \r\n    /**\r\n    * Navigator 模块的默认配置\r\n    * @name Navigator.defaults\r\n    */\r\n    module.exports = {\r\n    \r\n        /**\r\n        * 对状态要启用的存储类型。\r\n        * 可取的值有: \r\n        *   false：禁用存储，页面刷新后将重新开始。\r\n        *   SessionStorage：（默认）会话存储，可以保持页面刷新的状态。\r\n        *   LocalStorage：本地存储，浏览关闭后可以保持页面刷新的状态。 \r\n        */\r\n        Storage: SessionStorage,\r\n    \r\n        /**\r\n        * 实例 id。\r\n        * 须确保每个实例 id 唯一。\r\n        */\r\n        id: '',\r\n    \r\n        /**\r\n        * 是否启用。\r\n        */\r\n        enabled: true,\r\n    \r\n        /**\r\n        * 是否允许在当前激活的视图后面，再添加一个跟当前激活的视图同名的视图进来。\r\n        */\r\n        repeated: false,\r\n    \r\n        /**\r\n        * 是否启用模拟传统多页面的路由转换器。\r\n        * 如果启用，则会把视图名与页面进行双向转换。\r\n        * 如 `AccountUsers` <---> `/account-users.html`。\r\n        */\r\n        simulate: false,\r\n    \r\n    };\r\n    \r\n    \n});",
        "dest": "./output/definejs/src/@definejs/navigator/Navigator.defaults.js"
    },
    "Navigator/Back": {
        "id": "Navigator/Back",
        "name": "Back",
        "names": [
            "Navigator",
            "Back"
        ],
        "file": "temp/node_modules/@definejs/navigator/modules/Navigator/Back.js",
        "ext": ".js",
        "package": {
            "alias": "navigator",
            "name": "@definejs/navigator",
            "version": "1.0.0"
        },
        "content": "/**\n* src: @definejs/navigator/modules/Navigator/Back.js\n* pkg: @definejs/navigator@1.0.0\n*/\ndefine('Navigator/Back', function (require, module, exports) { \n    \r\n    \r\n    module.exports = {\r\n        /**\r\n        * 获取指定目标视图相当于当前视图的偏移量。\r\n        */\r\n        getOffset(meta, target) {\r\n            if (!target) {\r\n                return -1;\r\n            }\r\n    \r\n    \r\n            let type = typeof target;\r\n    \r\n            if (type == 'number') {\r\n                if (target < 0) {\r\n                    throw new Error(`要回退的步数(参数 target) 如果指定为数字时，只能是正数。`);\r\n                }\r\n    \r\n                return 0 - (target || 1); //确保为负数。\r\n            }\r\n    \r\n            //此时，把 target 当作一个 string，即目标视图名称。\r\n    \r\n            if (type != 'string') {\r\n                throw new Error(`要回退的目标视图(参数 target) 只能是 number 或 string 类型。`);\r\n            }\r\n    \r\n    \r\n            let info = meta.hash$info[meta.hash]; //当前视图对应的信息。\r\n    \r\n            if (!info) {\r\n                throw new Error(`当前视图为空，无法回退。`);\r\n            }\r\n    \r\n    \r\n            let list = meta.this.get();\r\n            let current = info.view;\r\n            let targetIndex = -1;\r\n            let currentIndex = -1;\r\n    \r\n            list.forEach(function (info, index) {\r\n                let view = info.view;\r\n    \r\n                if (view == target) {\r\n                    targetIndex = index;\r\n                }\r\n    \r\n                if (view == current) {\r\n                    currentIndex = index;\r\n                }\r\n            });\r\n    \r\n    \r\n            if (targetIndex < 0) {\r\n                throw new Error(`历史记录中不存在名为 ${target} 的目标视图。`);\r\n            }\r\n    \r\n    \r\n            let offset = targetIndex - currentIndex;\r\n    \r\n            if (offset == 0) {\r\n                throw new Error(`要回退到的目标视图 ${target} 即为当前视图。`);\r\n            }\r\n    \r\n            if (offset > 0) {\r\n                throw new Error(`要回退到的目标视图 ${target} 在当前视图的后面，应该用前进。`);\r\n            }\r\n    \r\n    \r\n            return offset;\r\n    \r\n    \r\n    \r\n        },\r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/navigator/Navigator/Back.js"
    },
    "Navigator/Hash": {
        "id": "Navigator/Hash",
        "name": "Hash",
        "names": [
            "Navigator",
            "Hash"
        ],
        "file": "temp/node_modules/@definejs/navigator/modules/Navigator/Hash.js",
        "ext": ".js",
        "package": {
            "alias": "navigator",
            "name": "@definejs/navigator",
            "version": "1.0.0"
        },
        "content": "/**\n* src: @definejs/navigator/modules/Navigator/Hash.js\n* pkg: @definejs/navigator@1.0.0\n*/\ndefine('Navigator/Hash', function (require, module, exports) { \n    \r\n    const Hash = require('Hash'); //这里用浏览器版本的。\r\n    \r\n    \r\n    module.exports = {\r\n        /**\r\n        * \r\n        */\r\n        init(meta) {\r\n            let emitter = meta.emitter;\r\n    \r\n    \r\n            //监听窗口 hash 的变化。\r\n            Hash.onchange(window, true, function (hash, old, isImmediate) {\r\n                //\r\n                meta.hash = hash;\r\n    \r\n                //已禁用。\r\n                //此值可给动态改变，因此需要每次都判断。\r\n                if (!meta.enabled) {\r\n                    return;\r\n                }\r\n    \r\n                //此次已临时禁用事件。\r\n                if (!meta.fireEvent) {\r\n                    meta.fireEvent = true; //恢复启用事件，供下次使用。\r\n                    return;\r\n                }\r\n    \r\n    \r\n                if (isImmediate) {\r\n                    emitter.fire('immediate', [hash, meta.hash$info]);\r\n                }\r\n    \r\n                //空值。\r\n                if (!hash) {\r\n                    old = meta.router.toView(old);\r\n                    emitter.fire('none', [old]);\r\n                    return;\r\n                }\r\n    \r\n    \r\n                //通过点击前进/后退按钮(或调用浏览器的前进/后退接口)，\r\n                //或在地址栏中手动输入 hash 导致的变化。\r\n                //此时 hash 值肯定非空(因为如果为空，前面就已拦截了)。\r\n                let target = meta.hash$info[hash];   //可能为空。\r\n                let current = meta.hash$info[old];   //可能为空。\r\n    \r\n                if (target) {\r\n                    let cache = true;\r\n    \r\n                    //优先用指定的。\r\n                    if ('cache' in target) {\r\n                        cache = target.cache;\r\n                        delete target.cache;    //一次性的，用完即删。\r\n                    }\r\n    \r\n                    emitter.fire('view', [target.view, target.args, {\r\n                        'target': target,\r\n                        'current': current,\r\n                        'cache': cache,\r\n                    }]);\r\n    \r\n                    if (current) {\r\n                        let direction = target.timestamp > current.timestamp ? 'forward' : 'back';\r\n    \r\n                        emitter.fire(direction, [current.view, target.view]);\r\n                    }\r\n                    return;\r\n                }\r\n    \r\n    \r\n                hash = meta.router.toView(hash);\r\n                old = meta.router.toView(old);\r\n    \r\n                //说明页面一进来时，地址栏中就含有了 hash。\r\n                if (isImmediate) {\r\n                    emitter.fire('start', [hash, old]);\r\n                }\r\n                else {\r\n                    emitter.fire('404', [hash, old]);\r\n                }\r\n    \r\n            });\r\n        },\r\n    \r\n        /**\r\n        * \r\n        */\r\n        set(hash) {\r\n            Hash.set(window, hash);\r\n        },\r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/navigator/Navigator/Hash.js"
    },
    "Navigator/Infos": {
        "id": "Navigator/Infos",
        "name": "Infos",
        "names": [
            "Navigator",
            "Infos"
        ],
        "file": "temp/node_modules/@definejs/navigator/modules/Navigator/Infos.js",
        "ext": ".js",
        "package": {
            "alias": "navigator",
            "name": "@definejs/navigator",
            "version": "1.0.0"
        },
        "content": "/**\n* src: @definejs/navigator/modules/Navigator/Infos.js\n* pkg: @definejs/navigator@1.0.0\n*/\ndefine('Navigator/Infos', function (require, module, exports) { \n    \r\n    \r\n    \r\n    \r\n    //把视图信息按时间先后进行升排序。\r\n    function sort(hash$info) {\r\n    \r\n        let list = Object.keys(hash$info).map(function (hash) {\r\n            return hash$info[hash];\r\n        });\r\n    \r\n    \r\n        list = list.sort(function (a, b) {\r\n            return a.timestamp > b.timestamp ? 1 : -1;\r\n        });\r\n    \r\n        return list;\r\n    \r\n    }\r\n    \r\n    \r\n    \r\n    module.exports = {\r\n        /**\r\n        * 设置视图信息。\r\n        * 会把该视图信息的时间戳更新成最新的。\r\n        */\r\n        set(meta, view, args) {\r\n            let hash = meta.router.toHash(view);\r\n            let hash$info = meta.hash$info;\r\n            let storage = meta.storage;\r\n    \r\n            let now = new Date();\r\n            // var datetime = $Date.stringify(now);\r\n            let timestamp = now.getTime();\r\n    \r\n            let info = hash$info[hash] = {\r\n                'view': view,           //视图名称。\r\n                'hash': hash,           //视图对应的 hash 串。\r\n                // 'datetime': datetime,   //此字段仅为了方便调试和查看。\r\n                'timestamp': timestamp, //时间戳数值。\r\n                'args': args || [],     //渲染视图对应的参数列表。\r\n                //'cache': false,       //这个值会给动态写入，并且很快删除。　这里只是占位，方便阅读。 请不要在此加入该字段。\r\n            };\r\n    \r\n            //重新排序。\r\n            meta.infos = sort(hash$info);\r\n    \r\n    \r\n            if (storage) {\r\n                storage.set('hash$info', hash$info);\r\n            }\r\n    \r\n    \r\n            return info;\r\n    \r\n        },\r\n    \r\n        /**\r\n        * 获取视图信息。\r\n        * 已重载 get();        //获取全部视图信息，返回一个数组，按时间升序排序。\r\n        * 已重载 get(offset);  //获取指定偏移位置的目标视图信息，返回一个对象。\r\n        * 已重载 get(view);    //获取指定视图名称的目标视图信息，返回一个对象。\r\n        * 参数：\r\n        *   view: '',   //目标视图名称。\r\n        *   offset: 0,  //当前视图的偏移量为 0，比当前视图时间更早的，则为负数；否则为正数。\r\n        */\r\n        get(meta, view) {\r\n            let hash$info = meta.hash$info;\r\n    \r\n            //此时为 get(view); \r\n            //获取指定视图名称的目标视图信息，返回一个对象。\r\n            if (typeof view == 'string') {\r\n                let hash = meta.router.toHash(view);\r\n    \r\n                return hash$info[hash];\r\n            }\r\n    \r\n    \r\n            let offset = view;\r\n            let list = meta.infos;\r\n    \r\n            //此时为 get();\r\n            ///获取全部视图信息，返回一个数组，按时间升序排序。\r\n            if (typeof offset != 'number') {\r\n                return list;\r\n            }\r\n    \r\n    \r\n            //此时为 get(offset);\r\n            //获取指定偏移位置的目标视图信息，返回一个对象。\r\n    \r\n            //当前 hash 对应的视图信息。\r\n            let current = hash$info[meta.hash];\r\n    \r\n            //当前视图信息所在的位置。\r\n            let index = list.findIndex(function (info) {\r\n                return info === current;\r\n            });\r\n    \r\n    \r\n            //要获取的目标视图信息。\r\n            let target = list[index + offset];\r\n    \r\n            return target;\r\n    \r\n        },\r\n    \r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/navigator/Navigator/Infos.js"
    },
    "Navigator/Meta": {
        "id": "Navigator/Meta",
        "name": "Meta",
        "names": [
            "Navigator",
            "Meta"
        ],
        "file": "temp/node_modules/@definejs/navigator/modules/Navigator/Meta.js",
        "ext": ".js",
        "package": {
            "alias": "navigator",
            "name": "@definejs/navigator",
            "version": "1.0.0"
        },
        "content": "/**\n* src: @definejs/navigator/modules/Navigator/Meta.js\n* pkg: @definejs/navigator@1.0.0\n*/\ndefine('Navigator/Meta', function (require, module, exports) { \n    \r\n    \r\n    \r\n    const id$existed = {}; //根据 id 记录对应的实例是否已创建。 同一个 id 共用同一个 storage 空间。\r\n    \r\n    \r\n    \r\n    \r\n    module.exports = {\r\n        create: function (config, others) {\r\n            var id = config.id;\r\n    \r\n            if (!id) {\r\n                throw new Error(`创建 Navigator 实例时，必须指定 id 字段。`);\r\n            }\r\n    \r\n            if (id$existed[id]) {\r\n                throw new Error(`Navigator 已存在 id 为 ${id} 的实例。`);\r\n            }\r\n    \r\n            id$existed[id] = true;\r\n    \r\n    \r\n    \r\n            var storage = others.storage;\r\n            var hash$info = storage ? storage.get('hash$info') || {} : {};\r\n    \r\n    \r\n    \r\n            var meta = {\r\n                'id': id,                   //实例 id，由业务层传入，确保唯一。\r\n                'hash': '',                 //当前的 hash 值。\r\n                'fireEvent': true,          //指示某一次(时刻)是否需要触发事件。\r\n                'rendered': false,          //记录是否调用过 render()。 \r\n                'enabled': config.enabled,  //是否启用。\r\n    \r\n                'hash$info': hash$info,     //hash 对应的视图信息。\r\n                'infos': [],                //视图信息列表，按时间升排序。\r\n    \r\n                'storage': null,            //持久存储实例。\r\n                'emitter': null,            //事件驱动器。\r\n    \r\n                //hash 与 view 映射转换关系。 \r\n                //默认不进行转换，即 hash 与 view 相同。\r\n                //例如，若要在地址栏 hash 中显示的是 `/user-list.html`，\r\n                //对应的视图却是 `UserList`，则要提供自定义的映射关系。\r\n                'router': null,\r\n    \r\n                'this': null,               //当前实例，方便内部使用。\r\n    \r\n            };\r\n    \r\n    \r\n    \r\n            Object.assign(meta, others);\r\n    \r\n            return meta;\r\n    \r\n        },\r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/navigator/Navigator/Meta.js"
    },
    "Navigator/Router": {
        "id": "Navigator/Router",
        "name": "Router",
        "names": [
            "Navigator",
            "Router"
        ],
        "file": "temp/node_modules/@definejs/navigator/modules/Navigator/Router.js",
        "ext": ".js",
        "package": {
            "alias": "navigator",
            "name": "@definejs/navigator",
            "version": "1.0.0"
        },
        "content": "/**\n* src: @definejs/navigator/modules/Navigator/Router.js\n* pkg: @definejs/navigator@1.0.0\n*/\ndefine('Navigator/Router', function (require, module, exports) { \n    \r\n    \r\n    module.exports = {\r\n    \r\n        create() {\r\n    \r\n            let $exports = {\r\n                //静态映射表。\r\n                //优先级高于动态映射函数的。\r\n                view$hash: {},\r\n                hash$view: {},\r\n    \r\n                //动态映射函数。\r\n                //业务层可提供一个自定义的。\r\n                view2hash: null,\r\n                hash2view: null,\r\n    \r\n    \r\n                //以下两个函数内组件内部使用。\r\n    \r\n                //把 view 转换成 hash。\r\n                //在调用 nav.to() 时进行调用的。\r\n                toHash(view) {\r\n                    let hash = view;\r\n    \r\n                    if (view in $exports.view$hash) {\r\n                        hash = $exports.view$hash[view];\r\n                    }\r\n                    else if (typeof $exports.view2hash == 'function') {\r\n                        hash = $exports.view2hash(view);\r\n                    }\r\n    \r\n                    hash = hash || '';\r\n    \r\n                    if (typeof hash != 'string') {\r\n                        throw new Error('自定义的 view -> hash 的转换关系中，hash 必须为 string 类型。');\r\n                    }\r\n    \r\n                    return hash;\r\n    \r\n                },\r\n    \r\n                //把 hash 转换成 view。\r\n                //在触发 `view` 事件时进行调用的。\r\n                toView(hash) {\r\n                    let view = hash;\r\n    \r\n                    if (hash in $exports.hash$view) {\r\n                        view = $exports.hash$view[hash];\r\n                    }\r\n                    else if (typeof $exports.hash2view == 'function') {\r\n                        view = $exports.hash2view(hash);\r\n                    }\r\n    \r\n                    view = view || '';\r\n    \r\n                    if (typeof view != 'string') {\r\n                        throw new Error('自定义的 hash -> view 的转换关系中，view 必须为 string 类型。');\r\n                    }\r\n    \r\n                    return view;\r\n                },\r\n            };\r\n    \r\n            return $exports;\r\n    \r\n        },\r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/navigator/Navigator/Router.js"
    },
    "Navigator/Storage": {
        "id": "Navigator/Storage",
        "name": "Storage",
        "names": [
            "Navigator",
            "Storage"
        ],
        "file": "temp/node_modules/@definejs/navigator/modules/Navigator/Storage.js",
        "ext": ".js",
        "package": {
            "alias": "navigator",
            "name": "@definejs/navigator",
            "version": "1.0.0"
        },
        "content": "/**\n* src: @definejs/navigator/modules/Navigator/Storage.js\n* pkg: @definejs/navigator@1.0.0\n*/\ndefine('Navigator/Storage', function (require, module, exports) { \n    \r\n    \r\n    module.exports = {\r\n        /**\r\n        * 根据配置创建一个 storage 实例。\r\n        *\r\n        *   options = {\r\n        *       Storage: SessionStorage,        //存储的类型，只能是 SessionStorage 或 LocalStorage，否则将不会提供存储功能。\r\n        *       id: '',                         //Navigator 实例的 id。 用于区分不同实例对应的存储空间。\r\n        *   };\r\n        */\r\n        create(options) {\r\n            let Storage = options.Storage;\r\n            let id = options.id;\r\n    \r\n            if (!Storage) {\r\n                return null;\r\n            }\r\n    \r\n    \r\n            let storage = new Storage(id);\r\n    \r\n            return storage;\r\n        },\r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/navigator/Navigator/Storage.js"
    },
    "Object": {
        "id": "Object",
        "name": "Object",
        "names": [
            "Object"
        ],
        "file": "temp/node_modules/@definejs/object/modules/Object.js",
        "ext": ".js",
        "package": {
            "alias": "object",
            "name": "@definejs/object",
            "version": "1.1.0"
        },
        "content": "/**\n* src: @definejs/object/modules/Object.js\n* pkg: @definejs/object@1.1.0\n*/\ndefine('Object', function (require, module, exports) { \n    \r\n    function copy(A, B) {\r\n        A = A || {};\r\n    \r\n        for (let key in B) {\r\n            let source = A[key];\r\n            let target = B[key];\r\n    \r\n            if (exports.isPlain(target)) {\r\n                source = exports.isPlain(source) ? copy({}, source) : {};\r\n                target = copy(source, target);\r\n            }\r\n    \r\n            A[key] = target;\r\n        }\r\n    \r\n        return A;\r\n    }\r\n    \r\n    \r\n    /**\r\n    * Object 对象工具。\r\n    */\r\n    module.exports = exports = {\r\n        /**\r\n        * 深度扩展（拷贝）多个对象到目标对象上。\r\n        * @param {Object} target 目标对象。\r\n        * @param {Array} ...args 需要拷贝的对象列表。\r\n        */\r\n        deepAssign(target, ...args) {\r\n            args.forEach((item) => {\r\n                target = copy(target, item);\r\n            });\r\n    \r\n            return target;\r\n        },\r\n        /**\r\n        * 检测对象是否是空对象(不包含任何属性)。\r\n        * 该方法既检测对象本身的属性，也检测从原型继承的属性(因此没有使用 hasOwnProperty )。\r\n        * 该实现为 jQuery 的版本。\r\n        * @param {Object} obj 要进行检测的对象，可以是任何类型。\r\n        * @return {boolean} 一个检测结果，如果为空对象则返回 true；否则返回 false。\r\n        * @example\r\n        *   $Object.isEmpty({});      //true\r\n        * @example\r\n        *   function Person(){ }\r\n        *   Person.prototype.name = 'abc';\r\n        *   var p = new Person();\r\n        *   $Object.isEmpty( p );   //false\r\n        */\r\n        isEmpty(obj) {\r\n            for (let name in obj) {\r\n                return false;\r\n            }\r\n    \r\n            return true;\r\n        },\r\n        /**\r\n        * 检测一个对象是否是纯粹的对象（通过 \"{}\" 或者 \"new Object\" 创建的）。\r\n        * 该实现为 jQuery 的版本。\r\n        * @param {Object} obj 要进行检测的对象，可以是任何类型。\r\n        * @return {boolean} 一个检测结果，如果为纯粹的对象则返回 true；否则返回 false。\r\n        * @example\r\n        *   $Object.isPlain( {} );             //true\r\n        *   $Object.isPlain( {a: 1, b: {} } );  //true\r\n        * @example      \r\n        *   function Person(){ }\r\n        *   var p = new Person();\r\n        *   $Object.isPlain( p );   //false\r\n        */\r\n        isPlain(obj) {\r\n            if (!obj || typeof obj != 'object' /*|| obj.nodeType || exports.isWindow(obj) */) {\r\n                return false;\r\n            }\r\n    \r\n            var hasOwnProperty = Object.prototype.hasOwnProperty;\r\n            var constructor = obj.constructor;\r\n    \r\n            try {\r\n                // Not own constructor property must be Object\r\n                if (constructor &&\r\n                    !hasOwnProperty.call(obj, \"constructor\") &&\r\n                    !hasOwnProperty.call(constructor.prototype, \"isPrototypeOf\")) {\r\n                    return false;\r\n                }\r\n            }\r\n            catch (e) {\r\n                // IE8,9 Will throw exceptions on certain host objects #9897\r\n                return false;\r\n            }\r\n    \r\n            // Own properties are enumerated firstly, so to speed up,\r\n            // if last one is own, then all properties are own.\r\n            var key;\r\n            for (key in obj) {\r\n            }\r\n    \r\n            return key === undefined || hasOwnProperty.call(obj, key);\r\n        },\r\n        /**\r\n        * 把一个对象的键/值对深层次地扁平化成一个数组。\r\n        * @param {Object} obj 要进行线性化的纯对象。\r\n        * @return {Array} 返回一个线性化表示的一维数组。\r\n        *   数组的每项都为一个 { keys: [], value: ... } 的结构。\r\n        * @example\r\n            var list = $Object.flat({\r\n                name: {\r\n                    a: 1,\r\n                    b: 2,\r\n                    c: {\r\n                        aa: 11,\r\n                        bb: 22,\r\n                    },\r\n                },\r\n                tag: {\r\n                    a: 'a0',\r\n                    b: 'b0',\r\n                },\r\n                id: 1000,\r\n            });\r\n            console.dir(list);\r\n            //得到: \r\n            [\r\n                { keys: ['name', 'a'], value: 1 },\r\n                { keys: ['name', 'b'], value: 2 },\r\n                { keys: ['name', 'c', 'aa'], value: 11 },\r\n                { keys: ['name', 'c', 'bb'], value: 22 },\r\n                { keys: ['tag', 'a'], value: 'a0' },\r\n                { keys: ['tag', 'b'], value: 'b0' },\r\n                { keys: ['id'], value: 1000 },\r\n            ]\r\n        */\r\n        flat(obj) {\r\n            let isPlain = exports.isPlain;\r\n            let list = [];\r\n    \r\n            if (!obj || !isPlain(obj)) {\r\n                return list;\r\n            }\r\n    \r\n    \r\n            let keys = [];\r\n    \r\n            /**\r\n            * @inner\r\n            * 内部使用的迭代函数。\r\n            * @param {Object} obj 要进行迭代的对象。\r\n            * @param {number} level 用来跟踪当前迭代键值所处的层次深度，辅助用的。\r\n            */\r\n            function each(obj, level) {\r\n                for (let key in obj) {\r\n                    let value = obj[key];\r\n    \r\n                    keys = keys.slice(0, level);\r\n                    keys.push(key);\r\n    \r\n                    if (isPlain(value)) {   //还是一个纯对象\r\n                        each(value, level + 1);     //递归处理\r\n                        continue;\r\n                    }\r\n    \r\n                    //叶子结点\r\n                    list.push({\r\n                        'keys': keys,\r\n                        'value': value\r\n                    });\r\n                }\r\n            }\r\n    \r\n            each(obj, 0);\r\n    \r\n            return list;\r\n        },\r\n        /**\r\n        * 使用过滤函数对指定的对象进行过滤数，返回一个新对象。\r\n        * @param {Object} target 要进行过滤的对象。\r\n        * @param {function} fn 过滤函数。\r\n        *   过滤函数会接收到两个参数：当前对象中迭代中的 key 和 value。\r\n        *   过滤函数必须明确返回 true 以保留该成员，其它值则删除该成员。\r\n        * @return {Object} 返回一个过滤后的纯对象。\r\n        */\r\n        grep(target, fn) {\r\n            let obj = {};\r\n    \r\n            for (let key in target) {\r\n                let value = target[key];\r\n                let test = fn(key, value);\r\n    \r\n                //只有回调函数中明确返回 true 才保留该成员。\r\n                if (test === true) {\r\n                    obj[key] = value;\r\n                }\r\n            }\r\n    \r\n            return obj;\r\n        },\r\n        /**\r\n        * 对一个对象进行迭代。\r\n        * 该方法可以代替 `for...in` 的语句。\r\n        * 只有在回调函数中明确返回 false 才停止循环。\r\n        * 已重载 each(obj, fn);\r\n        * 已重载 each(deep, obj, fn);\r\n        * @param {boolen} [deep=false] \r\n        *   指示是否要进行深层次的迭代，如果是，请指定 true；\r\n        *   否则请指定 false 或不指定。 默认为 false，即浅迭代。\r\n        * @param {Object} obj 要进行迭代处理的对象\r\n        * @param {function} fn 要进行迭代处理的回调函数。\r\n        *   该函数中会接收到当前对象迭代的到 key 和 value 作为参数。\r\n        *   只有在此函数中明确返回 false 才会停止迭代。\r\n        */\r\n        each(deep, obj, fn) {\r\n            //重载 each(obj, fn); 此时 deep 为 false。\r\n            if (typeof deep != 'boolean') {\r\n                fn = obj;\r\n                obj = deep;\r\n                deep = false;\r\n            }\r\n    \r\n    \r\n            for (let key in obj) {\r\n                let value = obj[key];\r\n                let test = fn(key, value, obj);\r\n    \r\n                // 只有在 fn 中明确返回 false 才停止循环。\r\n                if (test === false) {\r\n                    break;\r\n                }\r\n    \r\n                //指定了深迭代，并且当前 value 为非 null 的对象。\r\n                if (deep === true && value && typeof value == 'object') {\r\n                    exports.each(true, value, fn); //递归\r\n                }\r\n            }\r\n        },\r\n    \r\n        /**\r\n        * 对一个对象进行迭代。\r\n        * 该方法可以代替 `for...in` 的语句。\r\n        * 只有在回调函数中明确返回 false 才停止循环。\r\n        * 已重载 each(obj, fn);\r\n        * @param {boolen} [deep=false] 指示是否要进行深层次的迭代。\r\n        *   如果是，请指定 true；\r\n        *   否则请指定 false 或不指定。 默认为 false，即浅迭代。\r\n        * @param {Object} obj 要进行迭代处理的对象。\r\n        * @param {function} fn 要进行迭代处理的回调函数，该函数中会接收到当前对象迭代的到 key 和 value 作为参数。\r\n        */\r\n        map(deep, obj, fn) {\r\n            //重载 map(obj, fn); 此时 deep 为 false。\r\n            if (typeof deep != 'boolean') {\r\n                fn = obj;\r\n                obj = deep;\r\n                deep = false;\r\n            }\r\n    \r\n            let isPlain = exports.isPlain;\r\n            let map = exports.map;\r\n            let target = {};\r\n    \r\n            for (let key in obj) {\r\n                let value = obj[key];\r\n    \r\n                //指定了深迭代，并且当前 value 为纯对象。\r\n                if (deep && isPlain(value)) {\r\n                    target[key] = map(true, value, fn); //递归\r\n                }\r\n                else {\r\n                    target[key] = fn(key, value, obj);\r\n                }\r\n            }\r\n    \r\n            return target;\r\n        },\r\n        /**\r\n        * 用指定的多个键和单个值组合生成一个深层次的对象。\r\n        * 已重载 make(keys, value);        //没有显式提供一个容器对象，则内部提供一个空的。\r\n        * 已重载 make(obj, keys, value);   //使用指定的容器对象。\r\n        * 如：make(['A', 'B', 'C'], 100) => { A: { B: { C: 100, }, }, }\r\n        * 参数：\r\n        *   obj: {},    //容器对象。 如果(可以)不指定，则内部提供一个空白的全新对象。\r\n        *   keys: [],   //键列表。 如 ['A', 'B', 'C']。\r\n        *   value: any, //值。\r\n        */\r\n        make(obj, keys, value) {\r\n            //重载 make(keys, value);\r\n            //没有显式提供一个容器对象，则内部提供一个空的。\r\n            if (Array.isArray(obj)) {\r\n                value = keys;\r\n                keys = obj;\r\n                obj = {};\r\n            }\r\n    \r\n            if (!obj || typeof obj != 'object') {\r\n                throw new Error('参数 obj 必须为一个非空的对象，以作为容器对象。');\r\n            }\r\n    \r\n            let item = obj;\r\n            let maxIndex = keys.length - 1; //判断是否为最后一个。\r\n    \r\n            //依次组装。\r\n            keys.map(function (key, index) {\r\n                let old = item[key];\r\n    \r\n                //非最后一项，则保证创建一个 {} 作为容器。\r\n                //这意味着，如果原来的值不是对象，则会因为给新的 {} 覆盖而丢失。\r\n                if (index < maxIndex) {\r\n                    item = item[key] = (typeof old == 'object') ? old || {} : {};\r\n                }\r\n                else { //最后一项，直接赋值。\r\n                    item[key] = value;\r\n                }\r\n    \r\n            });\r\n    \r\n            return obj;\r\n        },\r\n        /**\r\n        * 对一个对象进行成员过滤，返回一个过滤后的新对象。\r\n        * 该方法可以以某个模板对指定对象进行成员拷贝。\r\n        * @param {Object} src 要进行拷贝的对象，即数据来源。\r\n        * @param {Array|Object|string} samples 要拷贝的成员列表(模板)。\r\n        * @return {Object} 返回一个过滤后的新对象。\r\n        * @example\r\n            var src = {\r\n                a: 100,\r\n                b: 200,\r\n                c: 300,\r\n                d: 400\r\n            };\r\n     \r\n            var samples = {\r\n                a: 1,\r\n                b: 2\r\n            };\r\n     \r\n            //或 samples = ['a', 'b'];\r\n     \r\n            var obj = $Object.filter(src, samples);\r\n            console.dir(obj); //得到 obj = { a: 100, b: 200 }; 只保留 samples 中指定的成员，其他的去掉.\r\n        */\r\n        filter(src, samples) {\r\n            let obj = {};\r\n    \r\n            if (Array.isArray(samples)) {\r\n                samples.forEach(function (key, index) {\r\n                    if (key in src) {\r\n                        obj[key] = src[key];\r\n                    }\r\n                });\r\n            }\r\n            else if (exports.isPlain(samples)) {\r\n                exports.each(samples, function (key, value) {\r\n                    if (key in src) {\r\n                        obj[key] = src[key];\r\n                    }\r\n                });\r\n            }\r\n            else if (typeof samples == 'string') {\r\n                let key = samples;\r\n                if (key in src) {\r\n                    obj[key] = src[key];\r\n                }\r\n            }\r\n            else {\r\n                throw new Error('无法识别参数 samples 的类型');\r\n            }\r\n    \r\n            return obj;\r\n        },\r\n        /**\r\n        * 删除对象中指定的成员，返回一个新对象。\r\n        * 指定的成员可以以单个的方式指定，也可以以数组的方式指定(批量)。\r\n        * @param {Object} obj 要进行处理的对象。\r\n        * @param {String|Array|Object} keys 要删除的成员名称，可以是单个，也可以是批量。\r\n        * @return {Object} 返回一个被删除相应成员后的新对象。\r\n        * @example\r\n            var obj = {\r\n                a: 1, \r\n                b: 2, \r\n                c: 3\r\n            };\r\n    \r\n            var o = $Object.delete(obj, ['a', 'c']); //移除成员 a 和 c \r\n            console.dir(o); //得到 o = { b: 2 };\r\n    \r\n            o = $Object.delete(obj, {a: 1, b: 2});\r\n            console.dir(o); //得到 o = { c: 3 };\r\n        */\r\n        delete(obj, keys) {\r\n            let target = Object.assign({}, obj); //浅拷贝一份\r\n    \r\n            if (typeof keys == 'string') {\r\n                delete target[keys];\r\n            }\r\n            else if (Array.isArray(keys)) {\r\n                for (let i = 0, len = keys.length; i < len; i++) {\r\n                    delete target[keys[i]];\r\n                }\r\n            }\r\n            else {\r\n                for (let key in keys) {\r\n                    delete target[key];\r\n                }\r\n            }\r\n    \r\n            return target;\r\n        },\r\n    \r\n        /**\r\n        * 对一个对象的键进行排序，返回一个新的对象。\r\n        * 已重载 sort(obj);\r\n        * 已重载 sort(obj, sort);\r\n        * 已重载 sort(deep, obj);\r\n        * 已重载 sort(deep, obj, sort);\r\n        * @param {boolen} [deep=false] 指示是否要进行深层次的迭代。\r\n        *   如果是，请指定 true；\r\n        *   否则请指定 false 或不指定。 默认为 false，即浅迭代。\r\n        * @param {Object} obj 要进行迭代处理的对象。\r\n        * @param {function} [sort] 可选的排序函数。\r\n        */\r\n        sort(deep, obj, sort) {\r\n            //重载 sort(obj, sort);\r\n            if (typeof deep != 'boolean') {\r\n                sort = obj;\r\n                obj = deep;\r\n                deep = false;\r\n            }\r\n    \r\n            if (!obj) {\r\n                return obj;\r\n            }\r\n    \r\n    \r\n            sort = sort || undefined; //这里要用 undefined。\r\n    \r\n    \r\n            let target = {};\r\n    \r\n            Object.keys(obj).sort(sort).forEach((key) => {\r\n                let value = obj[key];\r\n    \r\n                if (deep && exports.isPlain(value)) {\r\n                    value = exports.sort(deep, value, sort);\r\n                }\r\n    \r\n                target[key] = value;\r\n            });\r\n    \r\n            return target;\r\n    \r\n        },\r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/object/Object.js"
    },
    "Package": {
        "id": "Package",
        "name": "Package",
        "names": [
            "Package"
        ],
        "file": "temp/node_modules/@definejs/package/modules/Package.js",
        "ext": ".js",
        "package": {
            "alias": "package",
            "name": "@definejs/package",
            "version": "1.0.0"
        },
        "content": "/**\n* src: @definejs/package/modules/Package.js\n* pkg: @definejs/package@1.0.0\n*/\ndefine('Package', function (require, module, exports) { \n    \r\n    const Tasker = require('Tasker');\r\n    const All = module.require('All');\r\n    const Loader = module.require('Loader');\r\n    \r\n    const name$pack = {};     //分包名称对应包信息。\r\n    \r\n    \r\n    \r\n    //实际加载函数。\r\n    function load(name, defaults, done) {\r\n        let { begin, end, loading, } = defaults;\r\n    \r\n        //开始异步加载前的提示函数。\r\n        //如可以在提示函数中创建 loading 实例，并 show() 出来。\r\n        begin && begin(loading);\r\n    \r\n    \r\n        //加载总包。\r\n        All.load(defaults, function (name$type$url) {\r\n            let type$url = name$type$url[name]; //该名称对应的分包资源。\r\n    \r\n            //不存在该配置节点。\r\n            if (!type$url) {\r\n                console.warn(`总包  ${defaults.url} 中不存在名为 ${name} 的配置节点。`);\r\n                end && end(loading);   //结束 loading 提示。\r\n                done && done(null);\r\n                return;\r\n            }\r\n    \r\n            //并行加载分包对应的资源文件，如 `css`、`html`、`js`。\r\n            Loader.load(type$url, function (pack) {\r\n                //异步加载结束后的提示函数。\r\n                //如可以在提示函数中 loading.hide() 进行隐藏。\r\n                end && end(loading);\r\n    \r\n                //给外面的回调函数提供一个非缓存版本，以指示是第一次加载的。\r\n                done && done(pack); //里面 pack.cache = false。\r\n            });\r\n    \r\n    \r\n        });\r\n    \r\n    }\r\n    \r\n    \r\n    module.exports = exports = {\r\n        defaults: require('Package.defaults'),\r\n    \r\n        /**\r\n        * 加载指定名称的包资源，并在加载完成后执行一个回调。\r\n        * 对于分包资源的加载，支持同一个分包的多次并发请求，实际只会加载一次。 加载完成后会依次执行回调函数。\r\n        * 已重载 load(done);       //加载总包文件。 此时回调函数接受到的数据结构为总包 json 文件中的结构。\r\n        * 已重载 load(name, done); //加载指定名称的分包资源。\r\n        * @param {string} name 分包的资源名称。\r\n        * @param {function} done 加载完成后要执行的回调函数。\r\n        *   该回调函数会接收到一个包资源的数据对象。\r\n        *   可能会包含一种或多种类型。 \r\n        *   也可能是接收到一个 null(说明不存在该名称对应的包信息)。\r\n        *   该名称对应的包资源存在的情况下，回调函数的接收到参数结构：\r\n        *   done({\r\n        *       cache: true|false,  //指示是否从缓存中读取的。\r\n        *       css: {\r\n        *           type: '',       //资源类型。 如 `css`、`html`、`js`。\r\n        *           url: '',        //资源地址。\r\n        *           content: '',    //资源内容。 css 的为空串。\r\n        *       },\r\n        *       html: {\r\n        *           type: '',       //资源类型\r\n        *           url: '',\r\n        *           content: '',\r\n        *       },\r\n        *       js: {\r\n        *           type: '',       //资源类型\r\n        *           url: '',\r\n        *           content: '',\r\n        *       },\r\n        *   });\r\n        */\r\n        load(name, done) {\r\n            let defaults = exports.defaults;\r\n    \r\n            //重载 load(done); 加载总包文件。\r\n            if (typeof name == 'function') {\r\n                done = name;\r\n                All.load(defaults, done);\r\n                return;\r\n            }\r\n    \r\n    \r\n            //重载 load(name, done); 加载分包的资源。\r\n            let pack = name$pack[name];\r\n    \r\n            //已加载过了，优先使用内存中的缓存。\r\n            //如果为 null，说明已经加载过了但不存在该名称对应的配置节点。\r\n            if (pack || pack === null) {\r\n                done && done(pack);\r\n                return;\r\n            }\r\n    \r\n    \r\n            //支持同一个分包的多次并发请求，实际只会加载一次。 \r\n            //加载完成后会依次执行回调函数。\r\n            let todo = { 'done': done, }; //待办项。\r\n            let sid = `@definejs/package:${name}`;\r\n    \r\n            Tasker.todo(sid, todo, function (finish) {\r\n                load(name, defaults, function (pack) {\r\n                    if (pack) {\r\n                        //保存一个新的缓存版本，供下次直接使用。\r\n                        name$pack[name] = Object.assign({}, pack, {\r\n                            cache: true,\r\n                        });\r\n                    }\r\n                    else {\r\n                        //显式填充一个值，用于下次再加载时直接使用。\r\n                        name$pack[name] = null;\r\n                    }\r\n    \r\n                    finish(function (todo) {\r\n                        todo.done(pack);\r\n                    });\r\n                });\r\n            });\r\n    \r\n        },\r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/package/Package.js"
    },
    "Package.defaults": {
        "id": "Package.defaults",
        "name": "Package.defaults",
        "names": [
            "Package.defaults"
        ],
        "file": "temp/node_modules/@definejs/package/modules/Package.defaults.js",
        "ext": ".js",
        "package": {
            "alias": "package",
            "name": "@definejs/package",
            "version": "1.0.0"
        },
        "content": "/**\n* src: @definejs/package/modules/Package.defaults.js\n* pkg: @definejs/package@1.0.0\n*/\ndefine('Package.defaults', function (require, module, exports) { \n    module.exports = {\r\n        /**\r\n        * 总包的 url 地址，相对于网站的根地址。\r\n        */\r\n        url: 'packages/all.json',\r\n        /**\r\n        * 是否在总包的 url 地址上加上随机 query 串以刷新缓存。\r\n        */\r\n        random: true,\r\n        /**\r\n        * 总包 url 地址的 query 部分，应该由自动化工具写入相应的 MD5 值。\r\n        * 如果指定，则带在 url 的 query 部分。\r\n        */\r\n        query: null,\r\n        /**\r\n        * 加载中的 Loading 实例。  \r\n        * 可选。\r\n        */\r\n        loading: null,\r\n        /**\r\n        * 开始加载时总包或分包时的提示函数。\r\n        * @param {Object} loading 上一次创建出来的 Loading 实例。\r\n        */\r\n        begin(loading) {\r\n            loading && loading.show();\r\n        },\r\n        /**\r\n        * 结束加载时总包或分包时的提示函数。\r\n        * @param {Object} loading 上一次创建出来的 Loading 实例。\r\n        */\r\n        end(loading) {\r\n            loading && loading.hide();\r\n        },\r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/package/Package.defaults.js"
    },
    "Package/All": {
        "id": "Package/All",
        "name": "All",
        "names": [
            "Package",
            "All"
        ],
        "file": "temp/node_modules/@definejs/package/modules/Package/All.js",
        "ext": ".js",
        "package": {
            "alias": "package",
            "name": "@definejs/package",
            "version": "1.0.0"
        },
        "content": "/**\n* src: @definejs/package/modules/Package/All.js\n* pkg: @definejs/package@1.0.0\n*/\ndefine('Package/All', function (require, module, exports) { \n    \r\n    \r\n    const Url = require('Url');\r\n    const Tasker = require('Tasker');\r\n    const API = require('API');\r\n    const Query = require('Query');\r\n    \r\n    const sid = `@definejs/package.load-all.sid`;\r\n    let all = null; //加载到的总包信息，是一个 json 对象。\r\n    \r\n    //根据配置项生成 `all.json` 文件最终的 url 地址。\r\n    function makeUrl(options) {\r\n        let url = Url.root() + options.url;\r\n        let query = options.query;\r\n    \r\n        if (typeof query == 'string') {\r\n            query = Query.parse(query);\r\n        }\r\n    \r\n        if (query) {\r\n            url = Query.add(url, query);\r\n        }\r\n    \r\n        if (options.random) {\r\n            url = Query.random(url, 4);\r\n        }\r\n    \r\n        return url;\r\n    }\r\n    \r\n    //发起 ajax 请求去加载 all.json 文件。\r\n    function load(options, done) {\r\n        let url = makeUrl(options);\r\n    \r\n        let api = new API({\r\n            'url': url,\r\n            'field': {},    //指定为一个空对象，以把响应解析成 json。\r\n        });\r\n    \r\n        api.on({\r\n            response(status, json, xhr) { \r\n                all = json || {};\r\n                done && done(all);\r\n            },\r\n        });\r\n    \r\n        api.get();\r\n        \r\n    }\r\n    \r\n    \r\n    \r\n    module.exports = {\r\n        /**\r\n        * 用异步的方式加载总包文件。\r\n        * 即 `packages/all.json` 文件。\r\n        * 该方法会优先使用之前加载过的缓存。\r\n        *   options = {\r\n        *       url: '',\r\n        *       query: {},\r\n        *       random: true,\r\n        *   };\r\n        */\r\n        load(options, done) {\r\n            //已加载过了，直接复用。\r\n            if (all) {\r\n                done && done(all);\r\n                return;\r\n            }\r\n    \r\n            //首次加载，添加到待办列表中。\r\n            Tasker.todo(sid, done, function (finish) {\r\n                load(options, function (all) {\r\n                    finish(function (done) {\r\n                        done && done(all);\r\n                    });\r\n                });\r\n            });\r\n    \r\n    \r\n        },\r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/package/Package/All.js"
    },
    "Package/Loader": {
        "id": "Package/Loader",
        "name": "Loader",
        "names": [
            "Package",
            "Loader"
        ],
        "file": "temp/node_modules/@definejs/package/modules/Package/Loader.js",
        "ext": ".js",
        "package": {
            "alias": "package",
            "name": "@definejs/package",
            "version": "1.0.0"
        },
        "content": "/**\n* src: @definejs/package/modules/Package/Loader.js\n* pkg: @definejs/package@1.0.0\n*/\ndefine('Package/Loader', function (require, module, exports) { \n    \r\n    const API = require('API');\r\n    const Script = require('Script');\r\n    const Tasker = require('Tasker');\r\n    \r\n    var type$load = {\r\n        /**\r\n        * 加载 css 文件。\r\n        *   url: '',        //要加载的文件的 url 地载。\r\n        *   success: fn,    //加载成功后的回调函数。\r\n        */\r\n        css(url, success) {\r\n            let link = document.createElement('link');\r\n    \r\n            link.onerror = function () {\r\n                throw new Error(`css 文件加载失败: ${url}`);\r\n            };\r\n    \r\n            link.onload = function () {\r\n                success && success({\r\n                    'url': url,\r\n                    'content': '', //这里无法也不需要获取内容。\r\n                });\r\n            };\r\n    \r\n            link.rel = 'stylesheet';\r\n            link.href = url;\r\n    \r\n            document.head.appendChild(link);\r\n        },\r\n    \r\n        /**\r\n        * 加载 html 文件。\r\n        *   url: '',        //要加载的文件的 url 地载。\r\n        *   success: fn,    //加载成功后的回调函数。\r\n        */\r\n        html(url, success) {\r\n            let api = new API({\r\n                'url': url,\r\n                'random': false,//不需要加随机数。\r\n                'field': null,  //显式指定为 null，以当成是普通的请求（即非 json 响应）。\r\n            });\r\n    \r\n            api.on({\r\n                success(xhr) { \r\n                    let content = xhr.responseText;\r\n    \r\n                    success && success({\r\n                        'url': url,\r\n                        'content': content,\r\n                    });\r\n                },\r\n                error(xhr) { \r\n                    throw new Error('error: ' + xhr.status);\r\n                },\r\n            });\r\n    \r\n            api.get();\r\n           \r\n        },\r\n    \r\n        /**\r\n        * 加载 js 文件。\r\n        *   url: '',        //要加载的文件的 url 地载。\r\n        *   success: fn,    //加载成功后的回调函数。\r\n        */\r\n        js(url, success) {\r\n            Script.load(url, function () { \r\n                success && success({\r\n                    'url': url,\r\n                    'content': '',\r\n                });\r\n            });\r\n        },\r\n    \r\n        /**\r\n        * 加载 json 文件。\r\n        *   url: '',        //要加载的文件的 url 地载。\r\n        *   done: fn,       //加载成功后的回调函数。\r\n        */\r\n        json(url, done) {\r\n            let api = new API({\r\n                'url': url,\r\n                'field': {},    //指定为一个空对象，以把响应解析成 json。\r\n            });\r\n    \r\n            api.on({\r\n                response(status, json, xhr) {\r\n                    all = json || {};\r\n                    done && done(all);\r\n                },\r\n            });\r\n    \r\n            api.get();\r\n        },\r\n    \r\n    };\r\n    \r\n    \r\n    module.exports = {\r\n        /**\r\n        * 并行加载指定的分包资源文件。\r\n        * @param {Object} type$url 类型对应的资源 url。 如：\r\n        *   {\r\n        *       css: 'packages/items/Home.css',\r\n        *       html: 'packages/items/Home.html',\r\n        *       js: 'packages/items/Home.js',\r\n        *   }\r\n        */\r\n        load(type$url, done) {\r\n            //取出所有的类型。\r\n            //如 ['css', 'html', 'js'];\r\n            let types = Object.keys(type$url); \r\n            let tasker = new Tasker(types);\r\n    \r\n            tasker.on({\r\n                //针对加载完成某一项。\r\n                each(type, index, done) {\r\n                    let url = type$url[type];\r\n                    let load = type$load[type]; //找到对应的加载器方法。\r\n    \r\n                    if (!load) {\r\n                        throw new Error(`不支持加载 ${type} 类型的文件。`);\r\n                    }\r\n    \r\n                    load(url, function (data) {\r\n                        done({\r\n                            'type': type,\r\n                            'url': data.url,\r\n                            'content': data.content,\r\n                        });\r\n                    });\r\n                },\r\n    \r\n                //全部完成。\r\n                all(items) {\r\n                    let pack = {\r\n                        cache: false,  //指示不是从缓存中读取的。\r\n                    };\r\n    \r\n                    items.forEach(function (item) {\r\n                        pack[item.type] = item;\r\n                    });\r\n    \r\n                    done && done(pack);\r\n                },\r\n            });\r\n    \r\n            //并行加载。\r\n            tasker.parallel();\r\n    \r\n        },\r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/package/Package/Loader.js"
    },
    "Panel": {
        "id": "Panel",
        "name": "Panel",
        "names": [
            "Panel"
        ],
        "file": "temp/node_modules/@definejs/panel/modules/Panel.js",
        "ext": ".js",
        "package": {
            "alias": "panel",
            "name": "@definejs/panel",
            "version": "1.0.1"
        },
        "content": "/**\n* src: @definejs/panel/modules/Panel.js\n* pkg: @definejs/panel@1.0.1\n*/\ndefine('Panel', function (require, module, exports) { \n    const $ = require('jquery');\r\n    const $Object = require('Object');\r\n    const Emitter = require('Emitter');\r\n    const Template = require('Template');\r\n    const AppModule = require('AppModule');\r\n    \r\n    const Container = module.require('Container');\r\n    const Meta = module.require('Meta');\r\n    const Params = module.require('Params');\r\n    \r\n    const mapper = new Map();\r\n    const id$panel = {};                      //\r\n    \r\n    //因为 View 类的原因，这里用 ES5 的构造函数的写法，而不用 ES6 的 class 的写法。\r\n    \r\n    /**\r\n    * 构造器。\r\n    */\r\n    function Panel(container, config) {\r\n        config = $Object.deepAssign({}, exports.defaults, config);\r\n    \r\n        const meta = Meta.create(config, {\r\n            'moudle': null,                 //如果非空，则是由 Panel.define() 创建的，此时 container='[data-panel=\"XXX\"]'。\r\n            'container': container,         //\r\n            'tplContainer': container,      //\r\n            '$emitter': new Emitter(),      //供外部用的事件管理器。\r\n            'emitter': new Emitter(this),   //内部使用的事件管理器。\r\n            '$': $(container),              //当前实例关联的 DOM 节点对应的 jQuery 实例。\r\n            'this': this,                   //方便内部使用。\r\n        });\r\n    \r\n        mapper.set(this, meta);\r\n    \r\n        //对外暴露的属性。\r\n        Object.assign(this, {\r\n            'container': container,\r\n            'id': meta.id,\r\n            '$': meta.$,\r\n        });\r\n    \r\n    }\r\n    \r\n    //实例成员。\r\n    Object.assign(Panel.prototype, {\r\n        /**\r\n        * 构造实例时传入的 container 参数。\r\n        */\r\n        container: '',\r\n    \r\n        /**\r\n        * 当前实例的 id。\r\n        */\r\n        id: '',\r\n    \r\n        /**\r\n        * 当前实例关联的 DOM 节点对应的 jQuery 实例。\r\n        * 即 $(container) 的快捷方式。\r\n        */\r\n        $: null,\r\n    \r\n        /**\r\n        * 当前实例关联的 module 对象。\r\n        * 业务层只有使用 KISP.panel() 或 KISP.view() 创建实例时，此值才存在。\r\n        */\r\n        module: null,\r\n    \r\n    \r\n        /**\r\n        * 渲染。\r\n        * 触发事件:\r\n        *   首次渲染时，首先会触发 `init` 事件，即该事件只会触发一次。\r\n        *   每次渲染时，都会依次触发 `before-render`、`render`、`after-render` 事件。\r\n        */\r\n        render(...args) {\r\n            let meta = mapper.get(this);\r\n            let emitter = meta.emitter;\r\n    \r\n            meta.renderArgs = args; //保存 render 参数，用于 refresh()。\r\n    \r\n            //首次 render。\r\n            if (!meta.rendered) {\r\n                meta.rendered = true;    //要放在此处。\r\n                emitter.fire('init');\r\n            }\r\n    \r\n            emitter.fire('before-render', args);\r\n            emitter.fire('render', args);\r\n    \r\n    \r\n            //指定了要自动显示。\r\n            if (meta.show) {\r\n                this.show();\r\n            }\r\n    \r\n            emitter.fire('after-render', args);\r\n        },\r\n    \r\n        /**\r\n        * 显示本组件。\r\n        * 触发事件: `show`。\r\n        */\r\n        show(...args) {\r\n            let meta = mapper.get(this);\r\n    \r\n            meta.$.show(...args);\r\n            meta.visible = true;\r\n    \r\n            //外面可能会用到事件返回值。\r\n            return meta.emitter.fire('show');\r\n    \r\n        },\r\n    \r\n        /**\r\n        * 隐藏本组件。\r\n        * 触发事件: `hide`。\r\n        */\r\n        hide(...args) {\r\n            let meta = mapper.get(this);\r\n    \r\n            meta.$.hide(...args);\r\n            meta.visible = false;\r\n    \r\n            //外面可能会用到事件返回值。\r\n            return meta.emitter.fire('hide');\r\n        },\r\n    \r\n        /**\r\n        * 切换显示或隐藏本组件。\r\n        */\r\n        toggle(needShow) {\r\n            let meta = mapper.get(this);\r\n    \r\n            //重载 toggle(); \r\n            //未指定参数，则根据原有状态进行切换。\r\n            if (arguments.length == 0) {\r\n                meta.visible ? this.hide() : this.show();\r\n            }\r\n            else {\r\n                needShow ? this.show() : this.hide();\r\n            }\r\n    \r\n            //返回更改后的可见状态。\r\n            return meta.visible;\r\n        },\r\n    \r\n        /**\r\n        * 设置模板填充的规则，为模板填充进行预处理。\r\n        */\r\n        template(process) {\r\n            let meta = mapper.get(this);\r\n            let tpl = meta.tpl;\r\n    \r\n            if (!tpl) {\r\n                tpl = meta.tpl = new Template(meta.tplContainer);\r\n            }\r\n    \r\n            if (process) {\r\n                tpl.process(...arguments);\r\n            }\r\n    \r\n            //返回给外面，可能要用到。\r\n            //通过 panel.template() 即可取得 tpl。\r\n            return tpl;\r\n        },\r\n    \r\n        /**\r\n        * 对本组件进行模板填充。\r\n        * 触发事件: `fill`。\r\n        * @param {Object|Array} 要填充的数据，可以是对象或数组。\r\n        * @param {function} [fn] 当要填充的数据是一个数组时，需要进行迭代转换的处理函数。\r\n        *   调用该函数，可以把一个数组转换成一个新的数组。\r\n        */\r\n        fill(data, fn) {\r\n            let meta = mapper.get(this);\r\n    \r\n            this.template(); //先确保 meta.tpl 存在。\r\n            meta.tpl.render(data, fn);\r\n    \r\n            //外面可能会用到事件返回值。\r\n            return meta.emitter.fire('fill', [data]);\r\n        },\r\n    \r\n        /**\r\n        * 刷新。\r\n        * 即使用最近一次的渲染参数重新进行渲染。\r\n        * 触发事件: `refresh`。\r\n        */\r\n        refresh() {\r\n            let meta = mapper.get(this);\r\n            let args = meta.renderArgs;\r\n    \r\n            this.render(...args);\r\n    \r\n            //外面可能会用到事件返回值。\r\n            return meta.emitter.fire('refresh', args);\r\n        },\r\n    \r\n        /**\r\n        * 重置。\r\n        * 触发事件: `reset`。\r\n        */\r\n        reset(...args) {\r\n            let meta = mapper.get(this);\r\n    \r\n            //外面可能会用到事件返回值。\r\n            return meta.emitter.fire('reset', args);\r\n        },\r\n    \r\n        /**\r\n        * 关闭。\r\n        * 触发事件: `close`。\r\n        */\r\n        close(...args) {\r\n            let meta = mapper.get(this);\r\n    \r\n            //外面可能会用到事件返回值。\r\n            return meta.emitter.fire('close', args);\r\n        },\r\n    \r\n        /**\r\n        * 获取一个状态，该状态表示本组件是否为显示状态。\r\n        */\r\n        visible() {\r\n            let meta = mapper.get(this);\r\n            return meta.visible;\r\n        },\r\n    \r\n        /**\r\n        * 获取一个状态，该状态表示本组件是否已渲染过。\r\n        */\r\n        rendered() {\r\n            let meta = mapper.get(this);\r\n            return meta.rendered;\r\n        },\r\n    \r\n        /**\r\n        * 触发外部的事件。\r\n        */\r\n        fire(...args) {\r\n            let meta = mapper.get(this);\r\n    \r\n            //外面可能会用到事件返回值。\r\n            return meta.$emitter.fire(...args);\r\n        },\r\n    \r\n        /**\r\n        * 批量绑定(委托)事件到 panel.$ 对象的多个元素上。\r\n        * 该方法可以批量绑定一个或多个不同的(委托)事件到多个元素上。\r\n        * 该方法是以事件为组长、选择器为组员进行绑定的。\r\n        * 已重载 $on(name$selector$fn);            //绑定多个(委托)事件到多个元素上。\r\n        * 已重载 $on(name$fn);                     //绑定多个事件到当前元素上。\r\n        \r\n        * 已重载 $on(name, selector$fn);           //绑定单个(委托)事件到多个元素上。\r\n        * 已重载 $on(name, fn);                    //绑定单个事件到当前元素上。\r\n        \r\n        * 已重载 $on(name, sample, selector$fn);   //绑定单个(委托)事件到多个元素上，这些元素的选择器有共同的填充模板。 此时 sample 中的 `{value}` 会给 selector$fn 中的 selector 填充。\r\n        * 已重载 $on(name, selector, fn);          //绑定单个(委托)事件到单个元素上。\r\n        *   \r\n        *   name: '',           //事件名。 如 `click`。\r\n        *   selector$fn: {      //选择器对应的事件处理器。\r\n        *       '#id-0': fn,    //\r\n        *       '#id-1': fn,    //\r\n        *   },\r\n        *\r\n        * 例如，绑定多个(委托)事件到多个元素上：\r\n        *   $on({\r\n        *       'click': {\r\n        *           '#id-0': fn,\r\n        *           '#id-1': fn,\r\n        *       },\r\n        *       'keyup': {\r\n        *           '#id-0': fn,\r\n        *           '#id-1': fn,\r\n        *       },\r\n        *   });\r\n        * 例如，绑定选择器有共同模板的多个元素：\r\n        *   $on('click', '[data-cmd=\"{value}\"]', {\r\n        *       'print': fn,\r\n        *       'top': fn,\r\n        *   });\r\n        *   等价于：\r\n        *   $on('click', {\r\n        *       '[data-cmd=\"print\"]': fn,\r\n        *       '[data-cmd=\"top\"]': fn,\r\n        *   });\r\n        */\r\n        $on(name, sample, selector$fn) {\r\n            let name$selector$fn = Params.normalize(name, sample, selector$fn);\r\n    \r\n            if (!name$selector$fn) {\r\n                return;\r\n            }\r\n    \r\n            //统一形式后再处理。\r\n            let meta = mapper.get(this);\r\n    \r\n            $Object.each(name$selector$fn, function (name, selector$fn) {\r\n                if (!selector$fn) {\r\n                    return;\r\n                }\r\n    \r\n                //重载 $on(name$fn); \r\n                //如 $on({ 'click': fn, });\r\n                if (typeof selector$fn == 'function') {\r\n                    meta.$.on(name, selector$fn); //此时的 selector$fn 就是 fn。\r\n                    return;\r\n                }\r\n    \r\n                $Object.each(selector$fn, function (selector, fn) {\r\n                    meta.$.on(name, selector, fn);\r\n                });\r\n            });\r\n        },\r\n    \r\n        /**\r\n        * 对 panel.$ 对象中的多个元素进行多个(委托)事件的绑定。\r\n        * 该方法可以对一个或多个元素批量绑定多个(委托)事件。\r\n        * 该方法是以选择器为组长、事件为组员进行绑定的。\r\n        * 已重载 $bind(selector$name$fn);    //对多个元素绑定多个(委托)事件。\r\n        * 已重载 $bind(selector, name$fn);   //对单个元素上绑定多个(委托)事件。\r\n        *   \r\n        *   selector: '',       //要绑定的元素或其选择器。\r\n        *   name$fn: {          //事件名对应的处理器函数。\r\n        *       'click': fn0,   //\r\n        *       'keyup': fn1,   //\r\n        *   },\r\n        *\r\n        * 例如，对多个元素绑定多个(委托)事件：\r\n        *   $on({\r\n        *       '#id-0': {\r\n        *           'click': fn10,\r\n        *           'keyup': fn11,\r\n        *       },\r\n        *       '#id-1': {\r\n        *           'click': fn20,\r\n        *           'keyup': fn21,\r\n        *       },\r\n        *   });\r\n        */\r\n        $bind(selector, name$fn) {\r\n            let selector$name$fn = null;\r\n    \r\n            if (typeof selector == 'string') {\r\n                //重载 $bind(selector, name$fn);\r\n                //单个元素，多个事件的情况。\r\n                selector$name$fn = { [selector]: name$fn, };\r\n            }\r\n            else if (typeof selector == 'object') {\r\n                //重载 $bind(selector$name$fn);\r\n                //多个元素，多个事件的情况。\r\n                selector$name$fn = selector;\r\n            }\r\n            else {\r\n                throw new Error(`无法识别参数 selector 的类型。`);\r\n            }\r\n    \r\n            if (!selector$name$fn) {\r\n                return;\r\n            }\r\n    \r\n            //统一形式后再处理。\r\n            let meta = mapper.get(this);\r\n    \r\n            $Object.each(selector$name$fn, function (selector, name$fn) {\r\n                if (!name$fn) {\r\n                    return;\r\n                }\r\n    \r\n                $Object.each(name$fn, function (name, fn) {\r\n                    meta.$.on(name, selector, fn);\r\n                });\r\n            });\r\n    \r\n        },\r\n    \r\n    \r\n        /**\r\n        * 包装一个新对象，使其拥有当前 Panel 实例的部分成员和新对象的成员。\r\n        * @param {Object} [obj] 要需要包装的对象。 \r\n            如果不指定，则只包装当前实例对象。\r\n        * @return {Object} 返回一个由当前实例的部分成员和要包装对象的成员组成的新对象。\r\n        * @example\r\n            var panel = KISP.create('Panel');\r\n            var obj = panel.wrap();\r\n            obj.show();\r\n        \r\n            var obj1 = panel.wrap({ a: 100 });\r\n            console.log(obj1.a);\r\n        */\r\n        wrap(obj) {\r\n            let meta = mapper.get(this);\r\n            let panel = meta.panel;\r\n    \r\n            if (panel) {\r\n                return panel;\r\n            }\r\n    \r\n            obj = obj || {};\r\n            panel = meta.panel = {};\r\n    \r\n            let keys = new Set([\r\n                ...Reflect.ownKeys(meta.this),          //当前实例的成员。\r\n                ...Reflect.ownKeys(Panel.prototype),    //原型上的成员。\r\n            ]);\r\n    \r\n            //忽略的成员。\r\n            keys.delete('constructor');\r\n            keys.delete('fire');\r\n            keys.delete('wrap');\r\n    \r\n            keys = [...keys];\r\n    \r\n            //拷贝实例原有的成员，忽略的成员除外。\r\n            keys.forEach((key) => {\r\n                let value = meta.this[key];\r\n    \r\n                //实例方法静态化。\r\n                if (typeof value == 'function') {\r\n                    value = value.bind(meta.this);\r\n                }\r\n    \r\n                panel[key] = value;\r\n            });\r\n    \r\n            let $emitter = meta.$emitter;\r\n    \r\n            //重写事件绑定，让事件绑定到外部的事件管理器上，而不是内部使用的 emitter。\r\n            Object.assign(panel, obj, {\r\n                'on': $emitter.on.bind($emitter),\r\n                'off': $emitter.off.bind($emitter),\r\n            });\r\n    \r\n            return panel;\r\n        },\r\n    \r\n        /**\r\n        * 传播指定模块的事件列表。\r\n        * 用于透传子模块的事件给父级。\r\n        */\r\n        propagate(M, names) {\r\n            let meta = mapper.get(this);\r\n    \r\n            names.forEach(function (name) {\r\n                M.on(name, function (...args) {\r\n                    meta.this.fire(name, args);\r\n                });\r\n            });\r\n        },\r\n    \r\n        /**\r\n        * 设置指定的属性。\r\n        * 已重载 set(obj);         //批量设置。\r\n        * 已重载 set(key, value);  //单个设置。\r\n        * @param {string} key 要设置的属性的名称。 \r\n        *   目前支持的字段有：'show'、'rendered'、'$'、'container'、'visible'、'template'。\r\n        * @param value 要设置的属性的值，可以是任何类型。\r\n        */\r\n        set(key, value) {\r\n            var meta = mapper.get(this);\r\n    \r\n            //重载 set({...}); \r\n            //批量设置的情况。\r\n            if ($Object.isPlain(key)) {\r\n                $Object.each(key, function (key, value) {\r\n                    meta.this.set(key, value);\r\n                });\r\n                return;\r\n            }\r\n    \r\n            //重载 set(key, value); 单个设置的情况。\r\n            switch (key) {\r\n                case 'show':\r\n    \r\n                //提供一个重置的机会，以便可以再次触发 init。 \r\n                //这是高级用法，针对特殊场景。\r\n                //场景：在 set('$') 更新容器后，原 `init` 事件中绑定的逻辑，如果用到了 panel.$.on() 之类的，则会失效。\r\n                //因此在 set('$') 后再调一下 set('rendered', false)，可以让 `init` 事件有机会再次触发。\r\n                case 'rendered':\r\n                    meta[key] = value;\r\n                    break;\r\n    \r\n                //更新容器。\r\n                case '$':\r\n                case 'container':\r\n                    Container.set(meta, value);\r\n                    break;\r\n    \r\n                //允许设置可见性的初始状态，以便在不调用 render() 的前提下直接调用 show() 或 hide()。\r\n                case 'visible':\r\n                    meta.visible = !!value;\r\n                    break;\r\n    \r\n                //设置新的模板容器，这样可以把指定的子部分当成模板进行填充，而不影响其它部分。\r\n                case 'template':\r\n                    if (meta.tpl) {\r\n                        throw new Error(`当前实例中已创建了模板实例，无法再修改模板实例所关联的 DOM 容器。`);\r\n                    }\r\n    \r\n                    meta.tplContainer = meta.$.find(value);\r\n                    break;\r\n                default:\r\n                    throw new Error(`目前不支持设置属性: ${key}`);\r\n            }\r\n    \r\n        },\r\n    \r\n        /**\r\n        * 销毁本组件。\r\n        */\r\n        destroy() {\r\n            let meta = mapper.get(this);\r\n            meta.emitter.destroy();\r\n            meta.$emitter.destroy();\r\n            meta.$.off();\r\n    \r\n            mapper.delete(this);\r\n        },\r\n    \r\n        /**\r\n        * 绑定事件到内部的事件管理器。\r\n        * 注意，该方法在通过 wrap() 导出后，会给重写。\r\n        */\r\n        on(...args) {\r\n            let meta = mapper.get(this);\r\n            meta.emitter.on(...args);\r\n        },\r\n    });\r\n    \r\n    //静态成员。\r\n    Object.assign(Panel, {\r\n        defaults: require('Panel.defaults'),\r\n        \r\n        /**\r\n        * 提供一种按标准方法定义面板的方式。\r\n        * 参数 options 是留给内部模块 View 扩展使用的。\r\n        *   options = {\r\n        *       constructor: Panel, //要使用的构造器，Panel 或 View。\r\n        *       defaults: {},       //要使用的默认配置，为 Panel 或 View 对应的配置。\r\n        *   };\r\n        */\r\n        define(id, factory, options) {\r\n            options = options || {\r\n                'constructor': Panel,\r\n                'defaults': exports.defaults,\r\n            };\r\n    \r\n    \r\n            AppModule.define(id, function ($require, $module, $exports) {\r\n                id = $module.id;    //此 id 才是完整的 id。 外面的那个可能是个模板 id。\r\n    \r\n                let container = Container.get(id, options.defaults);    //如 `[data-panel=\"/Users/Main\"]`。\r\n                let panel = new options.constructor(container);         //如 new Panel(`[data-panel=\"/Users/Main\"]`)。\r\n                let meta = mapper.get(panel);                           //获取 panel 对应的元数据。\r\n    \r\n                //指示此 panel 由 Panel.define() 创建的。\r\n                meta.module = panel.module = $module;\r\n    \r\n                //注意，参数中的 factory 并不是真正的工厂函数，本函数体才是。\r\n                //因此，参数中的 factory 的返回值 $exports 只是一个部分的导出对象。 \r\n                $exports = factory($require, $module, panel);\r\n    \r\n                //把部分的导出对象跟 panel 实例合并成一个新的导出对象，\r\n                //让新的导出对象拥有 panel 实例的大部分成员，以及 factory 中导出的成员。\r\n                $exports = panel.wrap($exports);\r\n    \r\n                id$panel[id] = panel;\r\n    \r\n                //业务层拿到的是 $module.exports === $exports。\r\n                //在 factory 函数体内，panel !== $module.exports，它们是包装前与后的关系。\r\n                return $exports;\r\n            });\r\n    \r\n        },\r\n    \r\n        /**\r\n        * 更新容器。\r\n        * 已重载 update(id);   //更新单个。\r\n        * 已重载 update(ids);  //更新多个。\r\n        * 参数 options 是留给内部模块 View 扩展使用的。\r\n        */\r\n        update(ids, options) {\r\n            ids = Array.isArray(ids) ? ids : [ids];\r\n    \r\n            options = options || {\r\n                'defaults': exports.defaults,\r\n            };\r\n    \r\n            ids.forEach(function (id) {\r\n                let panel = id$panel[id];\r\n                let container = Container.get(id, options.defaults);  //如 `[data-panel=\"/Users/Main\"]`。\r\n    \r\n                if (!panel) {\r\n                    console.warn(`不存在 ${container} 的 Panel 实例。`);\r\n                    return;\r\n                }\r\n    \r\n                panel.set('container', container);\r\n            });\r\n        },\r\n    });\r\n    \r\n    module.exports = exports = Panel;\n});",
        "dest": "./output/definejs/src/@definejs/panel/Panel.js"
    },
    "Panel.defaults": {
        "id": "Panel.defaults",
        "name": "Panel.defaults",
        "names": [
            "Panel.defaults"
        ],
        "file": "temp/node_modules/@definejs/panel/modules/Panel.defaults.js",
        "ext": ".js",
        "package": {
            "alias": "panel",
            "name": "@definejs/panel",
            "version": "1.0.1"
        },
        "content": "/**\n* src: @definejs/panel/modules/Panel.defaults.js\n* pkg: @definejs/panel@1.0.1\n*/\ndefine('Panel.defaults', function (require, module, exports) { \n    \r\n    /**\r\n    * Panel 模块的默认配置\r\n    * @name Panel.defaults\r\n    */\r\n    module.exports = {\r\n        /**\r\n        * 生成组件时的 id 前缀。\r\n        * 建议保留现状。\r\n        */\r\n        idPrefix: 'definejs-Panel',\r\n        /**\r\n        * 所关联的 DOM 节点容器的选择器模板。\r\n        */\r\n        container: '[data-panel=\"{id}\"]',\r\n        /**\r\n        * 是否在组件 render 后自动调用 show() 方法以进行显示。\r\n        */\r\n        show: true,\r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/panel/Panel.defaults.js"
    },
    "Panel/Container": {
        "id": "Panel/Container",
        "name": "Container",
        "names": [
            "Panel",
            "Container"
        ],
        "file": "temp/node_modules/@definejs/panel/modules/Panel/Container.js",
        "ext": ".js",
        "package": {
            "alias": "panel",
            "name": "@definejs/panel",
            "version": "1.0.1"
        },
        "content": "/**\n* src: @definejs/panel/modules/Panel/Container.js\n* pkg: @definejs/panel@1.0.1\n*/\ndefine('Panel/Container', function (require, module, exports) { \n    \r\n    const $String = require('String');\r\n    \r\n    \r\n    module.exports = {\r\n        /**\r\n        * 获取容器对应的选择器。\r\n        */\r\n        get(id, defaults) {\r\n            //如 `[data-panel=\"/Users/Main\"]`。\r\n            let container = $String.format(defaults.container, {\r\n                'id': id,\r\n            });\r\n    \r\n            return container;\r\n        },\r\n    \r\n        /**\r\n        * 设置新的容器。\r\n        */\r\n        set(meta, value) {\r\n            //在 jQuery 3.x 版本，meta.$.selector 为 undefined。\r\n            value = value || meta.$.selector;\r\n    \r\n            //空值，并且确定它是来源于 Panel.define() 创建的。\r\n            //此时可以用回 meta.container，它为 `[data-panel=\"xx\"]` 格式。\r\n            if (!value && meta.module) {\r\n                value = meta.container;\r\n            }\r\n    \r\n            if (!value) {\r\n                throw new Error(`设置 container 时，请给参数 value 提供一个有效的值。`);\r\n            }\r\n    \r\n            meta.container = value;\r\n    \r\n            //先解除绑定旧容器的事件。\r\n            meta.$.off();\r\n    \r\n            //构造新的容器。\r\n            meta.$ = meta.this.$ = $(meta.container);\r\n    \r\n            //同时更新导出对象的 $ 字段。\r\n            if (meta.panel) {\r\n                meta.panel.$ = meta.$;\r\n            }\r\n    \r\n    \r\n    \r\n            //更新容器后，可能会产生两份完全一样的节点。\r\n            //其中有一份完全是作废的，它们不在 DOM 树中。\r\n            //这里检测并清理不在 DOM 树中的孤立节点。\r\n            //重写 jQuery 中的 find 方法。\r\n            let find = meta.$.find.bind(meta.$);\r\n    \r\n            meta.$.find = function (...args) {\r\n                let $items = find(...args);\r\n    \r\n                $items.each(function (index) {\r\n                    let el = this;\r\n    \r\n                    if (!document.documentElement.contains(el)) {\r\n                        el.parentNode.removeChild(el);\r\n                    }\r\n    \r\n                });\r\n    \r\n                //重新获取一次。\r\n                $items = find(...args);\r\n    \r\n                return $items;\r\n            };\r\n    \r\n    \r\n        },\r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/panel/Panel/Container.js"
    },
    "Panel/Meta": {
        "id": "Panel/Meta",
        "name": "Meta",
        "names": [
            "Panel",
            "Meta"
        ],
        "file": "temp/node_modules/@definejs/panel/modules/Panel/Meta.js",
        "ext": ".js",
        "package": {
            "alias": "panel",
            "name": "@definejs/panel",
            "version": "1.0.1"
        },
        "content": "/**\n* src: @definejs/panel/modules/Panel/Meta.js\n* pkg: @definejs/panel@1.0.1\n*/\ndefine('Panel/Meta', function (require, module, exports) { \n    const IDMaker = require('IDMaker');\r\n    \r\n    \r\n    module.exports = {\r\n        create(config, others) {\r\n            let maker = new IDMaker(config.idPrefix);\r\n    \r\n            let meta = {\r\n                'id': maker.next(),     //实例的 id，全局唯一。\r\n                'container': '',        //容器的 DOM 节点(或其对应的选择器)。\r\n                'rendered': false,      //是否已渲染过。\r\n                'renderArgs': [],       //最近一次 render() 时的参数数组，用于 refresh()。\r\n                'show': config.show,    //是否在组件 render() 后自动调用 show() 方法以进行显示。\r\n                'visible': false,       //当前组件是否可见。\r\n    \r\n                'tplContainer': null,   //用于构造 Template 实例即 tpl 时的参数。 默认为当前 panel 实例的 container，但可以指定来改变。\r\n                'module': null,         //如果非空，则是由 Panel.define() 创建的。 此时 container='[data-panel=\"xx\"]' 的形式。\r\n                '$': null,              //当前实例关联的 DOM 节点对应的 jQuery 实例。\r\n                '$emitter': null,       //供外部用的事件管理器。\r\n                'emitter': null,        //内部使用的事件管理器。\r\n                'tpl': null,            //模板填充的 Template 实例。\r\n                'panel': null,          //缓存调用 this.wrap() 后的返回结果。\r\n                'this': null,           //方便内部使用。\r\n            };\r\n    \r\n    \r\n            Object.assign(meta, others);\r\n    \r\n            return meta;\r\n    \r\n        },\r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/panel/Panel/Meta.js"
    },
    "Panel/Params": {
        "id": "Panel/Params",
        "name": "Params",
        "names": [
            "Panel",
            "Params"
        ],
        "file": "temp/node_modules/@definejs/panel/modules/Panel/Params.js",
        "ext": ".js",
        "package": {
            "alias": "panel",
            "name": "@definejs/panel",
            "version": "1.0.1"
        },
        "content": "/**\n* src: @definejs/panel/modules/Panel/Params.js\n* pkg: @definejs/panel@1.0.1\n*/\ndefine('Panel/Params', function (require, module, exports) { \n    const $String = require('String');\r\n    const $Object = require('Object');\r\n    \r\n    module.exports = {\r\n        /**\r\n        * 针对方法 panel.$on() 提供标准化参数的能力，以支持多样化的重载情况。\r\n        * 已重载 $on(name$selector$fn);            //绑定多个(委托)事件到多个元素上。\r\n        * 已重载 $on(name$fn);                     //绑定多个事件到当前元素上。\r\n    \r\n        * 已重载 $on(name, selector$fn);           //绑定单个(委托)事件到多个元素上。\r\n        * 已重载 $on(name, fn);                    //绑定单个事件到当前元素上。\r\n    \r\n        * 已重载 $on(name, sample, selector$fn);   //绑定单个(委托)事件到多个元素上，这些元素的选择器有共同的填充模板。\r\n        * 已重载 $on(name, selector, fn);          //绑定单个(委托)事件到单个元素上。\r\n        */\r\n        normalize(name, sample, selector$fn) {\r\n            let type = typeof name;\r\n    \r\n            //重载 $on(name$selector$fn);\r\n            //重载 $on(name$fn);\r\n            if (type == 'object') {\r\n                return name;\r\n            }\r\n    \r\n            //此时要求 name 必须为一个 string。\r\n            if (type != 'string') {\r\n                throw new Error(`无法识别参数 name 的类型。`);\r\n            }\r\n    \r\n    \r\n            type = typeof sample;\r\n    \r\n            //重载 $on(name, selector$fn); \r\n            //重载 $on(name, fn);      \r\n            if (type == 'object' || type == 'function') {\r\n                return { [name]: sample, };\r\n            }\r\n    \r\n    \r\n            //此时要求 sample 必须为一个 string。\r\n            if (type != 'string') {\r\n                throw new Error(`无法识别参数 sample 的类型。`);\r\n            }\r\n    \r\n            type = typeof selector$fn;\r\n    \r\n    \r\n            //重载 $on(name, selector, fn);\r\n            if (type == 'function') {\r\n                return {\r\n                    [name]: {\r\n                        [sample]: selector$fn,  //此时 sample 为 selector，而 selector$fn 为 fn。\r\n                    },\r\n                };\r\n            }\r\n    \r\n            //重载 $on(name, sample, selector$fn);\r\n            if (type == 'object') {\r\n                let all = {};\r\n    \r\n                $Object.each(selector$fn, function (selector, fn) {\r\n                    //如填充前的 sample 为 `[data-cmd=\"{value}\"]`，且 selector 为 `print`，\r\n                    //则填充后的 selector 为 `[data-cmd=\"print\"]`。\r\n                    selector = $String.format(sample, {\r\n                        'value': selector,\r\n                    });\r\n    \r\n                    all[selector] = fn;\r\n                });\r\n    \r\n                return {\r\n                    [name]: all,\r\n                };\r\n            }\r\n    \r\n    \r\n            throw new Error(`无法识别参数 selector$fn 的类型。`);\r\n    \r\n        },\r\n    };\r\n    \r\n    \n});",
        "dest": "./output/definejs/src/@definejs/panel/Panel/Params.js"
    },
    "Proxy": {
        "id": "Proxy",
        "name": "Proxy",
        "names": [
            "Proxy"
        ],
        "file": "temp/node_modules/@definejs/proxy/modules/Proxy.js",
        "ext": ".js",
        "package": {
            "alias": "proxy",
            "name": "@definejs/proxy",
            "version": "1.0.0"
        },
        "content": "/**\n* src: @definejs/proxy/modules/Proxy.js\n* pkg: @definejs/proxy@1.0.0\n*/\ndefine('Proxy', function (require, module, exports) { \n    const $Url = require('Url');\r\n    const $JSON = require('JSON');\r\n    const Fn = require('Fn');\r\n    const Script = require('Script');\r\n    const Url = module.require('Url');\r\n    \r\n    \r\n    let current = null; //当前请求到的代理文件的响应结果 factory。\r\n    \r\n    \r\n    //模拟一个网络的随机延迟时间去执行一个回调函数\r\n    function delay(fn, ...args) {\r\n        let delay = exports.defaults.delay;\r\n        Fn.delay(delay, fn, args);\r\n    }\r\n    \r\n    \r\n    //加载完成后，根据状态分发事件。\r\n    function done(json, config) {\r\n        if (!json) {\r\n            delay(config.error);\r\n            return;\r\n        }\r\n    \r\n        let successCode = config.successCode;\r\n        let field = config.field;\r\n        let code = json[field.code];\r\n    \r\n        if (code == successCode) { // 成功\r\n            let data = json[field.data] || {};\r\n            delay(config.success, data, json);\r\n        }\r\n        else { //失败\r\n            let msg = json[field.msg] || '';\r\n            delay(config.fail, code, msg, json);\r\n        }\r\n    }\r\n    \r\n    /**\r\n    * 加载指定的 js 代理文件。\r\n    * 注意：加载完 js 代理文件后，会先执行 js 代理文件的逻辑，再触发 onload 事件。\r\n    * 经过试验发现，并发加载多个 js 文件，也会严格地按上述顺序对应的进行。\r\n    */\r\n    function loadJS(file, config) {\r\n        let base = exports.defaults.base;\r\n        let url = Url.get(file, base);\r\n    \r\n        Script.load(url, function () {\r\n            let factory = current;\r\n            current = null;\r\n    \r\n            if (typeof factory == 'function') {\r\n                factory = factory(config.data, config);\r\n            }\r\n    \r\n            done(factory, config);\r\n    \r\n        });\r\n    }\r\n    \r\n    /**\r\n    * 加载指定的 json 代理文件。\r\n    */\r\n    function loadJSON(file, config) {\r\n        let base = exports.defaults.base;\r\n        let url = Url.get(file, base);\r\n        let xhr = new XMLHttpRequest();\r\n    \r\n        xhr.open('get', url, true);\r\n    \r\n        xhr.onreadystatechange = function () {\r\n            if (xhr.readyState != 4) {\r\n                return;\r\n            }\r\n    \r\n            if (xhr.status != 200) {\r\n                delay(config.error);\r\n                return;\r\n            }\r\n    \r\n            let json = $JSON.parse(xhr.responseText);\r\n    \r\n            done(json, config);\r\n        };\r\n    \r\n        xhr.send(null);\r\n    }\r\n    \r\n    \r\n    module.exports = exports = {\r\n        /**\r\n        * 默认配置。 \r\n        */\r\n        defaults: require('Proxy.defaults'),\r\n        \r\n        /**\r\n        * 发起代理请求。\r\n        * @param {String} file 代理响应的文件地址。\r\n        * @param {Object} config 配置对象。\r\n        */\r\n        request(file, config) {\r\n            if ($Url.isExt(file, '.js')) { // 映射的响应是一个 js 文件\r\n                loadJS(file, config);\r\n                return;\r\n            }\r\n    \r\n            if ($Url.isExt(file, '.json')) {\r\n                loadJSON(file, config);\r\n                return;\r\n            }\r\n    \r\n            throw new Error('不支持参数 file 的文件类型: ' + file);\r\n        },\r\n    \r\n        /**\r\n        * 响应代理请求。\r\n        * 可以生成很复杂的动态数据，并根据提交的参数进行处理，具有真正模拟后台逻辑的能力。\r\n        * 该方法仅用在代理响应文件中，且在调用之前必须先调用 request 方法。\r\n        * 已重载 response(json)的情况。\r\n        * @param {function|Object} factory 响应的处理函数或 json 对象。\r\n        *   当传进来的 factory 为处理函数时，该函数会接收到两个参数：factory(data, config)。 其中：\r\n        *   data 为发起 get 或 post 请求时最终的 data 字段；\r\n        *   config 为发起 get 或 post 请求时全部的配置字段。\r\n        */\r\n        response(factory) {\r\n            //var type = typeof factory;\r\n            //var isValid = type == 'function' || type == 'object' && factory;\r\n    \r\n            //if (!isValid) {\r\n            //    throw new Error('参数 factory 只能是函数或非空对象');\r\n            //}\r\n    \r\n            current = factory;\r\n        },\r\n    \r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/proxy/Proxy.js"
    },
    "Proxy.defaults": {
        "id": "Proxy.defaults",
        "name": "Proxy.defaults",
        "names": [
            "Proxy.defaults"
        ],
        "file": "temp/node_modules/@definejs/proxy/modules/Proxy.defaults.js",
        "ext": ".js",
        "package": {
            "alias": "proxy",
            "name": "@definejs/proxy",
            "version": "1.0.0"
        },
        "content": "/**\n* src: @definejs/proxy/modules/Proxy.defaults.js\n* pkg: @definejs/proxy@1.0.0\n*/\ndefine('Proxy.defaults', function (require, module, exports) { \n    \r\n    /**\r\n    * Proxy 模块的默认配置\r\n    * @name Proxy.defaults\r\n    */\r\n    module.exports = {\r\n        /**\r\n        * 加载代理响应文件的起始位置(或目录)。\r\n        */\r\n        base: '',\r\n    \r\n        /**\r\n        * 为模拟真实网络环境而随机延迟的时间。\r\n        * 格式为 { min: 500, max: 3000 }。\r\n        * 当指定为 false 时，则禁用延迟。\r\n        */\r\n        delay: {\r\n            /**\r\n            * 随机延迟的最小毫秒数。\r\n            */\r\n            min: 500,\r\n            /**\r\n            * 随机延迟的最大毫秒数。\r\n            */\r\n            max: 3000,\r\n        },\r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/proxy/Proxy.defaults.js"
    },
    "Proxy/Url": {
        "id": "Proxy/Url",
        "name": "Url",
        "names": [
            "Proxy",
            "Url"
        ],
        "file": "temp/node_modules/@definejs/proxy/modules/Proxy/Url.js",
        "ext": ".js",
        "package": {
            "alias": "proxy",
            "name": "@definejs/proxy",
            "version": "1.0.0"
        },
        "content": "/**\n* src: @definejs/proxy/modules/Proxy/Url.js\n* pkg: @definejs/proxy@1.0.0\n*/\ndefine('Proxy/Url', function (require, module, exports) { \n    \r\n    const Url = require('Url');\r\n    const Query = require('Query');\r\n    \r\n    \r\n    function get(url, base) {\r\n        //绝对地址\r\n        if (Url.isFull(url)) {\r\n            return url;\r\n        }\r\n    \r\n        //相对地址\r\n        if (Url.isFull(base)) {\r\n            return base + url;\r\n        }\r\n    \r\n        let root = Url.root();\r\n    \r\n        if (url.slice(0, 1) != '/') {\r\n            root = root + base;\r\n        }\r\n    \r\n        return root + url;\r\n    }\r\n    \r\n    \r\n    module.exports = {\r\n    \r\n        get(url, base) {\r\n            url = get(url, base);\r\n            url = Query.random(url); //增加随机查询字符串，确保拿到最新的\r\n    \r\n            return url;\r\n        },\r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/proxy/Proxy/Url.js"
    },
    "Query": {
        "id": "Query",
        "name": "Query",
        "names": [
            "Query"
        ],
        "file": "temp/node_modules/@definejs/query/modules/Query.js",
        "ext": ".js",
        "package": {
            "alias": "query",
            "name": "@definejs/query",
            "version": "1.0.0"
        },
        "content": "/**\n* src: @definejs/query/modules/Query.js\n* pkg: @definejs/query@1.0.0\n*/\ndefine('Query', function (require, module, exports) { \n    const $Object = require('Object');\r\n    const $String = require('String');\r\n    \r\n    //把指定的 url 中的查询字符串替换成目标查询字符串。 \r\n    //同时会保留原有的 hash 串。\r\n    function replace(url, qs) {\r\n        qs = qs || '';\r\n    \r\n        if (typeof qs == 'object') {\r\n            qs = exports.stringify(qs);\r\n        }\r\n    \r\n        if (qs) {\r\n            qs = '?' + qs;\r\n        }\r\n    \r\n        var hasQuery = url.includes('?');\r\n        var hasHash = url.includes('#');\r\n        var parts = [];\r\n    \r\n    \r\n        if (hasQuery && hasHash) {\r\n            parts = url.split(/\\?|#/g);\r\n            return parts[0] + qs + '#' + parts[2];\r\n        }\r\n    \r\n        if (hasQuery) {\r\n            parts = url.split('?');\r\n            return parts[0] + qs;\r\n        }\r\n    \r\n        if (hasHash) {\r\n            parts = url.split('#');\r\n            return parts[0] + qs + '#' + parts[1];\r\n        }\r\n    \r\n    \r\n        return url + qs;\r\n    }\r\n    \r\n    \r\n    /**\r\n    * Url 中的查询字符串工具。\r\n    */\r\n    module.exports = exports = {\r\n        /**\r\n        * 把 url 中的查询字符串解析为等价结构的 Object 对象。\r\n        * @param {string} url 要进行解析的查询字符串。\r\n        * @param {boolean} [isShallow=false] 指示是否使用浅层次进行解析。\r\n            当显式指定 isShallow 参数为 true 时，则使用浅层次来解析(只解析一层，不进行递归解析)；\r\n            否则(默认)使用深层次解析。\r\n        * @param {boolean} [isCompatible=false] 指示是否使用兼容模式进行解码。\r\n            当指定 isCompatible 参数为 true 时，将使用 unescape 来编码；\r\n            否则(默认)使用 decodeURIComponent。\r\n        * @return {Object} 返回一个包含键值对的 Object 对象。\r\n            当参数 url 非法时，返回空对象 {}。\r\n        * @example\r\n            var url = 'a=1&b=2&c=A%3D100%26B%3D200';\r\n            var obj = Query.parse(url);\r\n            得到 obj = {a: 1, b:2, c: {A: 100, B: 200}};\r\n        */\r\n        parse(url, isShallow, isCompatible) {\r\n            if (!url || typeof url != 'string') {\r\n                return {}; //这里不要返回 null，免得外部调用出错。\r\n            }\r\n    \r\n            var decode = isCompatible ? unescape : decodeURIComponent;  //解码方法，默认用后者。\r\n            var isDeep = !isShallow;        //深层次解析，为了语义上更好理解，换个名称。\r\n            const toValue = $String.toValue;  //缓存一下方法，以提高循环中的性能。\r\n            var obj = {};\r\n    \r\n            url.split('&').map(function (item) {\r\n                var pair = item.split('=');\r\n                var name = decode(pair[0]);\r\n                var value = pair[1];\r\n    \r\n                if (pair.length > 1) {\r\n                    value = decode(value);\r\n    \r\n                    //深层次解析\r\n                    if (isDeep && value.indexOf('=') > 0) { //还出现=号，说明还需要进一层次解码\r\n                        value = exports.parse(value); //递归调用\r\n                    }\r\n                    else { //处理一下字符串类型的 0|1|true|false|null|undefined|NaN\r\n                        value = toValue(value); //还原常用的数据类型\r\n                    }\r\n                }\r\n    \r\n                var existed = name in obj;\r\n    \r\n                if (!existed) {\r\n                    obj[name] = value;\r\n                    return;\r\n                }\r\n    \r\n    \r\n                //支持重复名称，如果有则放到一个数组里。\r\n                var old = obj[name];\r\n    \r\n                if (Array.isArray(old)) {\r\n                    old.push(value);\r\n                }\r\n                else {\r\n                    obj[name] = [old, value];\r\n                }\r\n    \r\n            });\r\n    \r\n            return obj;\r\n        },\r\n    \r\n        /**\r\n        * 把一个对象编码成等价结构的 url 查询字符串。\r\n        * @param {Object} obj 要进行编码的对象\r\n        * @param {boolean} [isCompatible=false] \r\n            指定是否要使用兼容模式进行编码。\r\n            当需要使用 escape 进行编码时，请指定 true；\r\n            否则要使用 encodeURIComponent 进行编码，请指定 false 或不指定。\r\n        * @return {string} 返回一个经过编码的 url 查询字符串\r\n        * @example\r\n            var obj = {\r\n                a: 1,\r\n                b: 2,\r\n                c: { A: 100, B: 200 },\r\n                d: null,\r\n                e: undefined,\r\n                f: ['a', 'b', 'c']\r\n            };\r\n            var s = Query.stringify(obj);\r\n            console.log(s); \r\n            //结果 a=1&b=2&c=A%3D100%26B%3D200&d=null&e=undefined&f=%5Ba%2C%20b%5D\r\n        */\r\n        stringify(obj, isCompatible) {\r\n            if (obj == null) {     // null 或 undefined\r\n                return String(obj);\r\n            }\r\n    \r\n            switch (typeof obj) {\r\n                case 'string':\r\n                case 'number':\r\n                case 'boolean':\r\n                    return obj;\r\n            }\r\n    \r\n            if (obj instanceof String ||\r\n                obj instanceof Number ||\r\n                obj instanceof Boolean ||\r\n                obj instanceof Date) {\r\n                return obj.valueOf();\r\n            }\r\n    \r\n            if (Array.isArray(obj)) {\r\n                return '[' + obj.join(', ') + ']';\r\n            }\r\n    \r\n            let encode = isCompatible ? escape : encodeURIComponent;\r\n            let pairs = [];\r\n    \r\n    \r\n            $Object.each(obj, function (key, value) {\r\n                key = encode(key);\r\n    \r\n                if (value === undefined) {\r\n                    pairs.push(key);\r\n                    return;\r\n                }\r\n    \r\n                value = exports.stringify(value);\r\n                value = encode(value);\r\n    \r\n                pairs.push(`${key}=${value}`);\r\n    \r\n            });\r\n    \r\n            return pairs.join('&');\r\n    \r\n        },\r\n    \r\n        /**\r\n        * 获取指定 url 的查询字符串中指定的键所对应的值。\r\n        * 已重载 get(url, key, ignoreCase);\r\n        * 已重载 get(location, key, ignoreCase);\r\n        * 已重载 get(window, key, ignoreCase);\r\n        * @param {string} url 要进行获取的 url 字符串。\r\n        * @param {string} [key] 要检索的键。\r\n        * @param {boolean} [ignoreCase=false] 是否忽略参数 key 的大小写。 默认区分大小写。\r\n            如果要忽略 key 的大小写，请指定为 true；否则不指定或指定为 false。\r\n            当指定为 true 时，将优先检索完全匹配的键所对应的项；若没找到然后再忽略大小写去检索。\r\n        * @retun {string|Object|undefined} 返回一个查询字符串值。\r\n            当不指定参数 key 时，则获取全部查询字符串，返回一个等价的 Object 对象。\r\n            当指定参数 key 为一个空字符串，则获取全部查询字符串，返回一个 string 类型值。\r\n        * @example\r\n            Query.get('http://test.com?a=1&b=2#hash', 'a');  //返回 '1'\r\n            Query.get('http://test.com?a=1&b=2#hash', 'c');  //返回 undefined\r\n            Query.get('http://test.com?a=1&A=2#hash', 'A');  //返回 2\r\n            Query.get('http://test.com?a=1&b=2#hash', 'A', true);//返回 1\r\n            Query.get('http://test.com?a=1&b=2#hash', '');   //返回 'a=1&b=2'\r\n            Query.get('http://test.com?a=1&b=2#hash');       //返回 {a: '1', b: '2'}\r\n            Query.get('http://test.com?a=&b=');              //返回 {a: '', b: ''}\r\n            Query.get('http://test.com?a&b');                //返回 {a: '', b: ''}\r\n            Query.get('http://test.com?a', 'a');             //返回 ''\r\n        */\r\n        get(url, key, ignoreCase) {\r\n            //重载 get(location, key, ignoreCase)\r\n            //重载 get(window, key, ignoreCase)\r\n            if (typeof url == 'object') {\r\n                url = ('href' in url) ? url.href :  //location\r\n                    url.location.href;              //window\r\n            }\r\n    \r\n            let beginIndex = url.indexOf('?');\r\n            if (beginIndex < 0) { //不存在查询字符串\r\n                return;\r\n            }\r\n    \r\n            let endIndex = url.indexOf('#');\r\n            if (endIndex < 0) {\r\n                endIndex = url.length;\r\n            }\r\n    \r\n            let qs = url.slice(beginIndex + 1, endIndex);\r\n            if (key === '') { //获取全部查询字符串的 string 类型。\r\n                return decodeURIComponent(qs);\r\n            }\r\n    \r\n    \r\n            let obj = exports.parse(qs);\r\n    \r\n            if (key === undefined) { //未指定键，获取整个 Object 对象。\r\n                return obj;\r\n            }\r\n    \r\n            if (!ignoreCase || key in obj) { //区分大小写或有完全匹配的键。\r\n                return obj[key];\r\n            }\r\n    \r\n            //以下是不区分大小写\r\n            key = key.toString().toLowerCase();\r\n    \r\n            for (let name in obj) {\r\n                if (name.toLowerCase() == key) {\r\n                    return obj[name];\r\n                }\r\n            }\r\n    \r\n        },\r\n    \r\n        /**\r\n        * 给指定的 url 添加一个查询字符串。\r\n        * 注意，该方法会保留之前的查询字符串，并且覆盖同名的查询字符串。\r\n        * @param {string} url 组装前的 url。\r\n        * @param {string|Object} key 要添加的查询字符串的键。\r\n        *   当传入一个 Object 对象时，会对键值对进行递归组合编码成查询字符串。\r\n        * @param {string} [value] 要添加的查询字符串的值。\r\n        * @retun {string} 返回组装后的新的 url。\r\n        * @example\r\n            //返回 'http://test.com?a=1&b=2&c=3#hash'\r\n            Query.add('http://test.com?a=1&b=2#hash', 'c', 3);  \r\n            \r\n            //返回 'http://test.com?a=3&b=2&d=4#hash'\r\n            Query.add('http://test.com?a=1&b=2#hash', {a: 3, d: 4});  \r\n        */\r\n        add(url, key, value) {\r\n            var qs = exports.get(url) || {}; //先取出原来的。\r\n    \r\n            if (typeof key == 'object') {\r\n                Object.assign(qs, key);\r\n            }\r\n            else {\r\n                qs[key] = value;\r\n            }\r\n    \r\n    \r\n            //过滤掉值为 null 的项\r\n            var obj = {};\r\n    \r\n            for (let key in qs) {\r\n                let value = qs[key];\r\n    \r\n                if (value === null) {\r\n                    continue;\r\n                }\r\n                else {\r\n                    obj[key] = value;\r\n                }\r\n    \r\n            }\r\n    \r\n            return exports.set(url, obj);\r\n    \r\n        },\r\n    \r\n    \r\n        /**\r\n        * 删除指定的 url 的查询字符串。\r\n        * 已重载 remove(url);          //删除全部查询字符串。\r\n        * 已重载 remove(url, key);     //删除指定键的查询字符串。\r\n        * 已重载 remove(window);       //删除指定 window 窗口的全部查询字符串，会导致页面刷新。\r\n        * 已重载 remove(window, key);  //删除指定 window 窗口的指定键查询字符串，会导致页面刷新。\r\n        * 已重载 remove(location);     //删除指定 location 窗口的全部查询字符串，会导致页面刷新。\r\n        * 已重载 remove(location, key);//删除指定 location 窗口的指定键查询字符串，会导致页面刷新。\r\n        */\r\n        remove(url, key) {\r\n            let location = null;\r\n    \r\n            if (typeof url == 'object') {\r\n                if ('href' in url) {\r\n                    location = url;         //location\r\n                }\r\n                else {\r\n                    location = url.location; //window\r\n                }\r\n    \r\n                url = location.href;\r\n            }\r\n    \r\n            let qs = '';\r\n    \r\n            if (key) {\r\n                qs = exports.get(url);\r\n                delete qs[key];\r\n            }\r\n    \r\n            url = replace(url, qs);\r\n    \r\n            //设置整个 location.href 会刷新\r\n            if (location) {\r\n                location.href = url;\r\n            }\r\n    \r\n            return url;\r\n    \r\n        },\r\n    \r\n    \r\n        /**\r\n        * 给指定的 url 添加一个随机查询字符串。\r\n        * 注意，该方法会保留之前的查询字符串，并且添加一个键名为随机字符串而值为空字符串的查询字符串。\r\n        * @param {string} url 组装前的 url。\r\n        * @param {number} [len] 随机键的长度。\r\n        * @retun {string} 返回组装后的新的 url。\r\n        * @example\r\n            //返回值类似 'http://test.com?a=1&b=2&7A8CEBAFC6B4=#hash'\r\n            Query.random('http://test.com?a=1&b=2#hash');  \r\n            \r\n            //返回值类似 'http://test.com?a=1&b=2&7A8CE=#hash' \r\n            Query.random('http://test.com?a=1&b=2#hash', 5); //随机键的长度为 5\r\n     \r\n        */\r\n        random(url, len) {\r\n            var key = $String.random(len);\r\n            return exports.add(url, key, undefined);\r\n        },\r\n    \r\n    \r\n    \r\n        /**\r\n        * 把指定的 url 和查询字符串组装成一个新的 url。\r\n        * 注意，该方法会删除之前的查询字符串。\r\n        * @param {string} url 组装前的 url。\r\n        * @param {string|Object} key 要设置的查询字符串的键。\r\n            当传入一个 Object 对象时，会对键值对进行递归组合编码成查询字符串。\r\n        * @param {string} [value] 要添加的查询字符串的值。\r\n        * @retun {string} 返回组装后的新的 url。\r\n        * @example\r\n            //返回 'http://test.com?c=3#hash'\r\n            Query.set('http://test.com?a=1&b=2#hash', 'c', 3);  \r\n            \r\n            //返回 'http://test.com?a=3&d=4#hash'\r\n            Query.set('http://test.com?a=1&b=2#hash', {a: 3, d: 4});  \r\n        */\r\n        set(url, key, value) {\r\n            var location = null;\r\n    \r\n            if (typeof url == 'object') {\r\n                if ('href' in url) {\r\n                    location = url;         //location\r\n                }\r\n                else {\r\n                    location = url.location; //window\r\n                }\r\n    \r\n                url = location.href;\r\n            }\r\n    \r\n    \r\n            var qs = '';\r\n            var type = typeof key;\r\n            var isValueType = (/^(string|number|boolean)$/).test(type);\r\n    \r\n            //set(url, qs);\r\n            if (arguments.length == 2 && isValueType) {\r\n                qs = encodeURIComponent(key);\r\n            }\r\n            else {\r\n                qs = type == 'object' ? key : { [key]: value, };\r\n            }\r\n    \r\n    \r\n            url = replace(url, qs);\r\n    \r\n    \r\n            //设置整个 location.href 会刷新\r\n            if (location) {\r\n                location.href = url;\r\n            }\r\n    \r\n            return url;\r\n    \r\n    \r\n        },\r\n    \r\n        /**\r\n        * 判断指定的 url 是否包含特定名称的查询字符串。\r\n        * @param {string} url 要检查的 url。\r\n        * @param {string} [key] 要提取的查询字符串的键。\r\n        * @param {boolean} [ignoreCase=false] 是否忽略参数 key 的大小写，默认区分大小写。\r\n            如果要忽略 key 的大小写，请指定为 true；否则不指定或指定为 false。\r\n            当指定为 true 时，将优先检索完全匹配的键所对应的项；若没找到然后再忽略大小写去检索。\r\n        * @retun {boolean} 如果 url 中包含该名称的查询字符串，则返回 true；否则返回 false。\r\n        * @example\r\n            Query.has('http://test.com?a=1&b=2#hash', 'a');  //返回 true\r\n            Query.has('http://test.com?a=1&b=2#hash', 'b');  //返回 true\r\n            Query.has('http://test.com?a=1&b=2#hash', 'c');  //返回 false\r\n            Query.has('http://test.com?a=1&b=2#hash', 'A', true); //返回 true\r\n            Query.has('http://test.com?a=1&b=2#hash');       //返回 true\r\n        */\r\n        has(url, key, ignoreCase) {\r\n            //重载 has(location, key, ignoreCase)\r\n            //重载 has(window, key, ignoreCase)\r\n            if (typeof url == 'object') {\r\n                url = ('href' in url) ? url.href :  //location\r\n                    url.location.href;              //window\r\n            }\r\n    \r\n            var obj = exports.get(url); //获取全部查询字符串的 Object 形式\r\n    \r\n            if (!obj) {\r\n                return false;\r\n            }\r\n    \r\n            if (!key) { //不指定名称，\r\n                return !$Object.isEmpty(obj); //只要有数据，就为 true\r\n            }\r\n    \r\n            if (key in obj) { //找到完全匹配的\r\n                return true;\r\n            }\r\n    \r\n            if (ignoreCase) { //明确指定了忽略大小写\r\n                key = key.toString().toLowerCase();\r\n    \r\n                for (let name in obj) {\r\n                    if (name.toLowerCase() == key) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n    \r\n            //区分大小写，但没找到\r\n            return false;\r\n    \r\n        },\r\n    \r\n        /**\r\n        * 对查询字符串中的值部分进行转换过滤。\r\n        * 如 `http://www.test.com/?a=XXX`，其中 `XXX` 就是要过滤的部分。\r\n        * @return {String}\r\n        */\r\n        escape(string) {\r\n            var s = String(string);\r\n            return escape(s).replace(/\\+/g, \"%2B\");\r\n        },\r\n    \r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/query/Query.js"
    },
    "Script": {
        "id": "Script",
        "name": "Script",
        "names": [
            "Script"
        ],
        "file": "temp/node_modules/@definejs/script/modules/Script.js",
        "ext": ".js",
        "package": {
            "alias": "script",
            "name": "@definejs/script",
            "version": "1.0.0"
        },
        "content": "/**\n* src: @definejs/script/modules/Script.js\n* pkg: @definejs/script@1.0.0\n*/\ndefine('Script', function (require, module, exports) { \n    \r\n    const $Object = require('Object');\r\n    \r\n    /**\r\n    * 加载单个 js 文件。\r\n    */\r\n    function loadItem(url, charset, document, onload) {\r\n        let id;\r\n    \r\n        if (typeof url == 'object') { //传入的是一个 {} \r\n            let config = url;\r\n    \r\n            id = config.id;\r\n            url = config.url;\r\n            charset = config.charset;\r\n            document = config.document;\r\n            onload = config.onload;\r\n        }\r\n    \r\n    \r\n        let script = document.createElement('script');\r\n    \r\n        if (onload) { //指定了回调函数，则设置它\r\n            if (script.readyState) { //IE\r\n                /**@ignore*/\r\n                script.onreadystatechange = function () {\r\n                    let readyState = script.readyState;\r\n    \r\n                    if (readyState == 'loaded' || readyState == 'complete') {\r\n                        script.onreadystatechange = null; //避免重复执行回调\r\n                        onload();\r\n                    }\r\n                };\r\n            }\r\n            else { //标准\r\n                script.onload = onload;\r\n            }\r\n    \r\n        }\r\n    \r\n        script.src = url;\r\n    \r\n        if (charset) {\r\n            script.charset = charset;\r\n        }\r\n    \r\n        if (id) {\r\n            script.id = id;\r\n        }\r\n    \r\n        document.head.appendChild(script);\r\n    }\r\n    \r\n    /**\r\n    * 顺序加载批量 js 文件。\r\n    */\r\n    function loadList(urls, charset, document, fn) {\r\n        if (urls.length == 0) {\r\n            fn && fn();\r\n            return;\r\n        }\r\n    \r\n    \r\n        let index = 0;\r\n    \r\n        (function next () {\r\n            let url = urls[index];\r\n    \r\n            loadItem(url, charset, document, function () {\r\n                index++;\r\n    \r\n                if (index < urls.length) {\r\n                    next();\r\n                }\r\n                else {\r\n                    fn && fn();\r\n                }\r\n            });\r\n    \r\n        })();\r\n    }\r\n    \r\n    \r\n    \r\n    module.exports = exports = {\r\n        /**\r\n        * 默认配置。\r\n        */\r\n        defaults: require('Script.defaults'),\r\n    \r\n        /**\r\n        * 跨浏览器动态加载 JS 文件，并在加载完成后执行指定的回调函数。\r\n        * @param {string|Array} opt.url 要加载的 JS 文件的 url 地址，如果要批量加载，则为一个地址数组。\r\n        * @param {string} [opt.charset=\"utf-8\"] 要加载的 JS 文件的字符编码，默认为 utf-8。\r\n        * @param {Document} [opt.document=window.document] 要加载的 JS 文件的上下文环境的 document，默认为当前窗口的 document 对象。\r\n        * @param {function} [opt.onload] 加载成功后的回调函数。\r\n        * @example\r\n            Script.load({\r\n                url: 'a.js',\r\n                charset: 'utf-8',\r\n                document: document,\r\n                id: 'myScript',\r\n                onload(){ }\r\n            });\r\n    \r\n            Script.load('a.js', 'utf-8', document, function(){});\r\n            Script.load('a.js', 'utf-8', function(){});\r\n            Script.load('a.js', document, function(){});\r\n            Script.load('a.js', function(){});\r\n    \r\n            //批量加载\r\n            Script.load(['a.js', 'b.js'], function(){});\r\n        */\r\n        load(opt) {\r\n            let obj = { ...exports.defaults, };//复制一份\r\n    \r\n            //注意，params 有可能是个数组，不能用 typeof 为 'object'\r\n            if ($Object.isPlain(opt)) { //纯对象 {}\r\n                Object.assign(obj, opt);\r\n            }\r\n            else {\r\n                obj.url = opt;\r\n    \r\n                switch (typeof arguments[1]) {\r\n                    case 'string':\r\n                        obj.charset = arguments[1];\r\n                        break;\r\n                    case 'object':\r\n                        obj.document = arguments[1];\r\n                        break;\r\n                    case 'function':\r\n                        obj.onload = arguments[1];\r\n                        break;\r\n                }\r\n    \r\n                switch (typeof arguments[2]) {\r\n                    case 'object':\r\n                        obj.document = arguments[2];\r\n                        break;\r\n                    case 'function':\r\n                        obj.onload = arguments[2];\r\n                        break;\r\n                }\r\n    \r\n                if (arguments[3]) {\r\n                    obj.onload = arguments[3];\r\n                }\r\n            }\r\n    \r\n            let url = obj.url;\r\n    \r\n            if (typeof url == 'string') {\r\n                loadItem(obj);\r\n            }\r\n            else if (Array.isArray(url)) {\r\n                loadList(url, obj.charset, obj.document, obj.onload);\r\n            }\r\n            else {\r\n                throw new Error('参数 opt.url 必须为 string 或 string 的数组');\r\n            }\r\n    \r\n        },\r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/script/Script.js"
    },
    "Script.defaults": {
        "id": "Script.defaults",
        "name": "Script.defaults",
        "names": [
            "Script.defaults"
        ],
        "file": "temp/node_modules/@definejs/script/modules/Script.defaults.js",
        "ext": ".js",
        "package": {
            "alias": "script",
            "name": "@definejs/script",
            "version": "1.0.0"
        },
        "content": "/**\n* src: @definejs/script/modules/Script.defaults.js\n* pkg: @definejs/script@1.0.0\n*/\ndefine('Script.defaults', function (require, module, exports) { \n    \r\n    module.exports = {\r\n        url: '',\r\n        id: '',\r\n        charset: 'utf-8',\r\n        document: window.document,\r\n        onload: null,\r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/script/Script.defaults.js"
    },
    "SessionStorage": {
        "id": "SessionStorage",
        "name": "SessionStorage",
        "names": [
            "SessionStorage"
        ],
        "file": "temp/node_modules/@definejs/session-storage/modules/SessionStorage.js",
        "ext": ".js",
        "package": {
            "alias": "session-storage",
            "name": "@definejs/session-storage",
            "version": "1.0.0"
        },
        "content": "/**\n* src: @definejs/session-storage/modules/SessionStorage.js\n* pkg: @definejs/session-storage@1.0.0\n*/\ndefine('SessionStorage', function (require, module, exports) { \n    const $Object = require('Object');\r\n    const Storage = module.require('Storage');\r\n    const mapper = new Map();\r\n    \r\n    /**\r\n    * 会话存储工具类。\r\n    *\r\n    * sessionStorage 属性允许你访问一个 session Storage 对象。\r\n    * 它与 localStorage 相似，不同之处在于 localStorage 里面存储的数据没有过期时间设置，\r\n    * 而存储在 sessionStorage 里面的数据在页面会话结束时会被清除。\r\n    * 页面会话在浏览器打开期间一直保持，并且重新加载或恢复页面仍会保持原来的页面会话。\r\n    * 在新标签或窗口打开一个页面会初始化一个新的会话，这点和 session cookies 的运行方式不同。\r\n    * 应该注意的是，无论是 localStorage 还是 sessionStorage 中保存的数据都仅限于该页面的协议。\r\n    *\r\n    * 此处的 SessionStorage 设计理念为：\r\n    *   SessionStorage 是针对多个应用的存储，每个应用都有自己独立的存储空间。\r\n    *   使用之前，一个应用请先配置应用的名称(通过配置 `SessionStorage` 模块的 `name` 字段)。\r\n    *   为防止跟别的应用名称冲突，可以加一些随机数，如当前应用名称为 `kis-cloud`，则可以配置为 `kis-cloud-9DCA`。\r\n    *   通过应用的名称来区分每个应用的独立的存储空间。\r\n    *   在每个应用中，又可以创建多个 id 不同的 SessionStorage 的实例，每个 SessionStorage 实例都有自己的存储空间。\r\n    *   每个 SessionStorage 实例中可以储存不同的 key 和 value。\r\n    *   因此，从层级上来说，结构为：web 应用 -> SessionStorage 实例 -> 键值。\r\n    *\r\n    * @class\r\n    * @name SessionStorage\r\n    */\r\n    class SessionStorage {\r\n        /**\r\n        * 构造器。\r\n        *   id: '',         //当前 storage 实例的 id，拥有自己的存储空间。\r\n        *   config = {\r\n        *       name: '',   //必选，应用的名称。\r\n        *   };\r\n        */\r\n        constructor(id, config) {\r\n            config = $Object.deepAssign({}, exports.defaults, config);\r\n    \r\n            let name = config.name;\r\n    \r\n            if (!name) {\r\n                throw new Error(\r\n                    `@definejs/session-storage 是针对多个应用的存储，每个应用都有自己独立的存储空间。\r\n                    请先指定所在应用的名称(通过配置 @definejs/session-storage.defaults 模块的 name 字段) 。`\r\n                );\r\n            }\r\n    \r\n            let meta = {\r\n                'name': name,       //应用名称。\r\n                'id': id,           //\r\n            };\r\n    \r\n            mapper.set(this, meta);\r\n    \r\n        }\r\n    \r\n        /**\r\n        * 设置一对键值。\r\n        * 已重载 set(obj); 批量设置。\r\n        * 已重载 set(key, value); 单个设置。\r\n        * @param {string} key 要进行设置的键名称。\r\n        * @param value 要进行设置的值，可以是任何类型。\r\n        */\r\n        set(key, value) {\r\n            let meta = mapper.get(this);\r\n            let app = Storage.get(meta.name) || {}; //每次都实时从存储中获取。\r\n            let data = app[meta.id] || {};\r\n    \r\n            //重载 set({...}); 批量设置的情况。\r\n            if (typeof key == 'object') {\r\n                Object.assign(data, key);\r\n            }\r\n            else { //单个设置\r\n                data[key] = value;\r\n            }\r\n    \r\n            app[meta.id] = data;\r\n            Storage.set(meta.name, app);\r\n        }\r\n    \r\n        /**\r\n        * 根据给定的键获取关联的值。\r\n        * 已重载 get() 获取全部的情况。\r\n        * @param {string} [key] 要进行获取的键名称。\r\n        * @return 返回该键所关联的值。\r\n        */\r\n        get(key) {\r\n            let meta = mapper.get(this);\r\n            let app = Storage.get(meta.name) || {};   //每次都实时从存储中获取。\r\n            let data = app[meta.id];\r\n    \r\n            if (!data) {\r\n                return;\r\n            }\r\n    \r\n            //重载 get(); 获取全部的情况\r\n            if (arguments.length == 0) {\r\n                return data;\r\n            }\r\n    \r\n            //重载 get(key); 获取指定键的值。\r\n            return data[key];\r\n        }\r\n    \r\n        /**\r\n        * 移除给定的键所关联的项。\r\n        * @param {string} key 要进行移除的键名称。\r\n        */\r\n        remove(key) {\r\n            let meta = mapper.get(this);\r\n            let app = Storage.get(meta.name) || {}; //每次都实时从存储中获取。\r\n            let data = app[meta.id];\r\n    \r\n            if (!data) {\r\n                return;\r\n            }\r\n    \r\n            delete data[key];\r\n    \r\n            Storage.set(meta.name, app);\r\n        }\r\n    \r\n        /**\r\n        * 清空所有项。\r\n        */\r\n        clear() {\r\n            let meta = mapper.get(this);\r\n            let app = Storage.get(meta.name); //每次都实时从存储中获取。\r\n    \r\n            if (!app) {\r\n                return;\r\n            }\r\n    \r\n            delete app[meta.id];\r\n            Storage.set(meta.name, app);\r\n        }\r\n    }\r\n    \r\n    SessionStorage.defaults = require('SessionStorage.defaults');\r\n    module.exports = exports = SessionStorage;\n});",
        "dest": "./output/definejs/src/@definejs/session-storage/SessionStorage.js"
    },
    "SessionStorage.defaults": {
        "id": "SessionStorage.defaults",
        "name": "SessionStorage.defaults",
        "names": [
            "SessionStorage.defaults"
        ],
        "file": "temp/node_modules/@definejs/session-storage/modules/SessionStorage.defaults.js",
        "ext": ".js",
        "package": {
            "alias": "session-storage",
            "name": "@definejs/session-storage",
            "version": "1.0.0"
        },
        "content": "/**\n* src: @definejs/session-storage/modules/SessionStorage.defaults.js\n* pkg: @definejs/session-storage@1.0.0\n*/\ndefine('SessionStorage.defaults', function (require, module, exports) { \n    \r\n    /**\r\n    * SessionStorage 模块的默认配置\r\n    * @name SessionStorage.defaults\r\n    */\r\n    module.exports = {\r\n        /**\r\n        * 应用的名称。\r\n        * 设定后即可创建与获取在该名称下的本地存储，从而避免跟其它应用的冲突。\r\n        */\r\n        name: '',\r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/session-storage/SessionStorage.defaults.js"
    },
    "SessionStorage/Storage": {
        "id": "SessionStorage/Storage",
        "name": "Storage",
        "names": [
            "SessionStorage",
            "Storage"
        ],
        "file": "temp/node_modules/@definejs/session-storage/modules/SessionStorage/Storage.js",
        "ext": ".js",
        "package": {
            "alias": "session-storage",
            "name": "@definejs/session-storage",
            "version": "1.0.0"
        },
        "content": "/**\n* src: @definejs/session-storage/modules/SessionStorage/Storage.js\n* pkg: @definejs/session-storage@1.0.0\n*/\ndefine('SessionStorage/Storage', function (require, module, exports) { \n    const CircularJSON = require('circular-json');\r\n    \r\n    const storage = window.sessionStorage;\r\n    const key = `@definejs/session-storage`;\r\n    let json = storage.getItem(key) || '{}';        //全部数据的字符串形式。\r\n    let all = CircularJSON.parse(json) || {};       //全部数据的对象形式。  \r\n    \r\n    \r\n    \r\n    //保存到浏览器层面的存储。\r\n    function save() {\r\n        json = CircularJSON.stringify(all);\r\n        storage.setItem(key, json);\r\n    }\r\n    \r\n    \r\n    module.exports = {\r\n        /**\r\n        * 设置一对键值。\r\n        * @param {string} key 要进行设置的键名称。\r\n        * @param value 要进行设置的值，可以是任何类型。\r\n        */\r\n        set(key, value) {\r\n            all[key] = value;\r\n            save();\r\n        },\r\n    \r\n        /**\r\n        * 根据给定的键获取关联的值。\r\n        * @param {string} key 要进行获取的键名称。\r\n        * @return 返回该键所关联的值。\r\n        */\r\n        get(key) {\r\n            return all[key];\r\n        },\r\n    \r\n        /**\r\n        * 移除给定的键所关联的项。\r\n        * @param {string} key 要进行移除的键名称。\r\n        */\r\n        remove(key) {\r\n            delete all[key];\r\n            save();\r\n        },\r\n    \r\n        /**\r\n        * 清空所有项。\r\n        */\r\n        clear() {\r\n            all = {};\r\n            save();\r\n        },\r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/session-storage/SessionStorage/Storage.js"
    },
    "String": {
        "id": "String",
        "name": "String",
        "names": [
            "String"
        ],
        "file": "temp/node_modules/@definejs/string/modules/String.js",
        "ext": ".js",
        "package": {
            "alias": "string",
            "name": "@definejs/string",
            "version": "1.0.0"
        },
        "content": "/**\n* src: @definejs/string/modules/String.js\n* pkg: @definejs/string@1.0.0\n*/\ndefine('String', function (require, module, exports) { \n    \r\n    /**\r\n     * 字符串工具。\r\n     */\r\n    module.exports = exports = {\r\n        /**\r\n        * 用指定的值去填充一个字符串模板。\r\n        * @param {String} str 要进行填充的字符串模板。\r\n        * @param {Object} obj 要填充的键值对的数据对象。\r\n        * @return 返回一个用值去填充后的字符串。\r\n        * @example\r\n        *   $String.format('{id},{type}', {id: 1, type: 'app'}); //返回 `1,app`\r\n        *   $String.format('{2}{0}{1}', 'a', 'b', 'c'); //返回 `cab`\r\n        */\r\n        format(str, obj) {\r\n            let s = str;\r\n            let replaceAll = exports.replaceAll;\r\n    \r\n            //一个内部的填充函数。\r\n            let fill = (str, key, value) => { \r\n                if (Array.isArray(value)) {\r\n                    value = value.join('');\r\n                }\r\n    \r\n                str = replaceAll(str, `{${key}}`, value);\r\n                return str;\r\n            };\r\n    \r\n            if (typeof obj == 'object') {\r\n                for (let key in obj) {\r\n                    s = fill(s, key, obj[key]);\r\n                }\r\n            }\r\n            else {\r\n                let args = [...arguments].slice(1);\r\n    \r\n                args.forEach(function (index, item) { \r\n                    s = fill(s, index, item);\r\n                });\r\n            }\r\n    \r\n            return s;\r\n        },\r\n    \r\n        /**\r\n        * 对字符串进行全局替换。\r\n        * @param {String} target 要进行替换的目标字符串。\r\n        * @param {String} src 要进行替换的子串，旧值。\r\n        * @param {String} dest 要进行替换的新子串，新值。\r\n        * @return {String} 返回一个替换后的字符串。\r\n        * @example\r\n        *   $String.replaceAll('abcdeabc', 'bc', 'BC') //结果为 aBCdeBC\r\n        */\r\n        replaceAll(target, src, dest) {\r\n            return target.split(src).join(dest);\r\n        },\r\n    \r\n    \r\n        /**\r\n        * 对字符串进行区间内的替换。\r\n        * 该方法会把整个区间替换成新的字符串，包括区间标记。\r\n        * 已重载 replaceBetween(s, { begin, end, value, });\r\n        * @param {String} s 要进行替换的目标字符串。\r\n        * @param {String} beginTag 区间的开始标记。\r\n        * @param {String} endTag 区间的结束标记\r\n        * @param {String} value 要进行替换的新子串，新值。\r\n        * @return {String} 返回一个替换后的字符串。\r\n        *   当不存在开始标记或结束标记时，都会不进行任何处理而直接返回原字符串。\r\n        * @example\r\n        *   $String.replaceBetween('hello #--world--# this is #--good--#', '#--', '--#', 'javascript') \r\n        *   //结果为 'hello javascript this is javascript'\r\n        */\r\n        replaceBetween(s, beginTag, endTag, value) {\r\n            //重载 replaceBetween(s, opt);\r\n            if (typeof beginTag == 'object') {\r\n                let opt = beginTag;\r\n                beginTag = opt.begin;\r\n                endTag = opt.end;\r\n                value = opt.value;\r\n            }\r\n    \r\n    \r\n            if (s.indexOf(beginTag) < 0 || s.indexOf(endTag) < 0) {\r\n                return s;\r\n            }\r\n    \r\n            let list = s.split(beginTag).map(function (item) {\r\n                let a = item.split(endTag);\r\n    \r\n                if (a.length == 1) {\r\n                    return a[0];\r\n                }\r\n    \r\n                return value + a.slice(1).join(endTag);\r\n    \r\n            });\r\n    \r\n    \r\n            s = list.join('');\r\n    \r\n            return s;\r\n    \r\n        },\r\n    \r\n    \r\n        /**\r\n        * 右对齐此实例中的字符，在左边用指定的 Unicode 字符填充以达到指定的总长度。\r\n        * 当指定的总长度小实际长度时，将从右边开始算起，做截断处理，以达到指定的总长度。\r\n        * @param {String} str 要进行填充对齐的字符串。\r\n        * @param {Number} totalWidth 填充后要达到的总长度。\r\n        * @param {String} paddingChar 用来填充的模板字符串。\r\n        * @return {String} 返回一个经过填充对齐后的新字符串。\r\n        * @example\r\n        *   $String.padLeft('1234', 6, '0'); //结果为 '001234'，右对齐，从左边填充 '0'\r\n        *   $String.padLeft('1234', 2, '0'); //结果为 '34'，右对齐，从左边开始截断\r\n        */\r\n        padLeft(str, totalWidth, paddingChar) {\r\n            str = String(str); //转成字符串\r\n    \r\n            let len = str.length;\r\n            if (totalWidth <= len) { //需要的长度短于实际长度，做截断处理\r\n                return str.substr(-totalWidth); //从后面算起\r\n            }\r\n    \r\n            paddingChar = paddingChar || ' ';\r\n    \r\n            let arr = [];\r\n            arr.length = totalWidth - len + 1;\r\n    \r\n            return arr.join(paddingChar) + str;\r\n        },\r\n    \r\n    \r\n        /**\r\n        * 左对齐此字符串中的字符，在右边用指定的 Unicode 字符填充以达到指定的总长度。\r\n        * 当指定的总长度小实际长度时，将从左边开始算起，做截断处理，以达到指定的总长度。\r\n        * @param {String} str 要进行填充对齐的字符串。\r\n        * @param {Number} totalWidth 填充后要达到的总长度。\r\n        * @param {String} paddingChar 用来填充的模板字符串。\r\n        * @return {String} 返回一个经过填充对齐后的新字符串。\r\n        * @example\r\n        *   $String.padLeft('1234', 6, '0'); //结果为 '123400'，左对齐，从右边填充 '0'\r\n        *   $String.padLeft('1234', 2, '0'); //结果为 '12'，左对齐，从右边开始截断\r\n        */\r\n        padRight(str, totalWidth, paddingChar) {\r\n            let s = String(str); //转成字符串\r\n            let len = s.length;\r\n    \r\n            if (len >= totalWidth) {\r\n                return s.substring(0, totalWidth);\r\n            }\r\n    \r\n            paddingChar = paddingChar || ' ';\r\n    \r\n            let arr = [];\r\n            arr.length = totalWidth - len + 1;\r\n    \r\n    \r\n            return s + arr.join(paddingChar);\r\n        },\r\n    \r\n        /**\r\n        * 获取位于两个标记子串之间的子字符串。\r\n        * @param {String} str 要进行获取的大串。\r\n        * @param {String} beginTag 区间的开始标记。\r\n        * @param {String} endTag 区间的结束标记。\r\n        * @return {String} 返回一个子字符串。当获取不能结果时，统一返回空字符串。\r\n        * @example\r\n        *   $String.between('abc{!hello!} world', '{!', '!}'); //结果为 'hello' \r\n        */\r\n        between(str, beginTag, endTag) {\r\n            let startIndex = str.indexOf(beginTag);\r\n            if (startIndex < 0) {\r\n                return '';\r\n            }\r\n    \r\n            startIndex += beginTag.length;\r\n    \r\n            let endIndex = str.indexOf(endTag, startIndex);\r\n    \r\n            if (endIndex < 0) {\r\n                return '';\r\n            }\r\n    \r\n            return str.substr(startIndex, endIndex - startIndex);\r\n        },\r\n    \r\n        /**\r\n        * 产生指定格式或长度的随机字符串。\r\n        * @param {String|int} [formater=12] 随机字符串的格式，或者长度（默认为12个字符）。\r\n        *   格式中的每个随机字符用 'x' 来占位，如 'xxxx-1x2x-xx'\r\n        * @return {String} 返回一个指定长度的随机字符串。\r\n        * @example\r\n        *   $String.random();      //返回一个 12 位的随机字符串\r\n        *   $String.random(64);    //返回一个 64 位的随机字符串\r\n        *   $String.random('xxxx-你好xx-xx'); //类似 'A3EA-你好B4-DC'\r\n        */\r\n        random(formater) {\r\n            if (formater === undefined) {\r\n                formater = 12;\r\n            }\r\n    \r\n            //如果传入的是数字，则生成一个指定长度的格式字符串 'xxxxx...'\r\n            if (typeof formater == 'number') {\r\n                let size = formater + 1;\r\n                if (size < 0) {\r\n                    size = 0;\r\n                }\r\n    \r\n                formater = [];\r\n                formater.length = size;\r\n                formater = formater.join('x');\r\n            }\r\n    \r\n            return formater.replace(/x/g, function (c) {\r\n                let r = Math.random() * 16 | 0;\r\n                return r.toString(16);\r\n            }).toUpperCase();\r\n        },\r\n    \r\n        /**\r\n        * 根据指定的规则生成一个随机 id。\r\n        */\r\n        randomId(...list) {\r\n    \r\n            list = list.map(function (item, index) {\r\n    \r\n                if (typeof item == 'number') {\r\n                    item = exports.random(item);\r\n                    item = item.toLowerCase();\r\n                }\r\n    \r\n                return item;\r\n            });\r\n    \r\n            return list.join('');\r\n    \r\n        },\r\n    \r\n    \r\n        //---------------转换部分 -----------------------------------------------------\r\n    \r\n        /**\r\n        * 把一个字符串转成骆驼命名法。。\r\n        * 如 'font-size' 转成 'fontSize'。\r\n        * @param {String} str 要进行转换的字符串。\r\n        * @return 返回一个骆驼命名法的新字符串。\r\n        * @example\r\n        *   $String.toCamelCase('background-item-color') //结果为 'backgroundItemColor'\r\n        */\r\n        toCamelCase(str) {\r\n            let rmsPrefix = /^-ms-/;\r\n            let rdashAlpha = /-([a-z]|[0-9])/ig;\r\n    \r\n            return str.replace(rmsPrefix, 'ms-').replace(rdashAlpha, function (all, letter) {\r\n                return letter.toString().toUpperCase();\r\n            });\r\n    \r\n            /* 下面的是 mootool 的实现\r\n            return str.replace(/-\\D/g, function(match) {\r\n                return match.charAt(1).toUpperCase();\r\n            });\r\n            */\r\n        },\r\n    \r\n        /**\r\n        * 把一个字符串转成短线连接法。\r\n        * 如 fontSize 转成 font-size\r\n        * @param {String} str 要进行转换的字符串。\r\n        * @return 返回一个用短线连接起来的新字符串。\r\n        * @example\r\n        *   $String.toHyphenate('backgroundItemColor') //结果为 'background-item-color'\r\n        */\r\n        toHyphenate(str) {\r\n            return str.replace(/[A-Z]/g, function (match) {\r\n                return ('-' + match.charAt(0).toLowerCase());\r\n            });\r\n        },\r\n    \r\n        /**\r\n        * 把一个字符串转成 UTF8 编码。\r\n        * @param {String} str 要进行编码的字符串。\r\n        * @return {String} 返回一个 UTF8 编码的新字符串。\r\n        * @example\r\n        *   $String.toUtf8('你好'); //结果为 ''\r\n        */\r\n        toUtf8(str) {\r\n            let a = [];\r\n    \r\n            str.split('').forEach(function (ch, index) {\r\n                let code = ch.charCodeAt(0);\r\n    \r\n                if (code < 0x80) {\r\n                    a.push(code);\r\n                }\r\n                else if (code < 0x800) {\r\n                    a.push(((code & 0x7C0) >> 6) | 0xC0);\r\n                    a.push((code & 0x3F) | 0x80);\r\n                }\r\n                else {\r\n                    a.push(((code & 0xF000) >> 12) | 0xE0);\r\n                    a.push(((code & 0x0FC0) >> 6) | 0x80);\r\n                    a.push(((code & 0x3F)) | 0x80);\r\n                }\r\n            });\r\n    \r\n            a = a.map(function (item, index) {\r\n                return item.toString(16);\r\n            });\r\n    \r\n            return '%' + a.join('%');\r\n        },\r\n    \r\n    \r\n        /**\r\n        * 把一个字符串转成等价的值。\r\n        * 主要是把字符串形式的 0|1|true|false|null|undefined|NaN 转成原来的数据值。\r\n        * 当参数不是字符串或不是上述值之一时，则直接返回该参数，不作转换。\r\n        * @param {Object} value 要进行转换的值，可以是任何类型。\r\n        * @return {Object} 返回一个等价的值。\r\n        * @example\r\n        *   $String.toValue('NaN') //NaN\r\n        *   $String.toValue('null') //null\r\n        *   $String.toValue('true') //true\r\n        *   $String.toValue('false') //false\r\n        *   $String.toValue({}) //不作转换，直接原样返回\r\n        */\r\n        toValue(value) {\r\n            if (typeof value != 'string') { //拦截非字符串类型的参数\r\n                return value;\r\n            }\r\n    \r\n            let maps = {\r\n                //'0': 0,\r\n                //'1': 1,\r\n                'true': true,\r\n                'false': false,\r\n                'null': null,\r\n                'undefined': undefined,\r\n                'NaN': NaN\r\n            };\r\n    \r\n            return value in maps ? maps[value] : value;\r\n    \r\n        },\r\n    \r\n        //---------------分裂和提取部分 -----------------------------------------------------\r\n    \r\n        /**\r\n        * 对一个字符串进行多层次分裂，返回一个多维数组。\r\n        * @param {String} str 要进行分裂的字符串。\r\n        * @param {Array} separators 分隔符列表数组。\r\n        * @return {Array} 返回一个多维数组，该数组的维数，跟指定的分隔符 separators 的长度一致。\r\n        * @example\r\n            var str = 'a=1&b=2|a=100&b=200;a=111&b=222|a=10000&b=20000';\r\n            var separators = [';', '|', '&', '='];\r\n            var a = $String.split(str, separators);\r\n            //结果 a 为\r\n            a = \r\n            [                           // ';' 分裂的结果\r\n                [                       // '|'分裂的结果\r\n                    [                   // '&'分裂的结果\r\n                        ['a', '1'],     // '='分裂的结果\r\n                        ['b', '2']\r\n                    ],\r\n                    [\r\n                        ['a', '100'],\r\n                        ['b', '200']\r\n                    ]\r\n                ],\r\n                [\r\n                    [\r\n                        ['a', '111'],\r\n                        ['b', '222']\r\n                    ],\r\n                    [\r\n                        ['a', '10000'],\r\n                        ['b', '20000']\r\n                    ]\r\n                ]\r\n            ];\r\n        * \r\n        */\r\n        split(str, separators) {\r\n            let list = String(str).split(separators[0]);\r\n    \r\n            for (let i = 1, len = separators.length; i < len; i++) {\r\n                list = fn(list, separators[i], i);\r\n            }\r\n    \r\n            return list;\r\n    \r\n    \r\n            //一个内部方法\r\n            function fn(list, separator, dimension) {\r\n                dimension--;\r\n    \r\n                return list.map(function (item, index) {\r\n                    return dimension == 0 ?\r\n                        String(item).split(separator) :\r\n                        fn(item, separator, dimension); //递归\r\n                });\r\n            }\r\n    \r\n    \r\n        },\r\n    \r\n    \r\n        /**\r\n        * 获取一个字符串的字节长度。\r\n        * 普通字符的字节长度为 1；中文等字符的字节长度为 2。\r\n        * @param {String} s 要进行解析的字符串。\r\n        * @return {Number} 返回参数字符串的字节长度。\r\n        */\r\n        getByteLength(s) {\r\n            if (!s) {\r\n                return 0;\r\n            }\r\n    \r\n            return s.toString().replace(/[\\u0100-\\uffff]/g, '  ').length;\r\n        },\r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/string/String.js"
    },
    "Style": {
        "id": "Style",
        "name": "Style",
        "names": [
            "Style"
        ],
        "file": "temp/node_modules/@definejs/style/modules/Style.js",
        "ext": ".js",
        "package": {
            "alias": "style",
            "name": "@definejs/style",
            "version": "1.0.0"
        },
        "content": "/**\n* src: @definejs/style/modules/Style.js\n* pkg: @definejs/style@1.0.0\n*/\ndefine('Style', function (require, module, exports) { \n    \r\n    \r\n    const $Object = require('Object');\r\n    \r\n    //像素化。\r\n    function pixelize(value) {\r\n        if (typeof value == 'number') {\r\n            return value + 'px';\r\n        }\r\n    \r\n        if (typeof value == 'string') {\r\n            let isPixel = (/^\\d+px$/g).test(value);\r\n            let isEm = (/^\\d+em$/g).test(value);\r\n            let isRem = (/^\\d+rem$/g).test(value);\r\n            let isPercent = (/^\\d+%$/g).test(value);\r\n    \r\n            if (isPixel || isEm || isRem || isPercent) {\r\n                return value;\r\n            }\r\n    \r\n            //尝试提取和转换数字部分。\r\n            let v = parseInt(value);\r\n    \r\n            if (isNaN(v)) {\r\n                return value;\r\n            }\r\n    \r\n            return v + 'px';\r\n        }\r\n    \r\n        //其它情况。\r\n        return value;\r\n    }\r\n    \r\n    \r\n    /**\r\n    * 样式工具。\r\n    * @name Style\r\n    */\r\n    module.exports = exports = {\r\n        /**\r\n        * 把一个样式字符串对象化。\r\n        */\r\n        objectify(style) {\r\n            if (!style) {\r\n                return {};\r\n            }\r\n    \r\n            if (typeof style == 'object') {\r\n                return style;\r\n            }\r\n    \r\n            if (typeof style != 'string') {\r\n                return {};\r\n            }\r\n    \r\n            let obj = {};\r\n            let list = style.split(';');\r\n    \r\n            list.forEach(function (item) {\r\n                item = item.trim();\r\n                item = item.replace(/\\n/g, '');\r\n    \r\n                if (!item) {\r\n                    return;\r\n                }\r\n    \r\n                let a = item.split(':');\r\n                let key = a[0].trim();\r\n                let value = a[1].trim();\r\n    \r\n                obj[key] = value;\r\n    \r\n            });\r\n    \r\n            return obj;\r\n    \r\n        },\r\n    \r\n        /**\r\n        * 把一个样式对象字符串化。\r\n        * 以用于 DOM 节点的 style 属性中或 style 标签中。\r\n        * 已重载 stringify(style, spaces);             //\r\n        * 已重载 stringify(style, replacer, spaces);   //style 为一个对象或字符串，replacer 为一个函数，spaces 为一个数值;  \r\n        * 参数：\r\n        *   style: '',      //样式对象或字符串。\r\n        *   replace: fn,    //处理器函数，即替换函数。 如果指定，则针对每一项调用它以获得返回值。 如果不返回任何值，则扔掉该项。\r\n        *   spaces: 4,      //要生成的前导空格数。 如果指定非 0 值，则生成多行的形式；否则生成行内形式。\r\n        */\r\n        stringify(style, replacer, spaces) {\r\n            if (!style) {\r\n                return '';\r\n            }\r\n    \r\n            if (typeof style == 'string') {\r\n                style = exports.objectify(style);\r\n            }\r\n    \r\n    \r\n            //重载 stringify(style, spaces);\r\n            if (typeof replacer == 'number') {\r\n                spaces = replacer;\r\n                replacer = null;\r\n            }\r\n    \r\n    \r\n            let a = [];\r\n    \r\n            $Object.each(style, function (key, value) {\r\n    \r\n                //如果指定了处理器函数函数，则调用它以获得返回值。\r\n                value = replacer ? replacer(key, value) : value;\r\n    \r\n                //扔掉空值: null、undefined、''。\r\n                if (value == null || value === '') {\r\n                    return; // continue;\r\n                }\r\n    \r\n                let s = key + ': ' + value; //如 `width: 100px`\r\n    \r\n                if (spaces) {\r\n                    s = new Array(spaces + 1).join(' ') + s; //产生前导空格，如 `    width: 100px`\r\n                }\r\n    \r\n                a.push(s);\r\n    \r\n            });\r\n    \r\n            if (a.length == 0) {\r\n                return '';\r\n            }\r\n    \r\n            style = spaces ?\r\n                a.join('; \\n') + '; \\n' :   //如果指定了前导空格，则生成多行形式的。\r\n                a.join('; ') + '; ';        //否则生成行内形式的。\r\n    \r\n            return style;\r\n        },\r\n    \r\n        /**\r\n        * 把一个样式对象像素化。\r\n        */\r\n        pixelize(style, keys) {\r\n            //重载 pixelize(value);\r\n            //直接传一个值进来，根据情况转换成带像素单位的形式。\r\n            //如 pixelize(100); 得到 `100px`。\r\n            if (typeof style != 'object' && !keys) {\r\n                return pixelize(style);\r\n            }\r\n    \r\n            keys = keys || [];\r\n            style = exports.objectify(style);\r\n    \r\n            style = $Object.map(style, function (key, value) {\r\n                //该项并非要处理的项。\r\n                if (!keys.includes(key)) {\r\n                    return value;\r\n                }\r\n    \r\n                return pixelize(value);\r\n            });\r\n    \r\n            return style;\r\n        },\r\n    \r\n        /**\r\n        * 去掉空值。\r\n        * 即去掉值为 null、undefined、'' 的项。\r\n        */\r\n        trim(style) {\r\n            let obj = {};\r\n    \r\n            //过滤掉空值。\r\n            $Object.each(style, function (key, value) {\r\n                if (value == null || value === '') {\r\n                    return;\r\n                }\r\n    \r\n                obj[key] = value;\r\n            });\r\n    \r\n            return obj;\r\n        },\r\n    \r\n        /**\r\n        * 对每一项进行空值过滤，再进行合并得到一个样式对象。\r\n        */\r\n        merge(...items) {\r\n    \r\n            //对一个 item 进行处理\r\n            items = items.map(function (item) {\r\n                if (!item) {\r\n                    return {};\r\n                }\r\n    \r\n                item = exports.trim(item);\r\n                return item;\r\n    \r\n            });\r\n    \r\n    \r\n            let obj = Object.assign(...items);\r\n    \r\n            return obj;\r\n    \r\n        },\r\n    \r\n    \r\n    \r\n    };\r\n    \r\n    \n});",
        "dest": "./output/definejs/src/@definejs/style/Style.js"
    },
    "Tabs": {
        "id": "Tabs",
        "name": "Tabs",
        "names": [
            "Tabs"
        ],
        "file": "temp/node_modules/@definejs/tabs/modules/Tabs.js",
        "ext": ".js",
        "package": {
            "alias": "tabs",
            "name": "@definejs/tabs",
            "version": "1.0.2"
        },
        "content": "/**\n* src: @definejs/tabs/modules/Tabs.js\n* pkg: @definejs/tabs@1.0.2\n*/\ndefine('Tabs', function (require, module, exports) { \n    const $ = require('jquery');\r\n    const $Object = require('Object');\r\n    const Emitter = require('Emitter');\r\n    const Template = require('Template');\r\n    const Events = module.require('Events');\r\n    const Meta = module.require('Meta');\r\n    \r\n    const mapper = new Map();\r\n    \r\n    /**\r\n    * 构造器。\r\n    * 已重载 Tabs(config); //传入一个配置对象。\r\n    * 已重载 Tabs(container, config); //容器从配置对象中分离出来。\r\n    * @constructor\r\n    */\r\n    function Tabs(container, config) {\r\n        //重载 Tabs(config)\r\n        if ($Object.isPlain(container)) {\r\n            config = container;\r\n            container = config.container;\r\n        }\r\n    \r\n        config = Object.assign({}, exports.defaults, config);\r\n    \r\n        let emitter = new Emitter(this);\r\n    \r\n        let meta = Meta.create(config, {\r\n            'container': container,\r\n            'this': this,\r\n            'emitter': emitter,\r\n            '$': $(container),              //\r\n        });\r\n    \r\n        mapper.set(this, meta);\r\n    \r\n    \r\n        //对外暴露的属性。\r\n        Object.assign(this, {\r\n            'container': container,\r\n            'id': meta.id,\r\n            '$': meta.$,\r\n        });\r\n    \r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    Tabs.prototype = /**@lends Tabs#*/ {\r\n        constructor: Tabs,\r\n    \r\n        /**\r\n        * 构造实例时传入的 container 参数。\r\n        */\r\n        container: '',\r\n    \r\n        /**\r\n        * 当前实例的 id。\r\n        */\r\n        id: '',\r\n    \r\n        /**\r\n        * 当前实例关联的 DOM 节点对应的 jQuery 实例。\r\n        * 即 $(container) 的快捷方式。\r\n        */\r\n        $: null,\r\n    \r\n        /**\r\n        * 设置模板填充的规则，为模板填充进行预处理。\r\n        */\r\n        template(process) {\r\n            let meta = mapper.get(this);\r\n            let tpl = meta.tpl;\r\n    \r\n            if (!tpl) {\r\n                tpl = meta.tpl = new Template(meta.container);\r\n            }\r\n    \r\n            if (process) {\r\n                tpl.process(...arguments);\r\n            }\r\n    \r\n            //返回给外面，可能要用到。\r\n            //通过 tabs.template() 即可取得 tpl。\r\n            return tpl;\r\n        },\r\n    \r\n        /**\r\n        * 填充数据。\r\n        * 触发事件: `fill`。\r\n        */\r\n        fill(list, process) {\r\n            let meta = mapper.get(this);\r\n            let tpl = this.template(process); //确保 meta.tpl 存在，同时设置填充规则。\r\n            let html = tpl.fill(list);\r\n    \r\n            meta.$.html(html);\r\n            meta.list = list;\r\n    \r\n            meta.reset();\r\n            meta.emitter.fire('fill', [list]);\r\n    \r\n            return html;\r\n        },\r\n    \r\n        /**\r\n        * 渲染列表。\r\n        * 触发事件: `render`。\r\n        */\r\n        render(list, process) {\r\n            let meta = mapper.get(this);\r\n    \r\n            //首次渲染。\r\n            if (!meta.change) {\r\n                Events.bind(meta);\r\n            }\r\n    \r\n            if (list) {\r\n                this.fill(list, process);\r\n            }\r\n    \r\n            meta.emitter.fire('render', [list]);\r\n    \r\n        },\r\n    \r\n        /**\r\n        * 激活指定的项。\r\n        * 已重载 active(index);            //不传递任何附加数据，触发事件。\r\n        * 已重载 active(index, true);      //不传递任何附加数据，触发事件。 \r\n        * 已重载 active(index, options);   //传递一些附加数据，触发事件。\r\n        * 已重载 active(index, false);     //不传递任何附加数据，也不触发事件，在某种场景下会用到。\r\n        * @param {number} index 要激活的项的索引值。\r\n        * @param {Object} options 要传递给事件的附加数据。 \r\n        */\r\n        active(index, options) {\r\n            let fireEvent = true; //默认为触发事件。\r\n    \r\n            //重载\r\n            if (typeof options == 'boolean') {\r\n                fireEvent = options;\r\n                options = {};\r\n            }\r\n            else {\r\n                options = options || {};\r\n            }\r\n    \r\n            let meta = mapper.get(this);\r\n            let current = meta.current;\r\n    \r\n    \r\n            //当前项已激活，并且配置指定了不允许激活重复的项。\r\n            if (index == current.index && !meta.repeated) {\r\n                return;\r\n            }\r\n    \r\n    \r\n            let item = meta.list[index] || null;\r\n            let actived = meta.activedClass;\r\n            let old = Object.assign({}, current);           //先备份。\r\n    \r\n            if (current.$) {\r\n                current.$.removeClass(actived);    //移除上次已激活过的样式类名。\r\n            }\r\n    \r\n            current.index = index;\r\n            current.item = item;\r\n            current.event = options.event;\r\n            current.$ = meta.$.find(`${meta.selector}:eq(${index})`); //如 `>li:eq(2)`。\r\n    \r\n    \r\n            let info = {\r\n                'current': current,\r\n                'old': old,\r\n                'options': options,\r\n            };\r\n    \r\n    \r\n            meta.activing(info, function () {\r\n                current.$.addClass(actived);\r\n    \r\n                //指定了使用安静模式，则不触发事件。\r\n                if (!fireEvent) {\r\n                    return;\r\n                }\r\n    \r\n    \r\n                let args = [item, index, info];\r\n                let cmd = item ? item.cmd || '' : '';\r\n    \r\n                meta.emitter.fire('before-change', args);\r\n                meta.emitter.fire('change', `${index}`, args);\r\n    \r\n                //触发指定的事件名。\r\n                if (cmd) {\r\n                    meta.emitter.fire('change', cmd, args);\r\n                }\r\n    \r\n                meta.emitter.fire('change', args);\r\n            });\r\n    \r\n        },\r\n    \r\n        /**\r\n        * 移除指定的项。\r\n        * 仅处理数据和激活项的状态，不移除 DOM 节点。\r\n        * 触发事件: `before-remove`、`remove`。\r\n        */\r\n        remove(index) {\r\n            let meta = mapper.get(this);\r\n            let activedIndex = meta.current.index;\r\n    \r\n            meta.emitter.fire('before-remove', [index]);\r\n    \r\n            //移除的是当前激活项之前的，则重新设置激活状态即可。\r\n            if (index < activedIndex) {\r\n                this.active(activedIndex - 1, false);\r\n            }\r\n            else if (index == activedIndex) {\r\n                //移除的是当前的激活项\r\n                meta.reset();\r\n            }\r\n    \r\n            meta.list.splice(index, 1);\r\n    \r\n            meta.emitter.fire('remove', [index]);\r\n    \r\n        },\r\n    \r\n        /**\r\n        * 重置当前组件到未选中状态。\r\n        */\r\n        reset() {\r\n            let meta = mapper.get(this);\r\n            meta.reset();\r\n        },\r\n    \r\n    \r\n        /**\r\n        * 获取当前实例激活的索引值。\r\n        */\r\n        getActivedIndex() {\r\n            let meta = mapper.get(this);\r\n    \r\n            return meta.current.index;\r\n        },\r\n    \r\n        /**\r\n        * 获取或设置 active 时的动画过渡效果函数。\r\n        * 业务层可传入(设置)一个函数 fn 以实现页签激活的动画过渡效果。\r\n        * 函数 fn 会接受到两个参数:\r\n        *   info: { current, old, options, },   //激活过程中的相关信息。\r\n        *   done: function,                     //完成后的回调函数。\r\n        * 在函数 fn 中必须手动调用一下参数中传入的 done() 回调函数，以通知本组件进行后续处理。\r\n        * @example:\r\n        *   tabs.activing(function (info, done) { \r\n        *       console.log(info);\r\n        *       done();\r\n        *   });\r\n        */\r\n        activing(fn) {\r\n            let meta = mapper.get(this);\r\n    \r\n            fn = fn || meta.activing;\r\n    \r\n            if (typeof fn != 'function') {\r\n                throw new Error('参数 fn 必须为 function 类型。');\r\n            }\r\n    \r\n            meta.activing = fn;\r\n    \r\n            return fn; //业务层可能会到。\r\n        },\r\n    \r\n        /**\r\n        * 绑定事件。\r\n        */\r\n        on(...args) {\r\n            let meta = mapper.get(this);\r\n            meta.emitter.on(...args);\r\n        },\r\n    \r\n        /**\r\n        * 销毁本组件。\r\n        */\r\n        destroy() {\r\n            let meta = mapper.get(this);\r\n    \r\n            meta.emitter.destroy();\r\n            meta.tpl.destroy();\r\n            meta.$.off();\r\n    \r\n            mapper.delete(this);\r\n        },\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    };\r\n    \r\n    \r\n    Tabs.defaults = require('Tabs.defaults');\r\n    module.exports = exports = Tabs;\n});",
        "dest": "./output/definejs/src/@definejs/tabs/Tabs.js"
    },
    "Tabs.defaults": {
        "id": "Tabs.defaults",
        "name": "Tabs.defaults",
        "names": [
            "Tabs.defaults"
        ],
        "file": "temp/node_modules/@definejs/tabs/modules/Tabs.defaults.js",
        "ext": ".js",
        "package": {
            "alias": "tabs",
            "name": "@definejs/tabs",
            "version": "1.0.2"
        },
        "content": "/**\n* src: @definejs/tabs/modules/Tabs.defaults.js\n* pkg: @definejs/tabs@1.0.2\n*/\ndefine('Tabs.defaults', function (require, module, exports) { \n    /**\r\n    * Tabs 模块的默认配置。\r\n    * @name Tabs.defaults\r\n    */\r\n    module.exports = {\r\n        /**\r\n        * 生成组件时的 id 前缀。\r\n        * 建议保留现状。\r\n        */\r\n        idPrefix: 'definejs-Tabs',\r\n        /**\r\n        * 创建实例后首先给激的项。\r\n        */\r\n        current: null,\r\n        /**\r\n        * 按下去时的样式的 css 类名。\r\n        */\r\n        pressedClass: '',\r\n        /**\r\n        * 项目给激活时的样式的 css 类名。\r\n        */\r\n        activedClass: '',\r\n        /**\r\n        * 要监听的事件名。\r\n        */\r\n        eventName: 'click',\r\n        /**\r\n        * 取得项目列表所需要用到的选择器。\r\n        * 默认取全部直接子节点。\r\n        */\r\n        selector: '>*',\r\n        /**\r\n        * 是否允许重复激活相同的项。\r\n        * 当指定为 true 时，方响应已给激活的项目的重新点击。\r\n        */\r\n        repeated: false,\r\n    };\r\n    \r\n    \n});",
        "dest": "./output/definejs/src/@definejs/tabs/Tabs.defaults.js"
    },
    "Tabs/Events": {
        "id": "Tabs/Events",
        "name": "Events",
        "names": [
            "Tabs",
            "Events"
        ],
        "file": "temp/node_modules/@definejs/tabs/modules/Tabs/Events.js",
        "ext": ".js",
        "package": {
            "alias": "tabs",
            "name": "@definejs/tabs",
            "version": "1.0.2"
        },
        "content": "/**\n* src: @definejs/tabs/modules/Tabs/Events.js\n* pkg: @definejs/tabs@1.0.2\n*/\ndefine('Tabs/Events', function (require, module, exports) { \n    const $ = require('jquery');\r\n    \r\n    module.exports = {\r\n        /**\r\n        * \r\n        */\r\n        bind(meta) {\r\n            let { eventName, selector, pressedClass, } = meta;\r\n    \r\n            meta.change = function (event) {\r\n                let target = this;\r\n    \r\n                //每次都重新获取列表。\r\n                //因为可能会动态添加或删除了子节点。\r\n                let items = meta.$.find(selector).toArray();\r\n    \r\n                let index = items.findIndex(function (item) {\r\n                    return item === target;\r\n                });\r\n    \r\n                meta.this.active(index, { event, });\r\n            };\r\n    \r\n            //针对移动端的。\r\n            if (eventName == 'touch') { //特殊处理\r\n                meta.$.touch(selector, meta.change, pressedClass);\r\n                return;\r\n            }\r\n    \r\n    \r\n            //针对 PC 端的。\r\n            meta.$.on(eventName, selector, meta.change);\r\n    \r\n            meta.$.on('mousedown', selector, function (event) {\r\n                $(this).addClass(pressedClass);\r\n            });\r\n    \r\n            meta.$.on('mouseup mouseout', selector, function (event) {\r\n                $(this).removeClass(pressedClass);\r\n            });\r\n        },\r\n    \r\n    };\r\n    \r\n    \r\n    \n});",
        "dest": "./output/definejs/src/@definejs/tabs/Tabs/Events.js"
    },
    "Tabs/Meta": {
        "id": "Tabs/Meta",
        "name": "Meta",
        "names": [
            "Tabs",
            "Meta"
        ],
        "file": "temp/node_modules/@definejs/tabs/modules/Tabs/Meta.js",
        "ext": ".js",
        "package": {
            "alias": "tabs",
            "name": "@definejs/tabs",
            "version": "1.0.2"
        },
        "content": "/**\n* src: @definejs/tabs/modules/Tabs/Meta.js\n* pkg: @definejs/tabs@1.0.2\n*/\ndefine('Tabs/Meta', function (require, module, exports) { \n    \r\n    const IDMaker = require('IDMaker');\r\n    \r\n    \r\n    module.exports = {\r\n        create(config, others) {\r\n            let maker = new IDMaker(config.idPrefix);\r\n    \r\n            let meta = {\r\n                'id': maker.next(),                         //实例的 id。\r\n                'activedClass': config.activedClass || '',  //激活时的 item 的样式类名。\r\n                'pressedClass': config.pressedClass || '',  //按下时的 item 的样式类名。\r\n                'eventName': config.eventName || '',        //\r\n                'selector': config.selector || '',          //子项的选择器。\r\n                'repeated': !!config.repeated,              //是否允许重复激活。\r\n                'list': config.list || [],                  //fill() 时对应的列表数据。\r\n    \r\n    \r\n                //当前激活的信息。\r\n                current: {\r\n                    index: -1,\r\n                    item: null,     //list[index];\r\n                    event: null,\r\n                    $: null,\r\n                },\r\n    \r\n                'container': null,      //\r\n                'tpl': null,            //\r\n                'emitter': null,        //事件驱动器。\r\n                'this': null,           //当前实例，方便内部使用。\r\n                '$': null,              //组件最外层的 DOM 节点的 jQuery 实例。\r\n                'change': null,         //change 事件处理函数。 如果非空，则说明已绑定。\r\n    \r\n                reset() {\r\n                    meta.$.find(meta.selector).removeClass(meta.activedClass);\r\n    \r\n                    meta.current = {\r\n                        index: -1,\r\n                        item: null,     //list[index];\r\n                        event: null,\r\n                        $: null,\r\n                    };\r\n                },\r\n    \r\n                //在 acitve 过程中要执行的回调函数。 \r\n                //业务层可传入此函数以实现页签激活的动画过渡效果。\r\n                //若提供此函数，则必须手动调用一下参数中传入的 done() 回调函数，以通知本组件进行后续处理。\r\n                activing(info, done) {\r\n                    done();\r\n                },\r\n            };\r\n    \r\n    \r\n    \r\n    \r\n            Object.assign(meta, others);\r\n    \r\n    \r\n            return meta;\r\n    \r\n    \r\n        },\r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/tabs/Tabs/Meta.js"
    },
    "Tasker": {
        "id": "Tasker",
        "name": "Tasker",
        "names": [
            "Tasker"
        ],
        "file": "temp/node_modules/@definejs/tasker/modules/Tasker.js",
        "ext": ".js",
        "package": {
            "alias": "tasker",
            "name": "@definejs/tasker",
            "version": "1.0.2"
        },
        "content": "/**\n* src: @definejs/tasker/modules/Tasker.js\n* pkg: @definejs/tasker@1.0.2\n*/\ndefine('Tasker', function (require, module, exports) { \n    const Emitter = require('Emitter');\r\n    \r\n    const mapper = new Map();\r\n    const sid$todos = {};\r\n    let idCounter = 0;\r\n    \r\n    class Tasker {\r\n        /**\r\n        * 构造器。\r\n        * @param {Array} [list] 任务列表。\r\n        */\r\n        constructor(list) {\r\n            let id = `definejs-Tasker-${idCounter++}`;\r\n    \r\n            let meta = {\r\n                'id': id,\r\n                'emitter': new Emitter(this),\r\n                'list': list || [],\r\n            };\r\n    \r\n            mapper.set(this, meta);\r\n    \r\n            Object.assign(this, {\r\n                'id': meta.id,\r\n            });\r\n        }\r\n    \r\n        // /**\r\n        // * 当前实例的 id。\r\n        // */\r\n        // id = ''\r\n    \r\n        /**\r\n        * 并行处理。\r\n        * @param {Array} [list] 要处理的任务列表。 \r\n        *   如果不指定，则使用构造器中的。\r\n        */\r\n        parallel(list) {\r\n            let meta = mapper.get(this);\r\n            list = list || meta.list;\r\n    \r\n            //空的任务列表。\r\n            if (!list.length) {\r\n                meta.emitter.fire('all', [[]]); //里面要套个空数组。\r\n                return;\r\n            }\r\n    \r\n            //非空的任务列表。\r\n            let total = list.length;        //总项数。\r\n            let count = total;              //待处理的项数。\r\n            let values = new Array(total);  //收集每项异步操作的返回值。\r\n            let dones = new Array(total);   //[true, undefined, true, ..., ] 记录对应的项是否已完成。\r\n    \r\n            list.forEach(function (item, index) {\r\n                //done(index) 是异步调用，要多一层闭包。\r\n                (function (index) {\r\n                    //第三个参数是一个回调函数，即 done(value); \r\n                    //由业务层调用，以通知异步操作完成。\r\n                    //done(value); 接受一个参数作为此项异步操作的返回值进行收集，\r\n                    //最后会在全部完成后一起传过去给业务层。\r\n                    meta.emitter.fire('each', [item, index, function (value) {\r\n                        values[index] = value; //需要收集的值，由调用者传入。\r\n                        dones[index] = true;\r\n                        count--;\r\n    \r\n                        //计数为 0 时，不一定就全部完成了，\r\n                        //因为调用者可能会恶意多次调用 done() 以使计数减少到 0。\r\n                        //但有一点可以肯定的：只要计数不为 0，说明至少有一项未完成。\r\n                        if (count > 0) { //性能优化\r\n                            return;\r\n                        }\r\n    \r\n                        //安全起见，检查每项的完成状态。\r\n                        for (let i = 0; i < total; i++) {\r\n                            if (!dones[i]) {\r\n                                return;\r\n                            }\r\n                        }\r\n    \r\n                        //至此，全部项都已完成。\r\n                        meta.emitter.fire('all', [values]);\r\n                    }]);\r\n    \r\n                })(index);\r\n    \r\n            });\r\n        }\r\n    \r\n        /**\r\n        * 串行处理。\r\n        * @param {Array} [list] 要处理的任务列表。 \r\n        *   如果不指定，则使用构造器中的。\r\n        */\r\n        serial(list) {\r\n            let meta = mapper.get(this);\r\n            list = list || meta.list;\r\n    \r\n    \r\n            //空的任务列表。\r\n            if (!list.length) {\r\n                meta.emitter.fire('all', []);\r\n                return;\r\n            }\r\n    \r\n            //非空的任务列表。\r\n            let total = list.length;        //总项数。\r\n            let values = new Array(total);  //收集每项异步操作的返回值。\r\n    \r\n    \r\n            function process(index) {\r\n                let item = list[index];\r\n    \r\n                //第三个参数是一个回调函数，即 done(value); \r\n                //由业务层调用，以通知异步操作完成。\r\n                //done(value); 接受一个参数作为此项异步操作的返回值进行收集，\r\n                //最后会在全部完成后一起传过去给业务层。\r\n                meta.emitter.fire('each', [item, index, function (value) {\r\n                    values[index] = value; //需要收集的值，由调用者传入。\r\n                    index++;\r\n    \r\n                    if (index < total) {\r\n                        process(index);\r\n                    }\r\n                    else {\r\n                        meta.emitter.fire('all', [values]);\r\n                    }\r\n                }]);\r\n            }\r\n    \r\n            process(0);\r\n    \r\n        }\r\n    \r\n        /**\r\n        * 绑定事件。\r\n        */\r\n        on(...args) {\r\n            let meta = mapper.get(this);\r\n            meta.emitter.on(...args);\r\n        }\r\n    \r\n    \r\n        \r\n     \r\n    \r\n    }\r\n    \r\n    //静态成员。\r\n    Object.assign(Tasker, {\r\n        /**\r\n        * 支持多个并发异步加载操作，实际只会加载一次。\r\n        * 如果在加载过程中，再发起加载请求，则会放入待办列表中，加载完成后再依次执行。\r\n        * @param {String} sid 异步加载的名称，以此作为区分。 同一个名称的拥有同一个待办队列。\r\n        * @param {*} todo 要添加的待办项，可以是任意值。\r\n        * @param {function} load 实际要发起的异步加载操作函数。 异步加载函数体内必须显式调用传过去的函数，以调用异步加载完成。\r\n        */\r\n        todo(sid, todo, load) {\r\n            let todos = sid$todos[sid];\r\n    \r\n            if (todos) {\r\n                todos.push(todo);\r\n                return;\r\n            }\r\n    \r\n    \r\n            todos = sid$todos[sid] = [todo];\r\n    \r\n            load(function (each) {\r\n                sid$todos[sid] = null;\r\n    \r\n                if (typeof each == 'function') {\r\n                    todos.forEach(function (todo, index) {\r\n                        each(todo, index);\r\n                    });\r\n                }\r\n    \r\n                return todos;\r\n            });\r\n        }\r\n    });\r\n    \r\n    \r\n    module.exports = Tasker;\n});",
        "dest": "./output/definejs/src/@definejs/tasker/Tasker.js"
    },
    "Template": {
        "id": "Template",
        "name": "Template",
        "names": [
            "Template"
        ],
        "file": "temp/node_modules/@definejs/template/modules/Template.js",
        "ext": ".js",
        "package": {
            "alias": "template",
            "name": "@definejs/template",
            "version": "1.0.0"
        },
        "content": "/**\n* src: @definejs/template/modules/Template.js\n* pkg: @definejs/template@1.0.0\n*/\ndefine('Template', function (require, module, exports) { \n    \r\n    const $ = require('jquery');\r\n    const $String = require('String');\r\n    const $Object = require('Object');\r\n    const Emitter = require('Emitter');\r\n    const HTMLParser = require('HTMLParser');\r\n    \r\n    const Meta = module.require('Meta');\r\n    const Parser = module.require('Parser');\r\n    const Sample = module.require('Sample');\r\n    const Child = module.require('Child');\r\n    \r\n    const mapper = new Map();\r\n    \r\n    \r\n    class Template {\r\n        /**\r\n        * 构造器。\r\n        * 参数：\r\n        *   selector: '' | DOM | jQuery | {}, //DOM 节点或选择器。 也可以是一个分析到的数据结构对象。\r\n        */\r\n        constructor(selector) {\r\n            //如果传入的是一个纯对象，则认为是内部解析到的数据结构。\r\n            //即要从一个已解析到的数据对象中创建实例。\r\n            let isParsedData = $Object.isPlain(selector);\r\n    \r\n            let meta = Meta.create({\r\n                'emitter': new Emitter(this),\r\n                'this': this,\r\n            });\r\n    \r\n            mapper.set(this, meta);\r\n    \r\n    \r\n            //传入的是一个普通的 DOM 节点或其选择器。\r\n            if (!isParsedData) {\r\n                let node = $(selector).get(0); //包装、拆装，可以让入参多样化。\r\n    \r\n                if (!node) {\r\n                    selector = (selector instanceof $) ? selector.selector : selector;\r\n                    throw new Error('不存在模板节点: ' + selector);\r\n                }\r\n    \r\n                let isTPL = node.nodeName.toLowerCase() == 'template'; //判断是否为 <template> 模板节点。\r\n                let html = Sample.removeScript(node.innerHTML);         //要先移除可能给 `script` 标签包含的内容\r\n                let info = Parser.parse(html);\r\n    \r\n                meta.sample = Sample.betweenComment(html);\r\n                meta.name = isTPL ? node.getAttribute('name') : '';\r\n                meta.placeholder = isTPL ? node.getAttribute('placeholder') : '';\r\n                meta.innerHTML = html;\r\n                meta.outerHTML = node.outerHTML;\r\n                meta.node = node;\r\n    \r\n                meta.tpls = info.tpls.map(function (item) {\r\n                    let tpl = Child.create(Template, meta, item);\r\n                    let sample = meta.sample;\r\n    \r\n                    meta.sample = Sample.replace(sample, item); //替换掉当前模板在父模板中的内容。\r\n    \r\n                    return tpl;\r\n                });\r\n            }\r\n            else {//传入的是一个已解析到的数据对象。\r\n                let item = selector;\r\n    \r\n                Meta.assign(meta, item);\r\n    \r\n                meta.tpls = item.items.map(function (item) {\r\n                    let tpl = Child.create(Template, meta, item);\r\n    \r\n                    return tpl;\r\n                });\r\n            }\r\n    \r\n    \r\n            /**\r\n            * 这里增加个限制：\r\n            * 某一层里只允许出现一个纯 `<template>` 标签，且不允许再嵌套子级 `<template>` 标签。\r\n            * 纯 `<template>` 标签是指无 `name` 和 `placeholder` 属性的 `<template>` 标签。\r\n            * 这段逻辑会把该 template 实例中的 sample 上升为父级实例的 sample 值。\r\n            * 这样可以方便把一级模板用一对 `<template></template>` 标签括起来，等价于直接注释掉当模板的方式，\r\n            * 但比后者多了个语法高亮的优点。 例如：\r\n            *   <ul>\r\n            *       <template>\r\n            *           <li></li>\r\n            *       </temlate>\r\n            *   </ul>\r\n            * 与传统的用注释方式是等价的：\r\n            *   <ul>\r\n            *       <!--\r\n            *       <li></li>\r\n            *       -->\r\n            *   </ul>\r\n            */\r\n            (function () {\r\n                //获取空白名称的直接子级 tpl。\r\n                let tpl = meta.name$tpl[''];\r\n    \r\n                if (!tpl) {\r\n                    return;\r\n                }\r\n    \r\n                //空白名称的直接子级 tpl 对应 meta。\r\n                let tplMeta = mapper.get(tpl);\r\n                let keys = Object.keys(tplMeta.name$tpl);\r\n    \r\n                if (keys.length > 0) {\r\n                    throw new Error('无名称的 template 标签下不能再嵌套子级 template。');\r\n                }\r\n    \r\n                if (tplMeta.placeholder) {\r\n                    throw new Error('无名称的 template 标签不能设置 placeholder 属性。');\r\n                }\r\n    \r\n                //把空白名称的直接子级 tpl 的 sample 当成本级的 sample。\r\n                meta.sample = tplMeta.sample;\r\n    \r\n            })();\r\n    \r\n    \r\n            //对外暴露的属性。\r\n            Object.assign(this, {\r\n                'id': meta.id,\r\n                '_meta': meta, //用于测试。\r\n            });\r\n    \r\n        }\r\n    \r\n        // /**\r\n        // * 当前实例的 id。\r\n        // */\r\n        // id = '';\r\n    \r\n        // /**\r\n        // * 父实例。\r\n        // */\r\n        // parent = null;\r\n    \r\n    \r\n        /**\r\n        * 获取指定名称(或由多个名称组成的路径)节点所对应的下级 Template 实例。\r\n        * 已重载 template(names);                      //传入子模板的名称列表。\r\n        * 已重载 template(name0, name1, ..., nameN);   //依次传入多个子模板的名称。\r\n        */\r\n        template(names) {\r\n            //重载 template(name0, name1, ..., nameN); \r\n            if (!Array.isArray(names)) {\r\n                names = [...arguments];\r\n            }\r\n    \r\n            //从当前实例开始。\r\n            let tpl = this;\r\n            let meta = mapper.get(tpl);\r\n    \r\n            names.map(function (name) {\r\n                tpl = meta.name$tpl[name];  //取子级的实例。\r\n                meta = mapper.get(tpl);     //子级实例对应的元数据。\r\n            });\r\n    \r\n            return tpl;\r\n        }\r\n    \r\n        /**\r\n        * 获取指定名称(或由多个名称组成的路径)节点所对应的下级 sample 模板。\r\n        */\r\n        sample(...names) {\r\n            let tpl = this.template(...names);\r\n            let meta = mapper.get(tpl);\r\n    \r\n            if (!meta) {\r\n                throw new Error(`当前实例下不存在名称路径为 ${names.join(' ')} 的 Template 子实例。`);\r\n            }\r\n    \r\n            return meta.sample;\r\n        }\r\n    \r\n    \r\n        /**\r\n        * 对当前模板进行填充，并用填充后的 html 字符串渲染容器节点。\r\n        * @param {Object|Array} data 要填充的数据，可以是一个对象或数组。\r\n        * @param {function} process 填充规则的处理器，即处理函数。\r\n        * @return 填充后的 html 内容。\r\n        */\r\n        render(data, process) {\r\n            if (process) {\r\n                this.process(process);\r\n            }\r\n    \r\n            let meta = mapper.get(this);\r\n            let node = meta.node;\r\n            let html = this.fill(data);\r\n    \r\n            if (node) {\r\n                node.innerHTML = html;\r\n            }\r\n    \r\n            return html;\r\n        }\r\n    \r\n        /**\r\n        * 对当前模板及子模板(如果有)进行填充。\r\n        * 已重载 fill(data);\r\n        * 已重载 fill(data, param0, ..., paramN);\r\n        * 已重载 fill(name0, name1, ..., nameN, data);\r\n        * 已重载 fill(name0, name1, ..., nameN, data, param0, ..., paramN);\r\n        * @return {string} 返回填充后的 html 字符串。\r\n        */\r\n        fill(data, ...params) {\r\n            //重载 fill(name0, name1, ..., nameN, data, param0, ..., paramN);\r\n            //即一步到位填充指定路径的子模板。\r\n    \r\n            //全部参数列表。\r\n            let args = [...arguments];\r\n    \r\n    \r\n            //找出 data 在参数列表中所在的位置。\r\n            let index = args.findIndex(function (item) {\r\n                return Array.isArray(item) || $Object.isPlain(item);\r\n            });\r\n    \r\n            //参数列表中没找到任何可用于填充的数据。\r\n            if (index < 0) {\r\n                throw new Error('填充模板时必须指定数据为一个数组或纯对象。');\r\n            }\r\n    \r\n            //找到该数据，但它前面有子模板的名称。\r\n            //使用子模板进行填充。\r\n            if (index > 0) {\r\n                let names = args.slice(0, index);   //子模板名称列表，[name0, name1, ..., nameN];\r\n                let tpl = this.template(...names);\r\n    \r\n                if (!tpl) {\r\n                    throw new Error(`不存在路径为 ${names.join('.')} 的模板节点，请检查 html 模板树。`);\r\n                }\r\n    \r\n                let rest = args.slice(index);   //[data, param0, ..., paramN];\r\n                let html = tpl.fill(...rest);\r\n                return html;\r\n            }\r\n    \r\n    \r\n            //以下情况是直接传入数据进行填充的，不存在传入子模板的情况。\r\n    \r\n            let meta = mapper.get(this);\r\n    \r\n    \r\n            //这里不要缓存 sample，应该实时去获取 meta.sample，\r\n            //因为它可能在 process 函数中给使用者调用了 this.fix() 更改了。\r\n            //var sample = meta.sample; !!!\r\n    \r\n            //单个纯对象形式。\r\n            if (!Array.isArray(data)) {\r\n                meta.emitter.fire('process', args);\r\n    \r\n                //调用处理器获得填充数据。\r\n                //此处特意让处理器函数获得 `this` 执行环境。\r\n                data = meta.process.apply(meta.this, args);\r\n    \r\n                //处理器已直接返回 html 内容，则不需要用模板去填充。\r\n                if (typeof data == 'string') {\r\n                    return data;\r\n                }\r\n    \r\n                let html = $String.format(meta.sample, data);\r\n                return html;\r\n            }\r\n    \r\n            //传进来的是一个数组，则迭代每一项去填充。\r\n            //每一项都会调用处理器函数，并传递一些参数。\r\n            let htmls = data.map(function (item, index) {\r\n                //传给处理器的参数列表。\r\n                //除了传当前迭代的 item 和 index 外，还把 params 也一同传过去。\r\n                //params 就是用户在 fill(data, ...params) 传进来的、data 后面的其它参数。\r\n                //params 用于透传给处理器函数。\r\n                let args = [item, index, ...params];\r\n    \r\n                meta.emitter.fire('process', args);\r\n    \r\n                //调用处理器获得填充数据。\r\n                //此处特意让处理器函数获得 `this` 执行环境。\r\n                let data = meta.process.apply(meta.this, args);\r\n    \r\n                //处理器已直接返回 html 内容，则不需要用模板去填充。\r\n                if (typeof data == 'string') {\r\n                    return data;\r\n                }\r\n    \r\n                if (!data) {\r\n                    return ''; //这里要返回空串。\r\n                }\r\n    \r\n                let html = $String.format(meta.sample, data);\r\n                return html;\r\n            });\r\n    \r\n            return htmls.join('');\r\n        }\r\n    \r\n        /**\r\n        * 设置模板填充的处理规则。\r\n        * 已重载 process(fn);      //设置当前实例的处理器。\r\n        * 已重载 process({...});   //批量设置当前实例以及子实例的处理器。                 \r\n        * 已重载 process(name0, ..., nameN, fn);       //设置路径为 `name0->name1->...->nameN` 的子实例的处理器。\r\n        * 已重载 process(name0, ..., nameN, {...});    //批量设置前缀路径为`name0->name1->...->nameN` 的子实例的处理器。\r\n        */\r\n        process(process) {\r\n            let meta = mapper.get(this);\r\n    \r\n            //重载 process(fn); \r\n            //设置当前实例的 process 处理函数。\r\n            if (typeof process == 'function') {\r\n                meta.process = process;\r\n                return;\r\n            }\r\n    \r\n    \r\n            let args = [...arguments];\r\n    \r\n            //查找处理器所在的位置。\r\n            let index = args.findIndex(function (item) {\r\n                return typeof item == 'function' || $Object.isPlain(item);\r\n            });\r\n    \r\n            if (index < 0) {\r\n                throw new Error(`模板节点 ${meta.name} 缺少处理器。`);\r\n            }\r\n    \r\n    \r\n            //前面存在前缀名称，则跟后面的处理器合并为一个完整对象，方便后续统一处理。\r\n            //如 process('A', 'B', 'C', process); 则合并为 { A: { B: { C: process } } };\r\n            if (index > 0) {\r\n                let keys = args.slice(0, index);    //如 ['A', 'B', ]\r\n                let item = args[index];             //\r\n    \r\n                process = $Object.make({}, keys, item); //此时 process 是一个 {...}。\r\n            }\r\n    \r\n    \r\n            //展开成扁平结构。\r\n            //如：list = [ { keys: ['A', 'B', 'C'], value: fn, } ];\r\n            let list = $Object.flat(process);\r\n    \r\n            list.forEach(function (item) {\r\n                //去掉空字符串。 因为空串是代表自身。\r\n                let keys = item.keys.filter(function (key) {\r\n                    return !!key;\r\n                });\r\n    \r\n                let value = item.value;\r\n    \r\n                if (typeof value != 'function') {\r\n                    throw new Error(`模板节点 ${keys.join('.')} 的处理器必须为一个函数。`);\r\n                }\r\n    \r\n    \r\n                let tpl = meta.this.template(keys);\r\n    \r\n                if (!tpl) {\r\n                    console.warn(`不存在模板节点: ${keys.join('.')}`);\r\n                    return;\r\n                }\r\n    \r\n                //此时 value 为一个函数。\r\n                tpl.process(value);\r\n    \r\n            });\r\n    \r\n        }\r\n    \r\n        /**\r\n        * 修正模板中指定的占位符。\r\n        * 因为模板中的 html 给 DOM 解析和处理后，没有等号的占位符属性会给替换成有空值的属性值。\r\n        * 如 `<img {test} />` 经过 DOM 解析后会变成 `<img {test}=\"\" />`，这并不是我们想要的结果。\r\n        * 因此我们需要手动修正以替换回我们写模板时的结果。\r\n        */\r\n        fix(keys) {\r\n            let meta = mapper.get(this);\r\n            let sample = meta.sample;\r\n    \r\n            keys = Array.isArray(keys) ? keys : [keys];\r\n    \r\n            keys.map(function (key) {\r\n                let target = '{' + key + '}';\r\n                let old = target + '=\"\"';\r\n    \r\n                sample = sample.split(old).join(target); //replaceAll\r\n            });\r\n    \r\n            meta.sample = sample;\r\n        }\r\n    \r\n        /**\r\n        * 绑定事件。\r\n        */\r\n        on(...args) {\r\n            let meta = mapper.get(this);\r\n            meta.emitter.on(...args);\r\n        }\r\n    \r\n        /**\r\n        * 销毁本组件。\r\n        */\r\n        destroy() {\r\n            let meta = mapper.get(this);\r\n            if (!meta) {\r\n                return;\r\n            }\r\n    \r\n            meta.tpls.map(function (tpl) {\r\n                tpl.destroy();\r\n            });\r\n    \r\n            meta.emitter.destroy();\r\n            meta.node = null;\r\n            meta.parent = null;\r\n            meta.emitter = null;\r\n    \r\n            mapper.delete(this);\r\n    \r\n        }\r\n    \r\n        //静态成员。\r\n        /**\r\n        * 从一段 html 中解析出信息，并创建一个 Template 实例。\r\n        */\r\n        static create(html) {\r\n            html = `<template>${html}</template>`;\r\n    \r\n            let dom = HTMLParser.parse(html);\r\n    \r\n            //if (dom.childNodes.length != 1) {\r\n            //    throw new Error('要解析的 html 最外层只允许(必须)有一个节点。');\r\n            //}\r\n    \r\n            let tpl = new Template(dom.childNodes[0]);\r\n    \r\n            return tpl;\r\n        }\r\n    }\r\n    \r\n    module.exports = Template;\n});",
        "dest": "./output/definejs/src/@definejs/template/Template.js"
    },
    "Template/Child": {
        "id": "Template/Child",
        "name": "Child",
        "names": [
            "Template",
            "Child"
        ],
        "file": "temp/node_modules/@definejs/template/modules/Template/Child.js",
        "ext": ".js",
        "package": {
            "alias": "template",
            "name": "@definejs/template",
            "version": "1.0.0"
        },
        "content": "/**\n* src: @definejs/template/modules/Template/Child.js\n* pkg: @definejs/template@1.0.0\n*/\ndefine('Template/Child', function (require, module, exports) { \n    /**\r\n    * \r\n    */\r\n    module.exports = {\r\n        /**\r\n        * 根据已解析到的数据节点创建一个子级实例，并设置父子关系等。\r\n        */\r\n        create(Template, meta, item) {\r\n            let name = item.name;\r\n            let sibling = meta.name$tpl[name]; //兄弟节点。\r\n    \r\n            //检测同一级下是否已存在同名的模板。\r\n            if (sibling) {\r\n                throw new Error('同一级下已存在名为 `' + name + '` 的模板。');\r\n            }\r\n    \r\n            let tpl = new Template(item);\r\n    \r\n            meta.name$tpl[name] = tpl;\r\n            meta.parent = meta.this;    //设置父实例，内部使用的。\r\n            tpl.parent = meta.this;     //设置父实例，外部使用的。\r\n    \r\n            tpl.on('process', function (...args) {\r\n                meta.emitter.fire('process', args);\r\n            });\r\n    \r\n            return tpl;\r\n    \r\n        },\r\n    \r\n    \r\n    \r\n    \r\n    };\r\n    \r\n    \r\n    \r\n    \n});",
        "dest": "./output/definejs/src/@definejs/template/Template/Child.js"
    },
    "Template/Meta": {
        "id": "Template/Meta",
        "name": "Meta",
        "names": [
            "Template",
            "Meta"
        ],
        "file": "temp/node_modules/@definejs/template/modules/Template/Meta.js",
        "ext": ".js",
        "package": {
            "alias": "template",
            "name": "@definejs/template",
            "version": "1.0.0"
        },
        "content": "/**\n* src: @definejs/template/modules/Template/Meta.js\n* pkg: @definejs/template@1.0.0\n*/\ndefine('Template/Meta', function (require, module, exports) { \n    \r\n    const $String = require('String');\r\n    \r\n    const prefix = 'definejs-template-';    //用于生成组件 id 的前缀部分。\r\n    const suffix = 4;                       //用于生成组件 id 的随机部分的长度。\r\n    \r\n    \r\n    //默认的处理函数。\r\n    function process(data) {\r\n        return data;\r\n    }\r\n    \r\n    \r\n    module.exports = {\r\n        /**\r\n        *\r\n        */\r\n        create(others) {\r\n            let id = $String.randomId(prefix, suffix);\r\n    \r\n            let meta = {\r\n                'id': id,               //\r\n                'sample': '',           //\r\n                'name': '',             //\r\n                'placeholder': '',      //\r\n                'innerHTML': '',        //\r\n                'outerHTML': '',        //\r\n    \r\n                'tpls': [],             //下级实例列表。\r\n                'name$tpl': {},         //命名的下级实例映射，方便按名称读取。\r\n    \r\n                'node': null,           //DOM 节点。\r\n                'parent': null,         //父实例。\r\n                'emitter': null,        //\r\n                'this': null,           //\r\n    \r\n                'process': process,     //默认的处理函数。\r\n            };\r\n    \r\n    \r\n            Object.assign(meta, others);\r\n    \r\n            return meta;\r\n    \r\n        },\r\n    \r\n        /**\r\n        *\r\n        */\r\n        assign(meta, item) {\r\n            Object.assign(meta, {\r\n                'sample': item.sample,\r\n                'name': item.name,\r\n                'placeholder': item.placeholder,\r\n                'innerHTML': item.innerHTML,\r\n                'outerHTML': item.outerHTML,\r\n                'node': item.node,\r\n            });\r\n        },\r\n    \r\n    };\r\n    \r\n    \r\n    \n});",
        "dest": "./output/definejs/src/@definejs/template/Template/Meta.js"
    },
    "Template/Parser": {
        "id": "Template/Parser",
        "name": "Parser",
        "names": [
            "Template",
            "Parser"
        ],
        "file": "temp/node_modules/@definejs/template/modules/Template/Parser.js",
        "ext": ".js",
        "package": {
            "alias": "template",
            "name": "@definejs/template",
            "version": "1.0.0"
        },
        "content": "/**\n* src: @definejs/template/modules/Template/Parser.js\n* pkg: @definejs/template@1.0.0\n*/\ndefine('Template/Parser', function (require, module, exports) { \n    const HTMLParser = require('HTMLParser');\r\n    const Templates = module.require('Templates');\r\n    \r\n    module.exports = {\r\n        /**\r\n        *\r\n        */\r\n        parse(html) {\r\n            let dom = HTMLParser.parse(html);\r\n            let tpls = Templates.get(dom);\r\n    \r\n            return { dom, tpls, };\r\n        },\r\n    };\r\n    \r\n    \r\n    \n});",
        "dest": "./output/definejs/src/@definejs/template/Template/Parser.js"
    },
    "Template/Parser/Templates": {
        "id": "Template/Parser/Templates",
        "name": "Templates",
        "names": [
            "Template",
            "Parser",
            "Templates"
        ],
        "file": "temp/node_modules/@definejs/template/modules/Template/Parser/Templates.js",
        "ext": ".js",
        "package": {
            "alias": "template",
            "name": "@definejs/template",
            "version": "1.0.0"
        },
        "content": "/**\n* src: @definejs/template/modules/Template/Parser/Templates.js\n* pkg: @definejs/template@1.0.0\n*/\ndefine('Template/Parser/Templates', function (require, module, exports) { \n    /**\r\n    * 获取指定 template 节点的父亲 template 节点(。\r\n    */\r\n    function getParent(tpl) {\r\n        tpl = tpl.parentNode;\r\n    \r\n        while (tpl) {\r\n            if (tpl.nodeName == 'template') {\r\n                return tpl;\r\n            }\r\n    \r\n            tpl = tpl.parentNode;\r\n        }\r\n    \r\n        return null;\r\n    }\r\n    \r\n    \r\n    module.exports = {\r\n        /**\r\n        * 把所有的 template 节点信息提取出来。\r\n        * 返回一个由顶层 template 节点对应的描述信息对象组成的数组。\r\n        */\r\n        get(dom) {\r\n            let tpls = dom.getElementsByTagName('template');\r\n            let tpl$item = new Map();\r\n    \r\n            let list = tpls.map(function (tpl) {\r\n                let attributes = tpl.attributes;\r\n                let innerHTML = tpl.innerHTML;\r\n    \r\n                let item = {\r\n                    'id': tpl.id || '',\r\n                    'name': tpl.name || '',\r\n                    'placeholder': attributes.placeholder || '',\r\n                    'innerHTML': innerHTML,\r\n                    'outerHTML': tpl.outerHTML,\r\n                    'node': tpl,\r\n                    'sample': innerHTML,\r\n                    'parent': null,\r\n                    'attributes': attributes,\r\n                    'items': [],    //直接下级列表。\r\n                };\r\n    \r\n                tpl$item.set(tpl, item);\r\n    \r\n                return item;\r\n            });\r\n    \r\n    \r\n            let roots = list.filter(function (item) {\r\n                let tpl = getParent(item.node);\r\n                let parent = tpl$item.get(tpl);\r\n    \r\n                //收集根节点。\r\n                if (!parent) {\r\n                    return true;\r\n                }\r\n    \r\n                //顺便处理一下其它。\r\n                item.parent = parent;\r\n                parent.items.push(item);\r\n    \r\n                //替换掉子模板在父模板中的内容。\r\n                let sample = parent.sample;\r\n                let outerHTML = item.outerHTML;\r\n                let placeholder = item.placeholder;\r\n    \r\n                if (placeholder) {\r\n                    placeholder = '{' + placeholder + '}';\r\n                }\r\n    \r\n                parent.sample = sample.replace(outerHTML, placeholder);\r\n    \r\n            });\r\n    \r\n            return roots;\r\n        },\r\n    };\r\n    \r\n    \r\n    \n});",
        "dest": "./output/definejs/src/@definejs/template/Template/Parser/Templates.js"
    },
    "Template/Sample": {
        "id": "Template/Sample",
        "name": "Sample",
        "names": [
            "Template",
            "Sample"
        ],
        "file": "temp/node_modules/@definejs/template/modules/Template/Sample.js",
        "ext": ".js",
        "package": {
            "alias": "template",
            "name": "@definejs/template",
            "version": "1.0.0"
        },
        "content": "/**\n* src: @definejs/template/modules/Template/Sample.js\n* pkg: @definejs/template@1.0.0\n*/\ndefine('Template/Sample', function (require, module, exports) { \n    \r\n    \r\n    const $String = require('String');\r\n    \r\n    const script = {\r\n        begin: '<script type=\"text/template\">',\r\n        end: '</script>',\r\n    };\r\n    \r\n    const comment = {\r\n        begin: '<!--',\r\n        end: '-->',\r\n    };\r\n    \r\n    \r\n    \r\n    module.exports = exports = {\r\n        /**\r\n        * 替换掉子模板在父模板中的内容。\r\n        *   sample: 父模板的内容。\r\n        *   item: 解析到的模板数据结构。\r\n        */\r\n        replace(sample, item) {\r\n            let { outerHTML, placeholder, } = item;\r\n    \r\n            if (placeholder) {\r\n                placeholder = '{' + placeholder + '}';\r\n            }\r\n    \r\n            sample = exports.removeScript(sample);\r\n            sample = sample.replace(outerHTML, placeholder); //这里不要用全部替换，否则可能会误及后面的。\r\n    \r\n            return sample;\r\n        },\r\n    \r\n        /**\r\n        * 提取 `<!--` 和 `-->` 之间的内容作为 sample。\r\n        */\r\n        betweenComment(sample) {\r\n            let { begin, end, } = comment;\r\n    \r\n            if (sample.includes(begin) &&\r\n                sample.includes(end)) {\r\n    \r\n                sample = $String.between(sample, begin, end);   //这里用提取。\r\n            }\r\n    \r\n            return sample;\r\n        },\r\n    \r\n        /** \r\n        * 移除 html 中的 `<script type=\"text/template\">` 和 `</script>` 标签。\r\n        * 如果不存在 script 包裹标签，则原样返回。\r\n        */\r\n        removeScript(html) {\r\n            let { begin, end, } = script;\r\n    \r\n            if (html.includes(begin) &&\r\n                html.includes(end)) {\r\n    \r\n                html = html.split(begin).join('');   //这里用删除。\r\n                html = html.split(end).join('');\r\n            }\r\n    \r\n            return html;\r\n        },\r\n    \r\n    };\r\n    \r\n    \n});",
        "dest": "./output/definejs/src/@definejs/template/Template/Sample.js"
    },
    "Timer": {
        "id": "Timer",
        "name": "Timer",
        "names": [
            "Timer"
        ],
        "file": "temp/node_modules/@definejs/timer/modules/Timer.js",
        "ext": ".js",
        "package": {
            "alias": "timer",
            "name": "@definejs/timer",
            "version": "1.0.1"
        },
        "content": "/**\n* src: @definejs/timer/modules/Timer.js\n* pkg: @definejs/timer@1.0.1\n*/\ndefine('Timer', function (require, module, exports) { \n    /**\r\n    * 计时器。\r\n    */\r\n    \r\n    \r\n    const mapper = new Map();\r\n    let idCounter = 0;\r\n    \r\n    class Timer {\r\n        /**\r\n        * 构造器。\r\n        */\r\n        constructor() {\r\n            let id = `definejs-Timer-${idCounter++}`;\r\n    \r\n            let meta = {\r\n                'id': id,\r\n                't0': 0,\r\n                'list': [],\r\n            };\r\n    \r\n            mapper.set(this, meta);\r\n    \r\n            Object.assign(this, {\r\n                'id': meta.id,\r\n            });\r\n        }\r\n    \r\n        // /**\r\n        // * 当前实例的 id。\r\n        // */\r\n        // id = ''\r\n    \r\n        /**\r\n        * 开始计时。\r\n        */\r\n        start() {\r\n            let meta = mapper.get(this);\r\n            meta.t0 = new Date();\r\n        }\r\n    \r\n        /**\r\n        * 停止计时。\r\n        * @param {string} unit 对时间差进行转换的单位，可取的值为：\r\n        *   `ms`: 毫秒(默认值)。\r\n        *   `s`: 秒。\r\n        *   `m`: 分。\r\n        *   `h`: 小时。\r\n        *   `d`: 天。\r\n        * @returns 返回一个对象，结构为 \r\n        *   {\r\n        *       t0: Date,       //开始时间。\r\n        *       t1: Date,       //结束时间。\r\n        *       dt: Number,     //时间差，即耗时，单位为毫秒。\r\n        *       value: Number,  //针对参数 unit 传入的单位转换后的时间差值。 \r\n        *       unit: string,   //参数 unit 传入的值。\r\n        *   }\r\n        */\r\n        stop(unit = 'ms') {\r\n            let meta = mapper.get(this);\r\n            let t0 = meta.t0;\r\n            let t1 = new Date();\r\n            let dt = t1 - t0;\r\n            let value = 0;\r\n    \r\n            let item = {\r\n                't0': t0,\r\n                't1': t1,\r\n                'dt': dt,\r\n                'value': 0,\r\n                'unit': '',\r\n            };\r\n    \r\n            switch (unit) {\r\n                case 'ms':\r\n                    value = dt;\r\n                    break;\r\n                case 's':\r\n                    value = Math.ceil(dt / 1000);\r\n                    break;\r\n                case 'm':\r\n                    value = Math.ceil(dt / 1000 / 60);\r\n                    break;\r\n                case 'h':\r\n                    value = Math.ceil(dt / 1000 / 3600);\r\n                    break;\r\n                case 'd':\r\n                    value = Math.ceil(dt / 1000 / 3600 / 24);\r\n                    break;\r\n                default:\r\n                    throw new Error(`无法识别的参数 unit，只允许是以下值之一：ms、s、m、h、d。`);\r\n            }\r\n    \r\n            if (value) {\r\n                item.value = value;\r\n                item.unit = unit;\r\n            }\r\n    \r\n            meta.list.push(item);\r\n    \r\n            return item;\r\n        }\r\n    \r\n        /**\r\n        * 获取所有的计时历史列表。\r\n        */\r\n        list() {\r\n            let meta = mapper.get(this);\r\n            return [...meta.list,];\r\n        }\r\n    \r\n        /**\r\n        * 重置计时器。\r\n        * 会清空所有的计时历史，回到创建时的状态。\r\n        */\r\n        reset() { \r\n            let meta = mapper.get(this);\r\n    \r\n            meta.t0 = 0;\r\n            meta.list = [];\r\n        }\r\n    }\r\n    \r\n    module.exports = Timer;\n});",
        "dest": "./output/definejs/src/@definejs/timer/Timer.js"
    },
    "Toast": {
        "id": "Toast",
        "name": "Toast",
        "names": [
            "Toast"
        ],
        "file": "temp/node_modules/@definejs/toast/modules/Toast.js",
        "ext": ".js",
        "package": {
            "alias": "toast",
            "name": "@definejs/toast",
            "version": "1.0.2"
        },
        "content": "/**\n* src: @definejs/toast/modules/Toast.js\n* pkg: @definejs/toast@1.0.2\n*/\ndefine('Toast', function (require, module, exports) { \n    const $ = require('jquery');\r\n    const $Object = require('Object');\r\n    const $String = require('String');\r\n    const $Style = require('Style');\r\n    const Emitter = require('Emitter');\r\n    \r\n    //子模块\r\n    const Sample = module.require('Sample');\r\n    const Style = module.require('Style');\r\n    const Meta = module.require('Meta');\r\n    const Masker = module.require('Masker');\r\n    \r\n    const mapper = new Map();\r\n    \r\n    \r\n    \r\n    /**\r\n    * 构造器。\r\n    * @constructor\r\n    */\r\n    function Toast(config) {\r\n        config = $Object.deepAssign({}, exports.defaults, config);\r\n    \r\n        let emitter = new Emitter(this);        //事件驱动器。\r\n        let style = Style.get(config);          //\r\n        let masker = Masker.create(config);     //\r\n    \r\n        let meta = Meta.create(config, {\r\n            'sample': Sample,       //相应的 html 模板。\r\n            'style': style,         //从配置中过滤出样式成员，并进行规范化处理，style 是一个 {}。\r\n            'emitter': emitter,     //事件驱动器。\r\n            'masker': masker,       //遮罩层实例。\r\n            'this': this,           //当前实例，方便内部使用。\r\n        });\r\n    \r\n    \r\n        mapper.set(this, meta);\r\n    \r\n    \r\n        //对外暴露的属性。\r\n        Object.assign(this, {\r\n            'id': meta.id,\r\n            '$': meta.$,\r\n        });\r\n    \r\n    }\r\n    \r\n    \r\n    //实例方法\r\n    Toast.prototype = /**@lends Toast#*/ {\r\n        constructor: Toast,\r\n    \r\n        /**\r\n        * 当前实例的 id。\r\n        * 也是最外层的 DOM 节点的 id。\r\n        */\r\n        id: '',\r\n    \r\n        /**\r\n        * 当前组件最外层的 DOM 节点对应的 jQuery 实例。\r\n        * 必须在 render 之后才存在。\r\n        */\r\n        $: null,\r\n    \r\n        /**\r\n        * 渲染本组件，生成 html 到容器 DOM 节点中。\r\n        * 该方法只允许调用一次。\r\n        * 触发事件: `render`。\r\n        */\r\n        render() {\r\n            let meta = mapper.get(this);\r\n    \r\n            //已经渲染过了。\r\n            if (meta.$) {\r\n                return;\r\n            }\r\n    \r\n            let style = $Style.stringify(meta.style);\r\n    \r\n            let html = $String.format(meta.sample, {\r\n                'id': meta.id,\r\n                'icon': meta.icon,\r\n                'text': meta.text,\r\n                'textId': meta.textId,\r\n                'iconId': meta.iconId,\r\n                'cssClass': meta.cssClass,\r\n                'style': style,\r\n            });\r\n    \r\n            $(meta.container).append(html);\r\n    \r\n            this.$ = meta.$ = $(`#${meta.id}`);\r\n            meta.$icon = $(`#${meta.iconId}`);\r\n            meta.$text = $(`#${meta.textId}`);\r\n    \r\n            meta.emitter.fire('render');\r\n    \r\n        },\r\n    \r\n    \r\n        /**\r\n        * 显示本组件。\r\n        * 已重载 show(text);       //显示指定的文本。\r\n        * 已重载 show(done);       //显示组件，完成后执行回调函数。 要显示的文本以创建实例时指定的为准。\r\n        * 已重载 show(text, done); //显示指定的文本，完成后执行回调函数。\r\n        * 参数：\r\n        *   text: '',       //要显示的文本。\r\n        *   done: fn,       //完成后回调函数。 须在创建实例时指定 `duration` 字段为大于 0 的值才起作用。 \r\n        */\r\n        show(text, done) {\r\n            //重载 show(done); \r\n            //不传入要显示的文本，以创建实例时指定的 text 为准。\r\n            if (typeof text == 'function') {\r\n                done = text;\r\n                text = undefined;\r\n            }\r\n    \r\n            let meta = mapper.get(this);\r\n            let masker = meta.masker;\r\n            let duration = meta.duration;\r\n    \r\n    \r\n            //首次 render。\r\n            if (!meta.$) {\r\n                this.render();\r\n            }\r\n    \r\n            if (masker) {\r\n                masker.show();\r\n            }\r\n    \r\n            if (typeof text == 'string') {\r\n                meta.text = text;\r\n                meta.$text.html(text);\r\n            }\r\n    \r\n            if (duration) {\r\n                setTimeout(function () {\r\n                    meta.this.hide();\r\n                    done && done();\r\n    \r\n                }, duration);\r\n            }\r\n    \r\n            meta.$.toggleClass('NoIcon', !meta.icon);\r\n            meta.$.toggleClass('NoText', !meta.text);\r\n            meta.$.show();\r\n            meta.emitter.fire('show');\r\n    \r\n    \r\n        },\r\n    \r\n        /**\r\n        * 隐藏本组件。\r\n        * 触发事件: `hide`。\r\n        */\r\n        hide() {\r\n            let meta = mapper.get(this);\r\n            let masker = meta.masker;\r\n    \r\n            if (!meta.$) {\r\n                return;\r\n            }\r\n    \r\n            masker && masker.hide();\r\n            meta.$.hide();\r\n            meta.emitter.fire('hide');\r\n    \r\n        },\r\n    \r\n        /**\r\n        * 移除本组件已生成的 DOM 节点。\r\n        * 触发事件: `remove`。\r\n        */\r\n        remove() {\r\n            let meta = mapper.get(this);\r\n    \r\n            if (!meta.$) {\r\n                return;\r\n            }\r\n    \r\n            let div = meta.$.get(0);\r\n            let masker = meta.masker;\r\n    \r\n            div.parentNode.removeChild(div);\r\n            masker && masker.remove();\r\n    \r\n    \r\n            meta.$.off();\r\n    \r\n            meta.$ = this.$ = null;\r\n            meta.$icon = null;\r\n            meta.$text = null;\r\n            meta.masker = null;\r\n    \r\n            meta.emitter.fire('remove');\r\n        },\r\n    \r\n        /**\r\n        * 绑定事件。\r\n        */\r\n        on(...args) {\r\n            var meta = mapper.get(this);\r\n            meta.emitter.on(...args);\r\n        },\r\n    \r\n        /**\r\n        * 销毁本组件\r\n        */\r\n        destroy() {\r\n            let meta = mapper.get(this);\r\n    \r\n            this.remove();\r\n    \r\n            meta.emitter.destroy();\r\n            mapper.remove(this);\r\n        },\r\n    \r\n    };\r\n    \r\n    Toast.defaults = require('Toast.defaults');\r\n    module.exports = exports = Toast;\n});",
        "dest": "./output/definejs/src/@definejs/toast/Toast.js"
    },
    "Toast.defaults": {
        "id": "Toast.defaults",
        "name": "Toast.defaults",
        "names": [
            "Toast.defaults"
        ],
        "file": "temp/node_modules/@definejs/toast/modules/Toast.defaults.js",
        "ext": ".js",
        "package": {
            "alias": "toast",
            "name": "@definejs/toast",
            "version": "1.0.2"
        },
        "content": "/**\n* src: @definejs/toast/modules/Toast.defaults.js\n* pkg: @definejs/toast@1.0.2\n*/\ndefine('Toast.defaults', function (require, module, exports) { \n    /**\r\n    * Toast 模块的默认配置。\r\n    * @name Toast.defaults\r\n    */\r\n    module.exports = {\r\n        /**\r\n        * 生成组件时的 id 前缀。\r\n        * 建议保留现状。\r\n        */\r\n        idPrefix: 'definejs-Toast',\r\n        /**\r\n        * 提示文本。\r\n        */\r\n        text: '',\r\n        /**\r\n        * 组件添加到的容器。\r\n        * 默认为 document.body。\r\n        */\r\n        container: 'body',\r\n        /**\r\n        * 是否启用 mask 层。\r\n        */\r\n        mask: false,\r\n        /**\r\n        * 用到的 font-awsome 的图标。\r\n        */\r\n        icon: 'check',\r\n        /**\r\n        * 显示的持续时间(毫秒)。\r\n        * 0 表示一直显示。\r\n        */\r\n        duration: 0,\r\n        /**\r\n        * 组件用到的 css 类名。\r\n        */\r\n        cssClass: '',\r\n        /**\r\n        * 组件的 css 样式 z-index 值。\r\n        * 为了给其它组件计算 `z-index`，此处需要显式提供一个值。\r\n        * 因为仅用 css 中的会比较麻烦。\r\n        */\r\n        'z-index': 1024,\r\n        /**\r\n        * 组件宽度。\r\n        * 可以指定为百分比的字符串，或指定具体的数值（单位为像素），\r\n        */\r\n        width: '',\r\n        /**\r\n        * 组件高度。\r\n        * 可以指定为百分比的字符串，或指定具体的数值（单位为像素），\r\n        */\r\n        height: '',\r\n        /**\r\n        * 样式集合。\r\n        * 外层的同名字段优先级高于里面的。\r\n        */\r\n        style: {},\r\n    };\r\n    \r\n    \n});",
        "dest": "./output/definejs/src/@definejs/toast/Toast.defaults.js"
    },
    "Toast/Masker": {
        "id": "Toast/Masker",
        "name": "Masker",
        "names": [
            "Toast",
            "Masker"
        ],
        "file": "temp/node_modules/@definejs/toast/modules/Toast/Masker.js",
        "ext": ".js",
        "package": {
            "alias": "toast",
            "name": "@definejs/toast",
            "version": "1.0.2"
        },
        "content": "/**\n* src: @definejs/toast/modules/Toast/Masker.js\n* pkg: @definejs/toast@1.0.2\n*/\ndefine('Toast/Masker', function (require, module, exports) { \n    const Masker = require('Masker');\r\n    \r\n    module.exports = {\r\n        create(config) {\r\n    \r\n            let defaults = {\r\n                'container': config.container,\r\n            };\r\n    \r\n            let options = Masker.normalize(defaults, config.mask); //返回一个 {} 或 null。\r\n    \r\n    \r\n            if (!options) {\r\n                return null;\r\n            }\r\n    \r\n            Object.assign(options, {\r\n                'z-index': config['z-index'] - 1,\r\n            });\r\n    \r\n            let masker = new Masker(options);\r\n    \r\n    \r\n            return masker;\r\n    \r\n        },\r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/toast/Toast/Masker.js"
    },
    "Toast/Meta": {
        "id": "Toast/Meta",
        "name": "Meta",
        "names": [
            "Toast",
            "Meta"
        ],
        "file": "temp/node_modules/@definejs/toast/modules/Toast/Meta.js",
        "ext": ".js",
        "package": {
            "alias": "toast",
            "name": "@definejs/toast",
            "version": "1.0.2"
        },
        "content": "/**\n* src: @definejs/toast/modules/Toast/Meta.js\n* pkg: @definejs/toast@1.0.2\n*/\ndefine('Toast/Meta', function (require, module, exports) { \n    \r\n    const IDMaker = require('IDMaker');\r\n    \r\n    \r\n    \r\n    module.exports = {\r\n        create(config, others) {\r\n            let maker = new IDMaker(config.idPrefix);\r\n            let text = config.text;\r\n    \r\n            text = typeof text == 'number' ? String(text) : text;\r\n            text = text || '';\r\n    \r\n    \r\n            let meta = {\r\n                'id': maker.next(),\r\n                'icon': config.icon,\r\n                'text': text,\r\n                'textId': maker.next('text'),\r\n                'iconId': maker.next('icon'),\r\n                'cssClass': config.cssClass || '',\r\n                'container': config.container,\r\n                'duration': config.duration || 0,\r\n                'sample': '',\r\n                'style': '',                //样式字符串。\r\n    \r\n                'masker': null,             // Masker 的实例，重复使用。\r\n                'emitter': null,            //事件驱动器。\r\n                'this': null,               //当前实例，方便内部使用。\r\n                '$': null,                  //组件最外层的 DOM 节点的 jQuery 实例。\r\n                '$icon': null,              //$(iconId)。\r\n                '$text': null,              //$(textId)。\r\n    \r\n            };\r\n    \r\n    \r\n    \r\n            Object.assign(meta, others);\r\n    \r\n    \r\n            return meta;\r\n    \r\n    \r\n        },\r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/toast/Toast/Meta.js"
    },
    "Toast/Sample": {
        "id": "Toast/Sample",
        "name": "Sample",
        "names": [
            "Toast",
            "Sample"
        ],
        "file": "temp/node_modules/@definejs/toast/modules/Toast/Sample.js",
        "ext": ".js",
        "package": {
            "alias": "toast",
            "name": "@definejs/toast",
            "version": "1.0.2"
        },
        "content": "/**\n* src: @definejs/toast/modules/Toast/Sample.js\n* pkg: @definejs/toast@1.0.2\n*/\ndefine('Toast/Sample', function (require, module, exports) { \n    \r\n    module.exports = `\r\n        <div id=\"{id}\" class=\"definejs-Toast {cssClass}\" style=\"{style}\">\r\n            <div>\r\n                <i id=\"{iconId}\" class=\"fa fa-{icon}\"></i>\r\n            </div>\r\n            <span id=\"{textId}\" class=\"Text\">{text}</span>\r\n        </div>\r\n    \r\n    `;\n});",
        "dest": "./output/definejs/src/@definejs/toast/Toast/Sample.js"
    },
    "Toast/Style": {
        "id": "Toast/Style",
        "name": "Style",
        "names": [
            "Toast",
            "Style"
        ],
        "file": "temp/node_modules/@definejs/toast/modules/Toast/Style.js",
        "ext": ".js",
        "package": {
            "alias": "toast",
            "name": "@definejs/toast",
            "version": "1.0.2"
        },
        "content": "/**\n* src: @definejs/toast/modules/Toast/Style.js\n* pkg: @definejs/toast@1.0.2\n*/\ndefine('Toast/Style', function (require, module, exports) { \n    const $Object = require('Object');\r\n    const Style = require('Style');\r\n    \r\n    module.exports = {\r\n        /**\r\n        * 从配置对象中过滤出样式成员，并进行规范化处理。\r\n        * 返回一个样式对象 {}。\r\n        */\r\n        get(config) {\r\n            let obj = $Object.filter(config, ['height', 'width', 'z-index']);\r\n            let style = Style.objectify(config.style);\r\n    \r\n            style = Style.merge(style, obj);\r\n            style = Style.pixelize(style, ['height', 'width',]);\r\n    \r\n            return style;\r\n        },\r\n    \r\n    };\r\n    \r\n    \r\n    \r\n    \n});",
        "dest": "./output/definejs/src/@definejs/toast/Toast/Style.js"
    },
    "Tree": {
        "id": "Tree",
        "name": "Tree",
        "names": [
            "Tree"
        ],
        "file": "temp/node_modules/@definejs/tree/modules/Tree.js",
        "ext": ".js",
        "package": {
            "alias": "tree",
            "name": "@definejs/tree",
            "version": "1.0.5"
        },
        "content": "/**\n* src: @definejs/tree/modules/Tree.js\n* pkg: @definejs/tree@1.0.5\n*/\ndefine('Tree', function (require, module, exports) { \n    \r\n    const Node = module.require('Node');\r\n    \r\n    const mapper = new Map();\r\n    let idCounter = 0;\r\n    \r\n    /**\r\n    * 树形结构的存储类。\r\n    * \r\n    */\r\n    class Tree {\r\n        /**\r\n        * 构造器。\r\n        * @param {Array} [list] 可选，要解析的类文件路径列表。\r\n        * @param {string} [seperator] 可选，类文件路径里的分隔符，如 `/`。\r\n        */\r\n        constructor(list, seperator) {\r\n            let id = `definejs-Tree-${idCounter++}`;\r\n            let root = Node.create();\r\n    \r\n            let meta = {\r\n                'id': id,\r\n                'root': root,\r\n                'this': this,\r\n            };\r\n    \r\n            mapper.set(this, meta);\r\n    \r\n            Object.assign(this, {\r\n                'id': meta.id,\r\n            });\r\n    \r\n            if (Array.isArray(list)) {\r\n                seperator = seperator || '/';\r\n    \r\n                list.forEach((item) => {\r\n                    let keys = item.split(seperator);\r\n                    meta.this.set(keys);\r\n                });\r\n            }\r\n    \r\n        }\r\n    \r\n        // /**\r\n        // * 当前实例的 id。\r\n        // */\r\n        // id = ''\r\n    \r\n    \r\n        /**\r\n        * 渲染树为文本形式的图形结构。\r\n        * @param {Array} \r\n        */\r\n        render(keys, fn) {\r\n            //重载 render(fn);\r\n            if (typeof keys == 'function') {\r\n                fn = keys;\r\n                keys = null;\r\n            }\r\n    \r\n            keys = keys || [];\r\n    \r\n            let id$info = {};\r\n            let lines = [];\r\n            let TAB = Array(4 + 1).join(` `);\r\n    \r\n            this.each(keys, function (node) {\r\n                let { id, x, y, key, siblings, parent, } = node;\r\n                let hasNextSibling = x < siblings.length - 1;       //\r\n                let linker = hasNextSibling ? `├──` : `└──`;        //\r\n                let content = `${linker} ${key}`;                   //如 `├── Main`\r\n                let tabs = y > 1 ? Array(y).join(TAB) : ``;         //缩进量。 根据当前节点所处的层级决定。\r\n    \r\n    \r\n                if (parent && !parent.isRoot) {\r\n                    let p = id$info[parent.id];\r\n                    if (p) {\r\n                        let c = p.hasNextSibling ? `│` : ` `;\r\n                        tabs = p.tabs + c + TAB.slice(1);\r\n                    }\r\n                }\r\n    \r\n    \r\n                let info = id$info[id] = {\r\n                    hasNextSibling,\r\n                    tabs,\r\n                    content,\r\n                };\r\n    \r\n                let value = `${tabs}${content}`;\r\n    \r\n                if (fn) {\r\n                    value = fn(node, {\r\n                        ...info,\r\n                        linker,\r\n                    });\r\n    \r\n                    //回调函数中明确返回了 false，则表示要中止迭代。\r\n                    if (value === false) {\r\n                        return false;\r\n                    }\r\n                }\r\n    \r\n                lines.push(value);\r\n    \r\n            });\r\n    \r\n            return lines;\r\n        }\r\n    \r\n    \r\n        /**\r\n        * 设置指定节点上的值。\r\n        * 如果不存在该节点，则先创建，然后存储值到上面；否则直接改写原来的值为指定的值。\r\n        * @param {Array} keys 节点路径数组。\r\n        * @param value 要设置的值。\r\n        * @example\r\n        *   tree.set(['path', 'to'], 123);\r\n        */\r\n        set(keys, value) {\r\n            let meta = mapper.get(this);\r\n            Node.set(meta.root, keys, value);\r\n    \r\n        }\r\n    \r\n        /**\r\n        * 获取指定路径的节点上的值。\r\n        * @return 返回该节点上的值。 如果不存在该节点，则返回 undefined。\r\n        * @example\r\n        *   tree.get(['path', 'to']); //获取路径为 'path' -> 'to' 的节点上存储的值。\r\n        */\r\n        get(keys) {\r\n            let meta = mapper.get(this);\r\n            let node = Node.get(meta.root, keys);\r\n    \r\n            return node ? node.value : undefined;\r\n        }\r\n    \r\n        /**\r\n        * 判断是否存在指定路径的节点。\r\n        * @param {Array} keys 节点路径数组。\r\n        */\r\n        has(keys) {\r\n            let meta = mapper.get(this);\r\n            let node = Node.get(meta.root, keys);\r\n    \r\n            return !!node;\r\n        }\r\n    \r\n    \r\n        /**\r\n        * 对整棵树或指定节点开始的子树中的所有节点进行迭代执行一个回调函数。\r\n        * 已重载 each(fn); //对整棵树进行迭代。\r\n        * 已重载 each(keys, fn); //对指定的节点开始的子树进行迭代。\r\n        * @param {Array} keys 节点路径数组。\r\n        * @param {function} fn 迭代时要执行的回调函数。\r\n        *   在回调函数中明确返回 false 会中止迭代。\r\n        * \r\n        */\r\n        each(keys, fn) {\r\n            //重载 each(fn);  \r\n            //对整棵树进行迭代。\r\n            if (typeof keys == 'function') {\r\n                fn = keys;\r\n                keys = [];\r\n            }\r\n    \r\n    \r\n            if (typeof fn != 'function') {\r\n                throw new Error(`参数 fn 必须为一个函数。`);\r\n            }\r\n    \r\n    \r\n            let meta = mapper.get(this);\r\n            let root = meta.root;\r\n            let node = keys.length > 0 ? Node.get(root, keys) : root;\r\n    \r\n            if (!node) {\r\n                throw new Error(`不存在路径为 ${keys.join('.')} 的节点。`);\r\n            }\r\n    \r\n            Node.each(node, fn);\r\n        }\r\n    \r\n        /**\r\n        * 清空全部节点及数据。\r\n        */\r\n        clear() {\r\n            let meta = mapper.get(this);\r\n    \r\n            meta.root = Node.create([], null);\r\n        }\r\n    \r\n        /**\r\n        * 删除指定节点上的值。\r\n        */\r\n        remove(keys) {\r\n            let meta = mapper.get(this);\r\n            let node = Node.get(meta.root, keys);\r\n    \r\n            if (!node) { //不存在该节点\r\n                return;\r\n            }\r\n    \r\n            delete node.value; //仅删除值，子节点不受影响。\r\n        }\r\n    \r\n        /**\r\n        * 销毁。\r\n        */\r\n        destroy() {\r\n            mapper.delete(this);\r\n        }\r\n    \r\n        \r\n    }\r\n    \r\n    module.exports = Tree;\n});",
        "dest": "./output/definejs/src/@definejs/tree/Tree.js"
    },
    "Tree/Node": {
        "id": "Tree/Node",
        "name": "Node",
        "names": [
            "Tree",
            "Node"
        ],
        "file": "temp/node_modules/@definejs/tree/modules/Tree/Node.js",
        "ext": ".js",
        "package": {
            "alias": "tree",
            "name": "@definejs/tree",
            "version": "1.0.5"
        },
        "content": "/**\n* src: @definejs/tree/modules/Tree/Node.js\n* pkg: @definejs/tree@1.0.5\n*/\ndefine('Tree/Node', function (require, module, exports) { \n    \r\n    \r\n    let idCounter = 0;\r\n    \r\n    module.exports = exports = {\r\n    \r\n        create(keys = [], parent = null) { \r\n            let key = keys.slice(-1)[0];\r\n            let id = `node-${idCounter++}`;\r\n            let depth = keys.length;\r\n            let siblings = parent ? parent.nodes : [];\r\n    \r\n            let node = {\r\n                'id': id,                   //全局 id。\r\n                'y': depth,                 //当前层级的深度。\r\n                'x': 0,                     //在兄弟节点列表中的索引号（排名）。\r\n                'key': key || '',           //当前的 key，方便后续处理。\r\n                'keys': keys,               //从根节点到当前节点的完整路径，方便后续处理。\r\n                'parent': parent,           //父节点。 如果为 null，则表示当前节点为根节点。\r\n                'isRoot': !parent,          //是否为根节点。\r\n                'key$node': {},             //子节点的容器对象。 如果为空对象 {}，则表示当前节点为叶子节点。\r\n                'nodes': [],                //子节点列表。 如果为空数组 []，则表示当前节点为叶子节点。\r\n                'siblings': siblings,       //兄弟节点列表。 包括自己在内。\r\n                //'value': undefined,       //会有一个这样的字段，但先不创建。\r\n            };\r\n    \r\n            return node;\r\n        },\r\n    \r\n        set(node, keys, value) { \r\n            let parent = node;\r\n            let maxIndex = keys.length - 1;\r\n            let newNodes = [];\r\n    \r\n    \r\n            keys.forEach(function (key, index) {\r\n                let node = parent.key$node[key];\r\n    \r\n                //尚未存在该节点，则先创建。\r\n                if (!node) {\r\n                    let sliceKeys = keys.slice(0, index + 1);//从根节点到当前节点的完整路径，方便后续处理。\r\n    \r\n                    node = exports.create(sliceKeys, parent);\r\n                    \r\n                    parent.key$node[key] = node;\r\n                    parent.nodes.push(node);\r\n                    newNodes.push(node);\r\n    \r\n                    node.x = node.siblings.length - 1;\r\n                    \r\n                }\r\n    \r\n                if (index < maxIndex) {//准备下一轮迭代。\r\n                    parent = node;\r\n                }\r\n                else { //最后一项。\r\n                    node.value = value;\r\n                }\r\n            });\r\n    \r\n            return newNodes;\r\n        },\r\n    \r\n    \r\n        get(node, keys) {\r\n            let { key$node, } = node;\r\n            let maxIndex = keys.length - 1;\r\n    \r\n            for (let index = 0; index <= maxIndex; index++) {\r\n                let key = keys[index];\r\n                let node = key$node[key];\r\n    \r\n                if (!node || index == maxIndex) { //不存在了，或是最后一项了。\r\n                    return node || null;\r\n                }\r\n    \r\n                key$node = node.key$node; //准备下一轮迭代。\r\n            }\r\n        },\r\n    \r\n        //迭代指定节点下的所有子节点。\r\n        each(node, fn) {\r\n            let { nodes, } = node;\r\n    \r\n            //叶子节点。\r\n            if (!nodes.length) {\r\n                return;\r\n            }\r\n    \r\n    \r\n            nodes.some((node, index) => { \r\n                let value = fn(node, index);\r\n    \r\n                // 只有在 fn 中明确返回 false 才停止循环。\r\n                if (value === false) {\r\n                    return true;\r\n                }\r\n    \r\n                exports.each(node, fn); //递归。\r\n            });\r\n    \r\n            \r\n        },\r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/tree/Tree/Node.js"
    },
    "Url": {
        "id": "Url",
        "name": "Url",
        "names": [
            "Url"
        ],
        "file": "temp/node_modules/@definejs/url/modules/Url.js",
        "ext": ".js",
        "package": {
            "alias": "url",
            "name": "@definejs/url",
            "version": "1.0.0"
        },
        "content": "/**\n* src: @definejs/url/modules/Url.js\n* pkg: @definejs/url@1.0.0\n*/\ndefine('Url', function (require, module, exports) { \n    module.exports = exports = {\r\n        /**\r\n        * 默认配置。\r\n        */\r\n        defaults: require('Url.defaults'),\r\n        \r\n        /**\r\n        * 获取当前 web 站点的根目录。\r\n        */\r\n        root() {\r\n            let root = exports.defaults.root;\r\n    \r\n            if (typeof root == 'function') {\r\n                root = root();\r\n            }\r\n    \r\n            //确保以 '/' 结尾。\r\n            if (!root.endsWith('/')) {\r\n                root += '/';\r\n            }\r\n    \r\n            return root;\r\n        },\r\n    \r\n        /**\r\n        * 获取 url 的主体部分，即去掉 query 和 hash 后的部分。\r\n        * @param {String} url 要解析的 url 地址。\r\n        * @returns {String} 返回解析后的 url 地址。\r\n        */\r\n        main(url) {\r\n            url = url.split('#')[0];\r\n            url = url.split('?')[0];\r\n    \r\n            return url;\r\n        },\r\n    \r\n        /**\r\n         * 检查给定的 url 是否为完整的 url。\r\n         * 即是否以 'http://' 或 'https://' 开头。\r\n         * @param {String} url 要检查的 url。\r\n         * @returns {boolean} 返回 true 或 false。\r\n         */\r\n        isFull(url) {\r\n            if (typeof url != 'string') {\r\n                return false;\r\n            }\r\n    \r\n            return url.startsWith('http://') ||\r\n                url.startsWith('https://');\r\n        },\r\n    \r\n        /**\r\n        * 检测指定的 url 是否为特定的扩展名类型的文件。\r\n        * @param {string} url 要检测的文件名。\r\n        * @param {string} ext 要检测的扩展名，以 \".\" 开始。\r\n        * @return {boolean} 如果该文件名以指定的扩展名结尾，则返回 true；否则返回 false。\r\n        * @example \r\n            Url.is('a/b/c/login.JSON', '.json'); //返回 true\r\n        */\r\n        isExt(url, ext) {\r\n            if (typeof url != 'string' || typeof ext != 'string') {\r\n                return false;\r\n            }\r\n    \r\n            url = exports.main(url);\r\n    \r\n            return url.slice(0 - ext.length).toLowerCase() == ext.toLowerCase();\r\n        },\r\n    \r\n    \r\n        /**\r\n        * 解析路径。\r\n        * 这是一个第三方库的方法 resolveUrl。\r\n        */\r\n        resolve(baseUrl /* ...urls */) {\r\n            var len = arguments.length;\r\n            if (len == 0) {\r\n                throw new Error('resolveUrl requires at least one argument; got none.');\r\n            }\r\n    \r\n            var base = document.createElement('base');\r\n            base.href = baseUrl;\r\n    \r\n            if (len == 1) {\r\n                return base.href;\r\n            }\r\n    \r\n    \r\n            var head = document.head;\r\n            head.insertBefore(base, head.firstChild);\r\n    \r\n            var url = '';\r\n            var a = document.createElement('a');\r\n    \r\n    \r\n            for (var i = 1; i < len; i++) {\r\n                a.href = arguments[i];\r\n                url = a.href;\r\n                base.href = url;\r\n            }\r\n    \r\n            head.removeChild(base);\r\n    \r\n            return url;\r\n        },\r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/url/Url.js"
    },
    "Url.defaults": {
        "id": "Url.defaults",
        "name": "Url.defaults",
        "names": [
            "Url.defaults"
        ],
        "file": "temp/node_modules/@definejs/url/modules/Url.defaults.js",
        "ext": ".js",
        "package": {
            "alias": "url",
            "name": "@definejs/url",
            "version": "1.0.0"
        },
        "content": "/**\n* src: @definejs/url/modules/Url.defaults.js\n* pkg: @definejs/url@1.0.0\n*/\ndefine('Url.defaults', function (require, module, exports) { \n    /**\r\n    * Url 模块的默认配置。\r\n    * @name Url.defaults\r\n    */\r\n    module.exports = {\r\n        //这里取当前页面的路径作为根地址。\r\n        //注意：只适用于当前页面在根目录的情况。\r\n        //IE10 及以下 location.origin 不存在。\r\n        root() { \r\n            return `${location.protocol}//${location.host}${location.pathname.split('/').slice(0, -1).join('/')}/`;\r\n        },\r\n    \r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/url/Url.defaults.js"
    },
    "View": {
        "id": "View",
        "name": "View",
        "names": [
            "View"
        ],
        "file": "temp/node_modules/@definejs/view/modules/View.js",
        "ext": ".js",
        "package": {
            "alias": "view",
            "name": "@definejs/view",
            "version": "1.0.1"
        },
        "content": "/**\n* src: @definejs/view/modules/View.js\n* pkg: @definejs/view@1.0.1\n*/\ndefine('View', function (require, module, exports) { \n    const Panel = require('Panel');\r\n    \r\n    /**\r\n    * 构造器。\r\n    * @constructor\r\n    */\r\n    function View(container, config) {\r\n        config = Object.assign({}, exports.defaults, config);\r\n    \r\n        Panel.call(this, container, config);\r\n    \r\n        this.$.addClass('definejs-View'); //这两个类名必须加上。\r\n    \r\n        if (config.background) {\r\n            this.$.css('background', config.background);\r\n        }\r\n    \r\n        //针对移动端的全屏视图模式。\r\n        //这里只负责有针对性的加上 `FullScreen` 类，而不用去掉该类。\r\n        //因为业务层可能自行加上了该类，但 fullscreen 为 false。\r\n        if (config.fullscreen) {\r\n            this.$.addClass('FullScreen');\r\n        }\r\n    }\r\n    \r\n    //从 Panel 类继承。\r\n    //扩展的实例成员。\r\n    View.prototype = Object.assign(new Panel(), {\r\n        /**\r\n        * 仅针对移动端的代码。\r\n        * 启用/禁用视图的滑动返回。\r\n        */\r\n        slider: function (enabled) {\r\n            let ViewSlider = exports.defaults.ViewSlider;\r\n    \r\n            if (!ViewSlider) {\r\n                return;\r\n            }\r\n    \r\n            ViewSlider.slide(this, enabled);\r\n        },\r\n    });\r\n    \r\n    \r\n    //扩展静态成员。\r\n    Object.assign(View, {\r\n        /**\r\n        * 默认配置。\r\n        */\r\n        defaults: require('View.defaults'),\r\n        \r\n        /**\r\n        * 提供一种按标准方法定义视图的方式。\r\n        */\r\n        define: function (id, factory) {\r\n            Panel.define(id, factory, {\r\n                'constructor': View,\r\n                'defaults': exports.defaults,\r\n            });\r\n        },\r\n    \r\n        /**\r\n        * 更新容器。\r\n        * 已重载 update(id);   //更新单个。\r\n        * 已重载 update(ids);  //更新多个。\r\n        */\r\n        update: function (ids) {\r\n            Panel.update(ids, {\r\n                'defaults': exports.defaults,\r\n            });\r\n        },\r\n    \r\n    \r\n    });\r\n    \r\n    module.exports = exports = View;\n});",
        "dest": "./output/definejs/src/@definejs/view/View.js"
    },
    "View.defaults": {
        "id": "View.defaults",
        "name": "View.defaults",
        "names": [
            "View.defaults"
        ],
        "file": "temp/node_modules/@definejs/view/modules/View.defaults.js",
        "ext": ".js",
        "package": {
            "alias": "view",
            "name": "@definejs/view",
            "version": "1.0.1"
        },
        "content": "/**\n* src: @definejs/view/modules/View.defaults.js\n* pkg: @definejs/view@1.0.1\n*/\ndefine('View.defaults', function (require, module, exports) { \n    /**\r\n    * View 模块的默认配置。\r\n    * @name View.defaults\r\n    */\r\n    module.exports = {\r\n        /**\r\n        * 生成组件时的 id 前缀。\r\n        * 建议保留现状。\r\n        */\r\n        idPrefix: 'definejs-View',\r\n    \r\n        /**\r\n        * 针对移动端的。\r\n        */\r\n        ViewSlider: null,   \r\n        /**\r\n        * 所关联的 DOM 节点容器的选择器模板。\r\n        */\r\n        container: '[data-view=\"{id}\"]',\r\n        /**\r\n        * 背景样式。\r\n        */\r\n        background: '',\r\n    };\n});",
        "dest": "./output/definejs/src/@definejs/view/View.defaults.js"
    }
}